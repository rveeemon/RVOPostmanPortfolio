{
  "info": {
    "_postman_id": "d6eae1fb-7aa5-47e1-b574-12e2e4ff4cba",
    "name": "MomentHouse",
    "description": "## General Notes:\n- Endpoints that has tag `Private` needs authorization in order to send request, while `Public` doesn't.\n- Parameters -- `userId` and `artistBrandId`, mostly also accepts `slug` as value instead of just the `id` (`userSlug`, `artistBrandSlug`). Feel free to try.\n- There are pre-requisite added on the Collection level. This generates random data so we can use it on some of our requests. This isn't stored in Environment level.\n\n## Authorization\nFor the Authorization, user should supply a Bearer Token on a `Private` endpoint.\n\n**To generate user Bearer Token,**\n- Go to Users resource > Login endpoint\n- In the Body tab, replace `{{UserEmail}}` and `{{UserPassword}}` with your email and password respectively\n- You should receive a status code 200 and a token from the response body. The value of the token should be your Bearer Token\n\n**To use this on a request,**\n- Simply go to an endpoint\n- In the Authorization tab, select Bearer Token from the Type dropdown\n- Paste your token in the input field and run your test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "23203535",
    "_collection_link": "https://momenthouse.postman.co/workspace/API-Test-Workspace~fbe5ac13-78ff-405e-929c-f6b33307d111/collection/23203535-d6eae1fb-7aa5-47e1-b574-12e2e4ff4cba?action=share&creator=23203535&source=collection_link"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Login",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\":\"{{UserEmail}}\",\n    \"password\":\"{{UserPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/auth/login",
              "host": [
                "{{host}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "`Public`\n\nLogs in user credentials supplied in request body. Gets token and user information if credentials are valid."
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/auth/logout",
              "host": [
                "{{host}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            },
            "description": "`Private`\n\nLogs out user and revokes the token's access. Requires authorization header with valid token."
          },
          "response": []
        },
        {
          "name": "Mobile login",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"phone\": \"\",\n\t\"code\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/auth/mobile-login",
              "host": [
                "{{host}}"
              ],
              "path": [
                "auth",
                "mobile-login"
              ]
            },
            "description": "`Public`\n\nLogs in user credentials supplied in request body. Gets token and user information if credentials are valid."
          },
          "response": []
        },
        {
          "name": "Get Spotify scope",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/auth/spotify",
              "host": [
                "{{host}}"
              ],
              "path": [
                "auth",
                "spotify"
              ]
            },
            "description": "`Public`\n\nLogs in user credentials supplied in request body. Gets token and user information if credentials are valid."
          },
          "response": []
        },
        {
          "name": "Login via Spotify",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/auth/spotify/callback",
              "host": [
                "{{host}}"
              ],
              "path": [
                "auth",
                "spotify",
                "callback"
              ]
            },
            "description": "`Public`\n\nLogs in user credentials supplied in request body. Gets token and user information if credentials are valid."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Password",
          "item": [
            {
              "name": "Verify password reset token",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{tempUserEmail}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/users/check-reset-token/:token",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "users",
                    "check-reset-token",
                    ":token"
                  ],
                  "variable": [
                    {
                      "key": "token",
                      "value": "{{PasswordResetToken}}",
                      "description": "Token that was sent to email upon requesting 'Reset Password'"
                    }
                  ]
                },
                "description": "`Public`\n\nThis verifies a reset password token for user."
              },
              "response": []
            },
            {
              "name": "Update password via token",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": \"{{TempUserId}}\", \n    \"password\": \"{{UserPassword}}\", \n    \"resetPasswordToken\": \"{{PasswordResetToken}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/users/update-password",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "users",
                    "update-password"
                  ]
                },
                "description": "`Public`\n\nThis updates password when a user update their password via reset password.\n\n\nReset passwordToken can be obtained from email sent by `/users/reset-password` or the `Reset password` route"
              },
              "response": []
            },
            {
              "name": "Reset password",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{TempUserEmail}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/users/reset-password",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "users",
                    "reset-password"
                  ]
                },
                "description": "`Public`\n\nThis creates a reset password token for user and sends it to the user email provided in request body."
              },
              "response": []
            },
            {
              "name": "Update password via Profile",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const options = {",
                      "    url: `${pm.variables.get('host')}/users/profile/update-password`,",
                      "    method: 'POST',",
                      "    header: { ",
                      "        'Authorization': `Bearer ${pm.variables.get('token')}`,",
                      "        'content-type': 'application/json' },",
                      "    body: {",
                      "        mode: 'raw',",
                      "        raw: JSON.stringify({",
                      "            \"userId\": `${pm.variables.get('TempUserId')}`, ",
                      "            \"oldPassword\": `${pm.variables.get('DefaultPassword')}`, ",
                      "            \"password\": `${pm.variables.get('UserPassword')}`, ",
                      "            \"confirmPassword\": `${pm.variables.get('UserPassword')}`",
                      "        })",
                      "    }",
                      "};",
                      "",
                      "pm.sendRequest(options, function (error, result) {",
                      "    let data = result.json();",
                      "    console.log(data.message)",
                      "",
                      "    if (error) {",
                      "        console.log(error);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": \"{{TempUserId}}\", \n    \"oldPassword\": \"{{UserPassword}}\", \n    \"password\": \"{{DefaultPassword}}\",\n    \"confirmPassword\": \"{{DefaultPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/users/profile/update-password",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "users",
                    "profile",
                    "update-password"
                  ]
                },
                "description": "`Private`\n\nThis update password when a user update his password using reset password on Setting page."
              },
              "response": []
            }
          ],
          "description": "This is a sub-folder of `Users` resources. Contains user password-related endpoints.\nsample update text"
        },
        {
          "name": "Verify my token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/jwt/verify",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "jwt",
                "verify"
              ]
            },
            "description": "`Private`\n\nCheck if user JWT is valid. Only valid JWT can be used for login, expired JWT cannot be used in requests."
          },
          "response": []
        },
        {
          "name": "Check user if verified",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/is_verified",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "is_verified"
              ]
            },
            "description": "`Private` \n\nCheck if user account is verified via email verification."
          },
          "response": []
        },
        {
          "name": "Check user if superuser",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/is_super",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "is_super"
              ]
            },
            "description": "`Private`\n\nCheck if user is a `Superuser`."
          },
          "response": []
        },
        {
          "name": "Get User Watchpage",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/:userId/watchpage",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                ":userId",
                "watchpage"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{FanUserId}}",
                  "description": "ID of user you want to get information"
                }
              ]
            },
            "description": "`Private`\n\nThis allows a user to get private information about their own account by supplying their own `userId` and is authenticated.\n\n`Superuser` can access any user information if authenticated and supplies other user's `userId` in param."
          },
          "response": []
        },
        {
          "name": "Get user private information",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{FanUserId}}",
                  "description": "ID of user you want to get information"
                }
              ]
            },
            "description": "`Private`\n\nThis allows a user to get private information about their own account by supplying their own `userId` and is authenticated.\n\n`Superuser` can access any user information if authenticated and supplies other user's `userId` in param."
          },
          "response": []
        },
        {
          "name": "Get user public information",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/:userIdOrSlug/public",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                ":userIdOrSlug",
                "public"
              ],
              "variable": [
                {
                  "key": "userIdOrSlug",
                  "value": "{{UserId}}",
                  "description": "ID or slug of the user you wanted to get public information"
                }
              ]
            },
            "description": "`Public`\n\nThis gets user's exposed public information."
          },
          "response": [
            {
              "name": "Get user public information",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:5051/api/v1/users/:userIdOrSlug/public",
                  "protocol": "http",
                  "host": [
                    "localhost"
                  ],
                  "port": "5051",
                  "path": [
                    "api",
                    "v1",
                    "users",
                    ":userIdOrSlug",
                    "public"
                  ],
                  "variable": [
                    {
                      "key": "userIdOrSlug",
                      "value": "lomin",
                      "description": "ID or slug of the user you wanted to get public information"
                    }
                  ]
                }
              },
              "_postman_previewlanguage": null,
              "header": [],
              "cookie": [],
              "body": null
            }
          ]
        },
        {
          "name": "Get artist brand public information",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/:userId/artist_brands",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                ":userId",
                "artist_brands"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{UserId}}",
                  "description": "ID of user you want to get artist brand's public information"
                }
              ]
            },
            "description": "`Public`\n\nGets the artist brand's public information page."
          },
          "response": []
        },
        {
          "name": "Confirm user email",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/email/confirm/:token",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "email",
                "confirm",
                ":token"
              ],
              "variable": [
                {
                  "key": "token",
                  "value": "",
                  "description": "Token that is sent to email address after sign up"
                }
              ]
            },
            "description": "`Public`\n\nUsed to verify user sign up via email verification."
          },
          "response": []
        },
        {
          "name": "Gets my permissions",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"Array contains viewArtistBrands permission\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"viewArtistBrands\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/perms/has-perms",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "perms",
                "has-perms"
              ]
            },
            "description": "`Private`\n\nGets and exposes the permissions of currently authenticated user."
          },
          "response": []
        },
        {
          "name": "Get user NFTs",
          "protocolProfileBehavior": {
            "disableCookies": false
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{FanUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/:userId/nfts",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                ":userId",
                "nfts"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{FanUserId}}",
                  "description": "ID of the user you wanted to get NFT collection"
                }
              ]
            },
            "description": "`Public` \n\nGets user's NFT collection details\n\n\n\n`Private`\n\nGets user's NFT collection details but includes more details (shipping) if the logged in user is the owner of the `userId`"
          },
          "response": []
        },
        {
          "name": "Get Default Avatar Config",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/default-avatar-configs",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "default-avatar-configs"
              ]
            },
            "description": "`Public`\n\nAllows anyone to get the default avatar config."
          },
          "response": []
        },
        {
          "name": "Get all users with custom Avatars",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/users/custom-avatars",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "custom-avatars"
              ]
            },
            "description": "`Private`\n\nGets all the users with custom avatars."
          },
          "response": []
        },
        {
          "name": "Check email if registered",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{UserEmail}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/has_account",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "has_account"
              ]
            },
            "description": "`Public`\n\nCheck if email supplied in request body is registered or not."
          },
          "response": []
        },
        {
          "name": "Create an artist user (Unapproved)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"captchaToken\": \"{{CaptchaToken}}\", \n    \"displayName\": \"{{DisplayName}}\" , \n    \"email\": \"test.mh.staging+{{RandomNumber}}@gmail.com\", \n    \"firstName\": \"Test\", \n    \"lastName\": \"Artist PM {{RandomNumber}}\", \n    \"password\": \"{{UserPassword}}\",\n    \"timezone\": \"America/Los_Angeles\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users?isArtist=true",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "isArtist",
                  "value": "true",
                  "description": "Used to specify what user to create. If set to true, it creates an Artist"
                }
              ]
            },
            "description": "`Public`\n\nUsed to create an unapproved artist user by supplying information in the request body. Response body contains token to use for authentication. Unapproved artist users cannot put moments on sale.\n\n`captchaToken` is constant.\n\nFor `timezone` value, you can refer to this link. https://docs.trifacta.com/display/DP/Supported+Time+Zone+Values\nYou can use values from \"Time Zone Value\" column and supply it in `timezone`"
          },
          "response": []
        },
        {
          "name": "Create an artist user (Approved)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"captchaToken\": \"{{CaptchaToken}}\", \n    \"displayName\": \"{{DisplayName}}\" , \n    \"email\": \"test.mh.staging+{{RandomNumber}}@gmail.com\", \n    \"firstName\": \"Test\", \n    \"lastName\": \"Artist PM {{RandomNumber}}\", \n    \"password\": \"{{UserPassword}}\",\n    \"timezone\": \"America/Los_Angeles\",\n    \"code\": \"beherenow\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users?isArtist=true",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "isArtist",
                  "value": "true",
                  "description": "Used to specify what user to create. If set to true, it creates an Artist"
                }
              ]
            },
            "description": "`Public`\n\nUsed to create an approved artist user by supplying information in the request body. Response body contains token to use for authentication.\n\n`captchaToken` is constant.\n\nFor `timezone` value, you can refer to this link. https://docs.trifacta.com/display/DP/Supported+Time+Zone+Values\nYou can use values from \"Time Zone Value\" column and supply it in `timezone`"
          },
          "response": []
        },
        {
          "name": "Create a fan user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"captchaToken\": \"{{CaptchaToken}}\", \n    \"displayName\": \"{{DisplayName}}\" , \n    \"email\": \"test.mh.staging+{{RandomNumber}}@gmail.com\", \n    \"firstName\": \"Test\", \n    \"lastName\": \"Fan PM {{RandomNumber}}\", \n    \"password\": \"{{DefaultPassword}}\",\n    \"timezone\": \"America/Los_Angeles\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users?isArtist=false",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "isArtist",
                  "value": "false",
                  "description": "Used to specify what user to create. If set to false, it creates a Fan user"
                }
              ]
            },
            "description": "`Public`\n\n\nUsed to create a fan user by supplying information in the request body. Response body contains token to use for authentication.\n\n`captchaToken` is constant.\n\nFor `timezone` value, you can refer to this link. https://docs.trifacta.com/display/DP/Supported+Time+Zone+Values\nYou can use values from \"Time Zone Value\" column and supply it in `timezone`"
          },
          "response": []
        },
        {
          "name": "Create a user from wallet address",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"captchaToken\": \"{{CaptchaToken}}\", \n    \"timezone\": \"America/Los_Angeles\",\n    \"solWalletId\": \"w435er67ty89upjhgiyutcu\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/wallet_address",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "wallet_address"
              ]
            },
            "description": "`Public`\n\n\nUsed to create a fan user by supplying information in the request body. Response body contains token to use for authentication.\n\n`captchaToken` is constant.\n\nFor `timezone` value, you can refer to this link. https://docs.trifacta.com/display/DP/Supported+Time+Zone+Values\nYou can use values from \"Time Zone Value\" column and supply it in `timezone`"
          },
          "response": []
        },
        {
          "name": "Update fan user profile photo",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "profile_photo",
                  "description": "The image you wanted to assign as profile photo. Replace the image in `VALUE` column",
                  "type": "file",
                  "src": "diagonal bg pattern 2.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/users/image/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "image",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{UserId}}",
                  "description": "ID of the fan user you wanted to change profile photo"
                }
              ]
            },
            "description": "`Private`\n\nUpdate user profile photo. This is used for Fan user.\n\nBody > form-data\nkey = profile_photo and select 'File' from key dropdown"
          },
          "response": []
        },
        {
          "name": "Resend user confirmation email",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{TempUserEmail}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/resend-confirm-email",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "resend-confirm-email"
              ]
            },
            "description": "`Public`\n\nThis resends email verification link to the email used to user signup. Email is supplied in request body."
          },
          "response": []
        },
        {
          "name": "Generate Apple TV code",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{UserEmail}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/generate-code",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "generate-code"
              ]
            },
            "description": "`Public`\n\nThis creates Apple TV 5 digit random number and sends it to the email supplied in request body."
          },
          "response": []
        },
        {
          "name": "Verify Apple TV code",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{UserEmail}}\",\n    \"code\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/verify-code",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "verify-code"
              ]
            },
            "description": "`Public`\n\nThis verifies Apple TV 5 digit random number and if it matches with the email provided in request body."
          },
          "response": []
        },
        {
          "name": "Add new shipping address",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"location\": {\n\t\t\"address\": {\n\t\t\t\"city\": \"Sharonville\",\n\t\t\t\"country_code\": \"OH\",\n\t\t\t\"fullName\": \"FullName {{RandomNumber}} \",\n\t\t\t\"address1\": \"788  Rogers Street\",\n\t\t\t\"line2\": \"line 2\",\n\t\t\t\"province_code\": \"Ohio\",\n\t\t\t\"raw\": \"{{RandomNumber}} Rogers Street Sharonville Ohio 45241\",\n\t\t\t\"zip\": \"45241\",\n\t\t\t\"manual\": true,\n\t\t\t\"phone\": \"567-277-1685\"\n\t\t}\n\t},\n\t\"noLogin\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/shipping_address",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "shipping_address"
              ]
            },
            "description": "`Pirvate`\n\nThis adds new shipping address to the logged-in user."
          },
          "response": []
        },
        {
          "name": "Add new digital address",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"fullName\": \"Ethereum wallet address\",\n\t\"raw\": \"0+ZJt5HBc9XnroeuhFj8BGt1MMKuw27UCyekUFWDcgqHyoZwWqnT\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/digital/address",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "digital",
                "address"
              ]
            },
            "description": "`Pirvate`\n\nThis adds new digital/wallet address.\n\nrequest body:\n\n`fullName` - nickname to be given to the wallet address\n`raw` - wallet address\n\nSome useful reference to wallet addresses https://www.bitpanda.com/academy/en/lessons/what-are-public-keys-private-keys-and-wallet-addresses/"
          },
          "response": []
        },
        {
          "name": "Add phone number",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"artistBrandIdOrSlug\": \"{{ArtistBrandId}}\",\n    \"phoneNumber\": \"{{RandomNumber}}\", \n    \"countryCode\": \"+63\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/phoneNumbers",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "phoneNumbers"
              ]
            },
            "description": "`Private`\n\nThis adds new phone number to the logged-in user.\n\nYou may refer to this link for the accepted `countryCode` values: https://en.wikipedia.org/wiki/List_of_mobile_telephone_prefixes_by_country\n\nIn the column \"International Calling Code\""
          },
          "response": []
        },
        {
          "name": "Check upload speed",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "pexels-анастасия-латунова-10006445.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/users/etc/upload-speed",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "etc",
                "upload-speed"
              ]
            },
            "description": "`Public`\n\n\nThis takes a file then returns status 200 and the calculation for the upload speed. Must send a file that's not exceed 2mb in size."
          },
          "response": []
        },
        {
          "name": "Adding Marketing Email",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{UserEmail}}\",\n    \"artistBrandIdOrSlug\": \"{{ArtistBrandId}}\", \n    \"description\": \"Current email of the user\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/marketingEmail",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "marketingEmail"
              ]
            },
            "description": "`Private`\n\nThis adds new phone number to the logged-in user.\n\nYou may refer to this link for the accepted `countryCode` values: https://en.wikipedia.org/wiki/List_of_mobile_telephone_prefixes_by_country\n\nIn the column \"International Calling Code\""
          },
          "response": []
        },
        {
          "name": "Upload a custom avatar profile",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "sec-ch-ua",
                "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkYUN5N2x3VXlKY3o2T2NjMXhsRElBT21qdFBmem4yekpMQXNNRThXRzhlYTNFQ0FMb1RYaXEiLCJpYXQiOjE2ODEyNDY5NzMsImV4cCI6MTY4MTg1MTc3M30.CkVLn-dTL5s7A27tkzWAKmJz7M3f84-f6AALpQX5KDc"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "Referer",
                "value": "https://admin.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar_image",
                  "description": "New Image of the Custom",
                  "type": "file",
                  "src": "/Users/rvo/Downloads/JPEG and PNG /12719.jpg"
                },
                {
                  "key": "oldImage",
                  "value": "",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/users/avatar-image/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "avatar-image",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "33b43181-bdb8-49be-9f19-7ca9760e2ec8",
                  "description": "ID of the user "
                }
              ]
            },
            "description": "`Private`\n\nAllows the admin to upload a custom profile avatar image to a user account."
          },
          "response": []
        },
        {
          "name": "Grant Roles",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkYUN5N2x3VXlKY3o2T2NjMXhsRElBT21qdFBmem4yekpMQXNNRThXRzhlYTNFQ0FMb1RYaXEiLCJpYXQiOjE2ODEyNDY5NzMsImV4cCI6MTY4MTg1MTc3M30.CkVLn-dTL5s7A27tkzWAKmJz7M3f84-f6AALpQX5KDc"
              },
              {
                "key": "content-type",
                "value": "application/json"
              },
              {
                "key": "origin",
                "value": "https://www.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://www.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{FanUserEmail}}\",\n    \"roles\": [\n        \"creator\" //Roles are \"creator\", \"administrator\", \"media\", \"operations\", \"financials\", \"world_builder\", \"data_analyst\"\n    ],\n    \"artistBrandId\": \"0d7c7bcb-8b81-4a25-bced-f2cae6bc870f\"\n}"
            },
            "url": {
              "raw": "{{host}}/users/grant-roles",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "grant-roles"
              ]
            },
            "description": "`Private`\n\nAllows the admin to grant roles on users based on their email."
          },
          "response": []
        },
        {
          "name": "Generate Verification Code",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\":\"\",\n    \"phone\":\"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/verificationCode",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "verificationCode"
              ]
            },
            "description": "`Public`\n\nGenerates and sends verification code on the given email or phone number."
          },
          "response": []
        },
        {
          "name": "Update user information",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TempUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"Updated+Test {{RandomNumber}}\", \n    \"lastName\": \"Updated+Fan PM {{RandomNumber}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{TempUserId}}",
                  "description": "ID of user you want to get update information"
                }
              ]
            },
            "description": "`Private`\n\nThis allows users to update their own user information.\n\n`Superuser` can update any user information if authenticated and supplies other user's userId in param."
          },
          "response": []
        },
        {
          "name": "Delete shipping address",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const options = {",
                  "    url: `${pm.variables.get('host')}/users/shipping_address`,",
                  "    method: 'POST',",
                  "    header: { ",
                  "        'Authorization': `Bearer ${pm.variables.get('token')}`,",
                  "        'content-type': 'application/json' },",
                  "    body: {",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify({",
                  "            \"location\": {",
                  "                \"address\": {",
                  "                    \"city\": \"Sharonville\",",
                  "                    \"country_code\": \"OH\",",
                  "                    \"fullName\": `FullName+${pm.variables.get('RandomNumber')}`,",
                  "                    \"address1\": \"788  Rogers Street\",",
                  "                    \"line2\": \"line 2\",",
                  "                    \"province_code\": \"Ohio\",",
                  "                    \"raw\": \"788  Rogers Street Sharonville Ohio 45241\",",
                  "                    \"zip\": \"45241\",",
                  "                    \"manual\": true,",
                  "                    \"phone\": \"567-277-1685\"",
                  "                }",
                  "            },",
                  "            \"noLogin\": false",
                  "        })",
                  "    }",
                  "};",
                  "",
                  "pm.sendRequest(options, function (error, result) {",
                  "    let data = result.json();",
                  "    pm.variables.set('ShippingAddressId', data.id);",
                  "",
                  "    if (error) {",
                  "        console.log(error);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/users/shipping_address/:shippingAddressId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "shipping_address",
                ":shippingAddressId"
              ],
              "variable": [
                {
                  "key": "shippingAddressId",
                  "value": "{{ShippingAddressId}}",
                  "description": "ID of shipping address you wanted to delete"
                }
              ]
            },
            "description": "`Private`\n\nThis deletes the shipping address associated with the ID on the param `shippingAddressId`"
          },
          "response": []
        },
        {
          "name": "Delete Roles",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkYUN5N2x3VXlKY3o2T2NjMXhsRElBT21qdFBmem4yekpMQXNNRThXRzhlYTNFQ0FMb1RYaXEiLCJpYXQiOjE2ODEyNDY5NzMsImV4cCI6MTY4MTg1MTc3M30.CkVLn-dTL5s7A27tkzWAKmJz7M3f84-f6AALpQX5KDc"
              },
              {
                "key": "origin",
                "value": "https://www.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://www.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
              }
            ],
            "url": {
              "raw": "{{host}}/users/:userId/user-roles",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                ":userId",
                "user-roles"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "",
                  "description": "User ID of the role you want to delete."
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Account",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{host}}/users/account",
              "host": [
                "{{host}}"
              ],
              "path": [
                "users",
                "account"
              ]
            },
            "description": "`Public`\n\nDeletes the user's account."
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let generateRandomNumber = Math.random().toString().split('.').join(\"\");",
              "let generateRandomString = \"Artist User PM\"+ Math.random().toString(36).substring(1,9);",
              "",
              "pm.variables.set(\"RandomNumber\", generateRandomNumber);",
              "pm.variables.set(\"DisplayName\", generateRandomString);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Access Codes",
      "item": [
        {
          "name": "For Artist",
          "item": [
            {
              "name": "/access_codes/aggregate?artistBrandId={{ArtistBrandId}}",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/access_codes/aggregate?artistBrandId={{ArtistBrandId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "aggregate"
                  ],
                  "query": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand you want to get access codes"
                    }
                  ]
                },
                "description": "`Private`\n\nGets artist brand's access codes"
              },
              "response": []
            },
            {
              "name": "Download artist access code",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/access_codes/:accessCodeGroupId/csv?artistBrandId={{ArtistBrandId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    ":accessCodeGroupId",
                    "csv"
                  ],
                  "query": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand that created the access code"
                    }
                  ],
                  "variable": [
                    {
                      "key": "accessCodeGroupId",
                      "value": "",
                      "description": "ID of the access code group you wanted to download the codes from"
                    }
                  ]
                },
                "description": "`Private`\n\nDownloads access codes of a access code group in `csv` format from the Settings > Access code > Download Codes."
              },
              "response": []
            },
            {
              "name": "Get artist access code discount",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/access_codes/check_access/:accessCode",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "check_access",
                    ":accessCode"
                  ],
                  "variable": [
                    {
                      "key": "accessCode",
                      "value": "TTT999",
                      "description": "The access code artist brand you wanted to check"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create artist access code",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let generateAccessCode = Math.floor(0000000 + Math.random() * 999999999);",
                      "",
                      "pm.variables.set(\"AccessCode\", \"T\"+generateAccessCode);",
                      "pm.collectionVariables.set(\"AccessCode\", \"T\"+generateAccessCode);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"accessCodeGroupId\": null,\n    \"artistBrandId\": \"{{ArtistBrandId}}\",\n\t\"customId\": \"{{AccessCode}}\",\n\t\"discountValue\": 25,\n\t\"markIfUsed\": false,\n\t\"excludeMerch\": false,\n\t\"quantity\": 1,\n\t\"isPatreon\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes"
                  ]
                },
                "description": "`Private`\n\nCreates an access code for tour, or artist brand."
              },
              "response": []
            },
            {
              "name": "Set artist access code drop date",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"dropDate\": \"2021-12-31 20:00 UTC\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/drop_date?artistBrandId={{ArtistBrandId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "drop_date"
                  ],
                  "query": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand that created the access code"
                    }
                  ]
                },
                "description": "`Private` `Superuser`\n\nSets drop date of access code."
              },
              "response": []
            },
            {
              "name": "Edit artist code to mark as used",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accessCodeGroupId\": \"{{artistAccessCodeGroupId}}\",\n    \"markIfUsed\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/mark_if_used?artistBrandId={{ArtistBrandId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "mark_if_used"
                  ],
                  "query": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand that created the access code"
                    }
                  ]
                },
                "description": "`Private`\n\nMarks access code as used."
              },
              "response": []
            },
            {
              "name": "Edit artist code to exclude merch",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accessCodeGroupId\": \"{{artistAccessCodeGroupId}}\",\n    \"excludeMerch\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/exclude_merch?artistBrandId={{ArtistBrandId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "exclude_merch"
                  ],
                  "query": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand that created the access code"
                    }
                  ]
                },
                "description": "`Private`\n\nEdits access code to exclude merch in discount values."
              },
              "response": []
            },
            {
              "name": "Edit artist code discount value",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accessCodeGroupId\": \"{{artistAccessCodeGroupId}}\",\n    \"discountValue\": 25\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/discount?artistBrandId={{ArtistBrandId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "discount"
                  ],
                  "query": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand that created the access code"
                    }
                  ]
                },
                "description": "`Private`\n\nEdits access code group's discount value. Value is set in request body > `discountValue`"
              },
              "response": []
            },
            {
              "name": "Edit artist code multiple fields",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accessCodeGroupId\": \"{{artistAccessCodeGroupId}}\",\n    \"markIfUsed\": true,\n    \"excludeMerch\": true,\n    \"discountValue\": 25\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/discount?artistBrandId={{ArtistBrandId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "discount"
                  ],
                  "query": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand that created the access code"
                    }
                  ]
                },
                "description": "`Private`\n\nEdits access code information. Editable values: \n`markIfUsed` to mark as used [boolean], \n\n`excludeMerch` to exclude merch from discount [boolean], \n\n`discountValue` value deducted from purchases [number]"
              },
              "response": []
            },
            {
              "name": "Delete artist code",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let generateAccessCode = \"T\"+Math.floor(0000000 + Math.random() * 999999999);",
                      "",
                      "let varAccessCodeGroupId;",
                      "",
                      "const options = {",
                      "    url: `${pm.variables.get('host')}/access_codes/`,",
                      "    method: 'POST',",
                      "    header: { ",
                      "        'Authorization': `Bearer ${pm.variables.get('token')}`,",
                      "        'content-type': 'application/json' },",
                      "    body: {",
                      "        mode: 'raw',",
                      "        raw: JSON.stringify({",
                      "            \"accessCodeGroupId\": null,",
                      "            \"artistBrandId\": `${pm.variables.get('ArtistBrandId')}`,",
                      "            \"customId\": `${generateAccessCode}`,",
                      "            \"discountValue\": \"10\",",
                      "            \"markIfUsed\": false,",
                      "            \"excludeMerch\": false,",
                      "            \"quantity\": 1,",
                      "            \"isPatreon\": false",
                      "        })",
                      "    }",
                      "};",
                      "",
                      "pm.sendRequest(options, function (error, result) {",
                      "    let data = result.json();",
                      "    console.log(data[0].accessCodeGroupId)  ",
                      "",
                      "    pm.variables.set(\"varAccessCodeGroupId\", data[0].accessCodeGroupId)",
                      "",
                      "    if (error) {",
                      "        console.log(error);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/:accessCodeGroupId?artistBrandId={{ArtistBrandId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    ":accessCodeGroupId"
                  ],
                  "query": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand that created the access code"
                    }
                  ],
                  "variable": [
                    {
                      "key": "accessCodeGroupId",
                      "value": "{{varAccessCodeGroupId}}",
                      "description": "ID of the access code group you wanted to delete"
                    }
                  ]
                },
                "description": "Deletes an event access code."
              },
              "response": []
            }
          ]
        },
        {
          "name": "For Event",
          "item": [
            {
              "name": "Get all event access codes",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/access_codes/aggregate?eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "aggregate"
                  ],
                  "query": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of event you wanted to get all access code"
                    }
                  ]
                },
                "description": "`Private`\n\nGets all event's access codes"
              },
              "response": []
            },
            {
              "name": "Download event access code",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/access_codes/:accessCodeGroupId/csv?eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    ":accessCodeGroupId",
                    "csv"
                  ],
                  "query": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of artist brand that created the access code"
                    }
                  ],
                  "variable": [
                    {
                      "key": "accessCodeGroupId",
                      "value": "{{eventAccessCodeGroupId}}",
                      "description": "ID of the access code group you wanted to download the codes from"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get event access code information",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/access_codes/check_access/:accessCode?eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "check_access",
                    ":accessCode"
                  ],
                  "query": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of event you wanted to get discount value"
                    }
                  ],
                  "variable": [
                    {
                      "key": "accessCode",
                      "value": "{{AccessCode}}",
                      "description": "Access code you wanted to get discount value"
                    }
                  ]
                },
                "description": "`Private`\n\nGets event's access code discount value."
              },
              "response": []
            },
            {
              "name": "Check if event has valid codes",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/access_codes/count?artistBrandId={{ArtistBrandId}}&eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "count"
                  ],
                  "query": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand that created the access code"
                    },
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of event you wanted to check if any access code exists"
                    }
                  ]
                },
                "description": "`Private`\n\nChecks if event have access codes added."
              },
              "response": []
            },
            {
              "name": "Create event access code",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let generateAccessCode = Math.floor(0000000 + Math.random() * 999999999);",
                      "",
                      "pm.variables.set(\"AccessCode\", \"T\"+generateAccessCode);",
                      "pm.collectionVariables.set(\"AccessCode\", \"T\"+generateAccessCode);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"accessCodeGroupId\": null,\n    \"eventId\": \"{{EventId}}\",\n\t\"customId\": \"{{AccessCode}}\",\n\t\"discountValue\": 25,\n\t\"markIfUsed\": false,\n\t\"excludeMerch\": false,\n\t\"quantity\": 1,\n\t\"isPatreon\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes"
                  ]
                },
                "description": "`Private`\n\nCreates an access code for event."
              },
              "response": []
            },
            {
              "name": "Set event access code drop date",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"dropDate\": \"2021-12-31 20:00 UTC\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/drop_date?eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "drop_date"
                  ],
                  "query": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of event you wanted to set drop date"
                    }
                  ]
                },
                "description": "`Private` `Superuser`\n\nAdds drop date of event access codes."
              },
              "response": []
            },
            {
              "name": "Mark code if used",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accessCodeGroupId\": \"{{eventAccessCodeGroupId}}\",\n    \"markIfUsed\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/mark_if_used?eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "mark_if_used"
                  ],
                  "query": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of event you wanted to edit access code"
                    }
                  ]
                },
                "description": "`Private` \n\nMark access code as used."
              },
              "response": []
            },
            {
              "name": "Edit event code to exclude merch",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accessCodeGroupId\": \"{{eventAccessCodeGroupId}}\",\n    \"excludeMerch\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/exclude_merch?eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "exclude_merch"
                  ],
                  "query": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of event you wanted to edit access code"
                    }
                  ]
                },
                "description": "`Private`\n\nEdits access code to exclude merch in discount values."
              },
              "response": []
            },
            {
              "name": "Edit event code discount value",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accessCodeGroupId\": \"{{eventAccessCodeGroupId}}\",\n    \"discountValue\": 25\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/discount?eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    "discount"
                  ],
                  "query": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of event you wanted to edit access code"
                    }
                  ]
                },
                "description": "`Private`\n\nEdits access code's discount values."
              },
              "response": []
            },
            {
              "name": "Edit event code multiple fields",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accessCodeGroupId\": \"{{eventAccessCodeGroupId}}\",\n    \"markIfUsed\": false,\n    \"excludeMerch\": false,\n    \"discountValue\": 25\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes?eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes"
                  ],
                  "query": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of event you wanted to edit access code"
                    }
                  ]
                },
                "description": "`Private`\n\nEdits event's access code information. Editable values: \n`markIfUsed` to mark as used [boolean], \n\n`excludeMerch` to exclude merch from discount [boolean], \n\n`discountValue` value deducted from purchases [number]"
              },
              "response": []
            },
            {
              "name": "Delete event code",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let generateAccessCode = \"T\"+Math.floor(0000000 + Math.random() * 999999999);",
                      "",
                      "let varAccessCodeGroupId;",
                      "",
                      "const options = {",
                      "    url: `${pm.variables.get('host')}/access_codes/`,",
                      "    method: 'POST',",
                      "    header: { ",
                      "        'Authorization': `Bearer ${pm.variables.get('token')}`,",
                      "        'content-type': 'application/json' },",
                      "    body: {",
                      "        mode: 'raw',",
                      "        raw: JSON.stringify({",
                      "            \"accessCodeGroupId\": null,",
                      "            \"eventId\": `${pm.variables.get('EventId')}`,",
                      "            \"customId\": `${generateAccessCode}`,",
                      "            \"discountValue\": \"10\",",
                      "            \"markIfUsed\": false,",
                      "            \"excludeMerch\": false,",
                      "            \"quantity\": 1,",
                      "            \"isPatreon\": false",
                      "        })",
                      "    }",
                      "};",
                      "",
                      "pm.sendRequest(options, function (error, result) {",
                      "    let data = result.json();",
                      "    console.log(data[0].accessCodeGroupId)  ",
                      "",
                      "    pm.variables.set(\"varAccessCodeGroupId\", data[0].accessCodeGroupId)",
                      "",
                      "    if (error) {",
                      "        console.log(error);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/access_codes/:accessCodeGroupId?eventId={{EventId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "access_codes",
                    ":accessCodeGroupId"
                  ],
                  "query": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "accessCodeGroupId",
                      "value": "{{varAccessCodeGroupId}}"
                    }
                  ]
                },
                "description": "`Private`\n\nDeletes an event access code."
              },
              "response": []
            }
          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Artist Brands",
      "item": [
        {
          "name": "Patreon",
          "item": [
            {
              "name": "Get url for Patreon account linking",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/artist_brands/:artistBrandId/patreon-oauth",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    ":artistBrandId",
                    "patreon-oauth"
                  ],
                  "variable": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand you wanted to link Patreon account to"
                    }
                  ]
                },
                "description": "`Private`\n\nGets redirect url for oath account linking to Patreon."
              },
              "response": []
            },
            {
              "name": "Get redirect url after account linking",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/artist_brands/patreon-connect",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    "patreon-connect"
                  ]
                },
                "description": "`Private`\n\nThis this the url where the user returns from Patreon's OAuth page. This will be responsible for capturing the authorization and saving the Patreon account info."
              },
              "response": []
            },
            {
              "name": "Get linked Patreon information",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/patreon",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    ":artistBrandIdOrSlug",
                    "patreon"
                  ],
                  "variable": [
                    {
                      "key": "artistBrandIdOrSlug",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand you wanted to get linked Patreon account information"
                    }
                  ]
                },
                "description": "`Private`\n\nGets Patreon account linked to artist brand's account."
              },
              "response": []
            },
            {
              "name": "Get Patreon campaign and tiers",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/patreon/campaign",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    ":artistBrandIdOrSlug",
                    "patreon",
                    "campaign"
                  ],
                  "variable": [
                    {
                      "key": "artistBrandIdOrSlug",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand you wanted to get linked Patreon account campaigns"
                    }
                  ]
                },
                "description": "`Private`\n\nThis returns the Patreon page information including campaign name & tiers."
              },
              "response": []
            },
            {
              "name": "Handle Patreon pledge updates",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{host}}/artist_brands/:artistBrandId/patreon/webhook",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    ":artistBrandId",
                    "patreon",
                    "webhook"
                  ],
                  "variable": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}"
                    }
                  ]
                },
                "description": "`Private`\n\nThis endpoint is the webhook handler which handles pledge updates"
              },
              "response": []
            },
            {
              "name": "Update campaign tiers",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"tiers\":\n        [\n            {\n                \"id\":\"7215424\",\n                \"hasBenefit\":false\n            }\n        ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/artist_brands/:artistBrandId/patreon/campaign",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    ":artistBrandId",
                    "patreon",
                    "campaign"
                  ],
                  "variable": [
                    {
                      "key": "artistBrandId",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand you wanted to update campaign tiers"
                    }
                  ]
                },
                "description": "`Private`\n\nThis updates campaign tiers on whether a tier can be avail discounts or not.\n\n`id` is the id of the tier\n`hasBenefit` is boolean and applies discount to tier if it's set to `true`."
              },
              "response": []
            },
            {
              "name": "Delete cached Patreon information",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/patreon/cache",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    ":artistBrandIdOrSlug",
                    "patreon",
                    "cache"
                  ],
                  "variable": [
                    {
                      "key": "artistBrandIdOrSlug",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand you wanted to delete cached Patreon information"
                    }
                  ]
                },
                "description": "Clarify if where is this being used"
              },
              "response": []
            }
          ],
          "description": "For Patreon Integration. Requires a Patreon Creator account.\n\nAccount being used for testing:\ntest.mh.staging+patreon@gmail.com\nLKwHkjx2Y8IssvvD!"
        },
        {
          "name": "Events",
          "item": [
            {
              "name": "Get artist public events",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/public/events",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    ":artistBrandIdOrSlug",
                    "public",
                    "events"
                  ],
                  "variable": [
                    {
                      "key": "artistBrandIdOrSlug",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand you wanted to get public events"
                    }
                  ]
                },
                "description": "`Public`\n\nGets artist's list of public events."
              },
              "response": []
            },
            {
              "name": "Get artist private events",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{FanUserToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/private/events",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    ":artistBrandIdOrSlug",
                    "private",
                    "events"
                  ],
                  "variable": [
                    {
                      "key": "artistBrandIdOrSlug",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand you wanted to get private events"
                    }
                  ]
                },
                "description": "`Private`\n\nGets artist brand's private events."
              },
              "response": []
            },
            {
              "name": "Refresh artist private events",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/private/events?refresh=true",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "artist_brands",
                    ":artistBrandIdOrSlug",
                    "private",
                    "events"
                  ],
                  "query": [
                    {
                      "key": "refresh",
                      "value": "true"
                    }
                  ],
                  "variable": [
                    {
                      "key": "artistBrandIdOrSlug",
                      "value": "{{ArtistBrandId}}",
                      "description": "ID of artist brand you wanted to get private events"
                    }
                  ]
                },
                "description": "`Private`\n\nRefreshes the list of artist's private events."
              },
              "response": []
            }
          ],
          "description": "Grouped requests of Artist Brands > Events"
        },
        {
          "name": "Get artist information",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/artist_brands/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand that you wanted to get information"
                }
              ]
            },
            "description": "`Public` \n\nGet an Artist Brand information using an `artistBrandId` or `slug`."
          },
          "response": []
        },
        {
          "name": "Get artist ticket buyers",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/buyers/:artistBrandIdOrSlug/csv",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                "buyers",
                ":artistBrandIdOrSlug",
                "csv"
              ],
              "variable": [
                {
                  "key": "artistBrandIdOrSlug",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to get list of artist ticket buyers"
                }
              ]
            },
            "description": "`Private`\n\nGets list of emails of ticket buyers of artist brand's events."
          },
          "response": []
        },
        {
          "name": "Get event ticket buyers",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_brands/buyers/:artistBrandId/:eventId/csv",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                "buyers",
                ":artistBrandId",
                ":eventId",
                "csv"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to get list of event ticket buyers"
                },
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you wanted to get list of ticket buyers"
                }
              ]
            },
            "description": "`Private` \n\nGets list of event buyers."
          },
          "response": []
        },
        {
          "name": "Get artist page visit count",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/get-page-visit/:page/artist_brand/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                "get-page-visit",
                ":page",
                "artist_brand",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "page",
                  "value": "testmhstagingmain",
                  "description": "Page/artist brand slug you wanted get if how many times the `artistBrandId` visited"
                },
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand which you wanted to get visit count to the `page` parameter"
                }
              ]
            },
            "description": "`Public` \n\nGets the visited page count by artist brand."
          },
          "response": []
        },
        {
          "name": "Get artist merch list",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/:artistBrandIdOrSlug/merch",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                ":artistBrandIdOrSlug",
                "merch"
              ],
              "variable": [
                {
                  "key": "artistBrandIdOrSlug",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to get merch list"
                }
              ]
            },
            "description": "`Public`\n\nGets list of artist brand's merch."
          },
          "response": []
        },
        {
          "name": "Get Stripe account information",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/artist_brands/:artistBrandId/stripe_account",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                ":artistBrandId",
                "stripe_account"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to get Stripe information"
                }
              ]
            },
            "description": "`Private`\n\nGets all Stripe information connected to MH account."
          },
          "response": []
        },
        {
          "name": "Get refreshed Stripe status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/artist_brands/:artistBrandId/refresh_stripe",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                ":artistBrandId",
                "refresh_stripe"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to refresh Stripe status"
                }
              ]
            },
            "description": "`Private`\n\nRefreshes Stripe status and gets updated artist brand information."
          },
          "response": []
        },
        {
          "name": "Remove Stripe account",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/artist_Brands/:artistBrandId/dangerous_remove_stripe",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                ":artistBrandId",
                "dangerous_remove_stripe"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "",
                  "description": "ID of artist brand you wanted to remove Stripe account"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nRemoves Stripe account from the artist brand account."
          },
          "response": []
        },
        {
          "name": "Search artist in Artist Switcher",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/getArtists/search?query=testmh",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                "getArtists",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "testmh",
                  "description": "String you wanted to search to get show results based on artist brand's slug"
                }
              ]
            },
            "description": "`Private`\n\nSearches for a matching Artist Brand based on the query.\nResults will show based on matching `slug` or `displayName`.\n\nIf `Superuser`, user can access all artist brands."
          },
          "response": []
        },
        {
          "name": "Get current demo session information",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/demo_session/time_left",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                ":artistBrandIdOrSlug",
                "demo_session",
                "time_left"
              ],
              "variable": [
                {
                  "key": "artistBrandIdOrSlug",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to get current demo session"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get information of the current demo session."
          },
          "response": []
        },
        {
          "name": "Get artist Shopify merch",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/:artistBrandIdOrSlug/merchRaw",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                ":artistBrandIdOrSlug",
                "merchRaw"
              ],
              "variable": [
                {
                  "key": "artistBrandIdOrSlug",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to get Shopify merch"
                }
              ]
            },
            "description": "`Public`\n\nGet list of artist's Shopify merch."
          },
          "response": []
        },
        {
          "name": "Get artist events",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/:artistBrandId/public/events",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                ":artistBrandId",
                "public",
                "events"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand which you wanted to get visit count to the `page` parameter"
                }
              ]
            },
            "description": "`Private`\n\nReturns all events of an artist brand"
          },
          "response": []
        },
        {
          "name": "Get artist checkout info",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/:artistBrandId/checkout/info",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                ":artistBrandId",
                "checkout",
                "info"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand which you wanted to get visit count to the `page` parameter"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get all the info needed for intial page load for checkout."
          },
          "response": []
        },
        {
          "name": "Get user roles for this artist brand",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/:artistBrandId/user-permissions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                ":artistBrandId",
                "user-permissions"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand which you wanted to get visit count to the `page` parameter"
                }
              ]
            },
            "description": "`Private`\n\nGet all users that has roles for this artist brand"
          },
          "response": []
        },
        {
          "name": "Update MusicBrainz",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/artist_brands/:artistBrandId/musicBrainzUpdate?musicBrainzId=null",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                ":artistBrandId",
                "musicBrainzUpdate"
              ],
              "query": [
                {
                  "key": "musicBrainzId",
                  "value": "null",
                  "description": "ID of MusicBrainz you wanted to update to the supplied `artistBrandId` parameter"
                }
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to update"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Set artist page visit count",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{AritstBrandId}}\", \n    \"page\": \"testmhstagingapitests\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/set-page-visit",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                "set-page-visit"
              ]
            },
            "description": "`Public`\n\nSets the visited page count by artist brand.\n\n\nrequest body \"id\" is actually artistBrandId."
          },
          "response": []
        },
        {
          "name": "Update artist profile photo",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "profile_photo",
                  "description": "The image you wanted to assign as artist photo. Replace the image in `VALUE` column",
                  "type": "file",
                  "src": "Photo 10-14-20, 17 11 20.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/artist_brands/image/:artistBrandIdOrSlug",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                "image",
                ":artistBrandIdOrSlug"
              ],
              "variable": [
                {
                  "key": "artistBrandIdOrSlug",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to update artist brand profile"
                }
              ]
            },
            "description": "`Private` \n\nUpdates artist brand profile photo."
          },
          "response": []
        },
        {
          "name": "Update artist brand background photo",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "page_background_image",
                  "description": "The image you wanted to assign as artist background photo. Replace the image in `VALUE` column",
                  "type": "file",
                  "src": "blurred-abstract-background-interior-view-looking-out-toward-empty-office-lobby-entrance-doors-glass-curtain-wall-with-frame_1339-6364.jpeg"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/page-background-image",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                ":artistBrandIdOrSlug",
                "page-background-image"
              ],
              "variable": [
                {
                  "key": "artistBrandIdOrSlug",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to update artist brand background photo"
                }
              ]
            },
            "description": "`Private` \n\nThis allows user to update artist band's background photo which is visible on artist page. Photo is supplied in request body."
          },
          "response": []
        },
        {
          "name": "Switch artist in Artist Switcher",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"artistBrandId\": \"{{ArtistBrandId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/switchArtistBrand",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                "switchArtistBrand"
              ]
            },
            "description": "`Private` `Superuser`\n\nSwitches to the corresponding artist brand id in request body `artistBrandId`. Will return a token for that artist.\n\nNote: You may use endpoint -- `Search artist in Artist Switcher` or `/artist_Brands/getArtists/search?query=` to search artist brands and get `artistBrandId`."
          },
          "response": []
        },
        {
          "name": "Create demo session",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/demo_session",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                ":artistBrandIdOrSlug",
                "demo_session"
              ],
              "variable": [
                {
                  "key": "artistBrandIdOrSlug",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to create a demo session"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to create a demo_session and start a stream.\n\nYou may refer here for accepted region code values:\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html"
          },
          "response": []
        },
        {
          "name": "Reset Shopify",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{host}}/artist_brands/:artistBrandIdOrSlug/shopify-reset",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                ":artistBrandIdOrSlug",
                "shopify-reset"
              ],
              "variable": [
                {
                  "key": "artistBrandIdOrSlug",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of the artist brand you wanted to reset Shopify state"
                }
              ]
            },
            "description": "Resets artist brand's Shopify state"
          },
          "response": []
        },
        {
          "name": "Update artist information",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TempUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"displayName\": \"{{DisplayName}}\",\n    \"bio\": \"{{Bio}}\",\n    \"slug\": \"{{Slug}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_brands/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_brands",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{TempArtistBrandId}}",
                  "description": "ID of artist brand you wanted to update artist brand  information"
                }
              ]
            },
            "description": "`Private` \n\nUpdates artist brand profile information."
          },
          "response": []
        },
        {
          "name": "Clear sales breakdown",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"artistBrandId\": \"{{ArtistBrandId}}\", \n    \"eventId\": \"{{EventId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/artist_Brands/clear/sales_breakdown",
              "host": [
                "{{host}}"
              ],
              "path": [
                "artist_Brands",
                "clear",
                "sales_breakdown"
              ]
            },
            "description": "`Public`\n\nClears sales breakdown data. This is used before re-loading the sales breakdown."
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let generateRandomString = Math.random().toString(36).substring(1,9);",
              "",
              "pm.variables.set(\"DisplayName\", \"dp-\"+generateRandomString);",
              "pm.variables.set(\"Bio\", \"bio-\"+generateRandomString);",
              "pm.variables.set(\"Slug\", \"tempuserslug-\"+generateRandomString);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Challenges",
      "item": [
        {
          "name": "Get Worlds Challenges",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/challenges/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                ""
              ]
            },
            "description": "Get all Worlds Challenges"
          },
          "response": []
        },
        {
          "name": "Get All Items",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\":\"{{UserId}}\",\n    \"challengeIds\":\"{{ChallengeIds}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/completedItems",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "completedItems"
              ]
            },
            "description": "Returns all the items the user got from the challenge"
          },
          "response": []
        },
        {
          "name": "Get Rewards",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/challenges/rewards",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "rewards"
              ]
            },
            "description": "Returns all rewards"
          },
          "response": []
        },
        {
          "name": "Get Challenges from a World",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/challenges/world/:worldId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "world",
                ":worldId"
              ],
              "variable": [
                {
                  "key": "worldId",
                  "value": "{{WorldId}}",
                  "description": "ID of the World to get the Challenges from"
                }
              ]
            },
            "description": "Get all challenges associate to WorldId"
          },
          "response": []
        },
        {
          "name": "Get All Reward from an artistBrand",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/challenges/rewards/artistBrand/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "rewards",
                "artistBrand",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of the Artist you want to get the challenges assigned"
                }
              ]
            },
            "description": "Get all Rewards associated to the ArtistBrand"
          },
          "response": []
        },
        {
          "name": "Complete Challenge",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJkZWZjODdjNy00ODVmLTRlOTAtYWY3YS00MWI2OTk1ZDg1ZGIiLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCRuVHI0bUVTMFdHeHZNNHhtTzZDOFhPcVRMZWpFQ044SUcwd1hab1g0MDhKVDh4RWdyMmlJMiIsImlhdCI6MTY3ODg0MDM2NiwiZXhwIjoxNjc5NDQ1MTY2fQ.wX_GdaV95SLcuvxLRvCni0dc-DeiLesGmO3XHjmeKUg"
              },
              {
                "key": "origin",
                "value": "https://david.worstage.co"
              },
              {
                "key": "referer",
                "value": "https://david.worstage.co/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "cross-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
              }
            ],
            "url": {
              "raw": "{{host}}/challenges/:challengeId/complete/:challengeOrder",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                ":challengeId",
                "complete",
                ":challengeOrder"
              ],
              "variable": [
                {
                  "key": "challengeId",
                  "value": "{{SampleChallenge}}",
                  "description": "ID of the Challenge"
                },
                {
                  "key": "challengeOrder",
                  "value": "0"
                }
              ]
            },
            "description": "Lets the user complete the Challenge."
          },
          "response": []
        },
        {
          "name": "Create New Challenge",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\":\"Postman Sample Challenge Test {{$timestamp}}\",\n    \"worldId\":\"{{WorldId}}\",\n    \"info\":{\n        \"info\":72\n    },\n    \"isActive\":\"false\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                ""
              ]
            },
            "description": "Creates New Challenges for a World"
          },
          "response": []
        },
        {
          "name": "Add Rewards",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\":\"Postman Sample Reward {{$randomDateRecent}}\",\n    \"artistBrandId\":\"{{ArtistBrandId}}\",\n    \"misc\":\"{\\\"url\\\":\\\"https://www.google.com/\\\",\\\"linkout\\\":\\\"\\\"}\",\n    \"rewardType\":\"digital_wearable\",\n    \"description\":\"Sample Description from Postman\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/rewards",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "rewards"
              ]
            },
            "description": "Creates a Reward"
          },
          "response": []
        },
        {
          "name": "Clears Completed Challenge",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"challengeId\":\"{{ChallengeIds}}\",\n    \"userId\":\"{{UserId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/refresh/completedItems",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "refresh",
                "completedItems"
              ]
            },
            "description": "Clears completed steps for each user and refreshes challenge cache"
          },
          "response": []
        },
        {
          "name": "Refresh Challenge",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"challengeId\":\"{{ChallengeIds}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/refresh/challenge",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "refresh",
                "challenge"
              ]
            },
            "description": "Refreshes Challenge Cache"
          },
          "response": []
        },
        {
          "name": "Refresh Rewards",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"rewardId\":\"d7cf5ab9-0e66-4d9b-8128-28832be76676\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/refresh/rewards",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "refresh",
                "rewards"
              ]
            },
            "description": "Rewards that were rewarded to the users in this challenge is removed."
          },
          "response": []
        },
        {
          "name": "Edit Challenge",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\":\"RVO Sample Challenge 2\",\n    \"worldId\":\"{{WorldId}}\",\n    \"info\":{\n        \"info\":72\n    },\n    \"isActive\":\"false\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/:challengeId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                ":challengeId"
              ],
              "variable": [
                {
                  "key": "challengeId",
                  "value": "{{ChallengeIds}}",
                  "description": "ID of the challenge you want to Edit"
                }
              ]
            },
            "description": "Edit the Challenge"
          },
          "response": []
        },
        {
          "name": "Edit Reward",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\":\"Postman Sample Reward {{$timestamp}}\",\n    \"artistBrandId\":\"c4eea1e4-17b8-420f-9457-65a5b0456dbd\",\n    \"misc\":\"{\\\"url\\\":\\\"https://www.google.com/\\\",\\\"linkout\\\":\\\"\\\"}\",\n    \"rewardType\":\"digital_wearable\",\n    \"description\":\"Sample Description from Postman\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/rewards/:rewardId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "rewards",
                ":rewardId"
              ],
              "variable": [
                {
                  "key": "rewardId",
                  "value": "{{RewardId}}",
                  "description": "ID of the Reward you want to edit"
                }
              ]
            },
            "description": "Edits a Reward"
          },
          "response": []
        },
        {
          "name": "Delete Challenge",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\":\"RVO Sample Challenge 2\",\n    \"worldId\":\"{{WorldId}}\",\n    \"info\":{\n        \"info\":72\n    },\n    \"isActive\":\"false\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/:challengeId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                ":challengeId"
              ],
              "variable": [
                {
                  "key": "challengeId",
                  "value": "",
                  "description": "ID of the Challenge you want to Delete"
                }
              ]
            },
            "description": "Delete a Challenge"
          },
          "response": []
        },
        {
          "name": "Delete Reward",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{host}}/challenges/rewards/:rewardId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                "rewards",
                ":rewardId"
              ],
              "variable": [
                {
                  "key": "rewardId",
                  "value": "",
                  "description": "ID of the Reward you want to Delete"
                }
              ]
            },
            "description": "Deletes a Reward"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Currencies",
      "item": [
        {
          "name": "Get currency rates",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "url": {
              "raw": "{{host}}/currencies/rates",
              "host": [
                "{{host}}"
              ],
              "path": [
                "currencies",
                "rates"
              ]
            },
            "description": "`Public`\n\nGets list of currencies."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Devices",
      "item": [
        {
          "name": "Get stream cookies",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "Authorization",
                "value": "Bearer null"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "cross-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "http://localhost:3000/events/lets-go/ticket/1e48894f-111a-46ca-b368-7b83731fb15a"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "url": {
              "raw": "{{host}}/devices/streams/:streamId/cookies",
              "host": [
                "{{host}}"
              ],
              "path": [
                "devices",
                "streams",
                ":streamId",
                "cookies"
              ],
              "variable": [
                {
                  "key": "streamId",
                  "value": "",
                  "description": "ID of the stream you wanted to get cookies from"
                }
              ]
            },
            "description": "`Public` \n\nThis is used to get stream cookies associated with an event for users who are in WatchPlayer."
          },
          "response": []
        },
        {
          "name": "Verify ticket for event",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/devices/events/:eventId/tickets/:ticketId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "devices",
                "events",
                ":eventId",
                "tickets",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to check the ticket to"
                },
                {
                  "key": "ticketId",
                  "value": "{{TicketId}}",
                  "description": "ID of the ticket you wanted to verify access to the event"
                }
              ]
            },
            "description": "`Public`\n\nVerifies the supplied `ticketId` if it can be used on the event associated with the supplied `eventId`."
          },
          "response": []
        },
        {
          "name": "Create device",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Content-Type",
                "value": "application/json;charset=UTF-8"
              },
              {
                "key": "Origin",
                "value": "http://localhost:3000"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "http://localhost:3000/events/lets-go/ticket/1e48894f-111a-46ca-b368-7b83731fb15a"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventId\": \"{{EventId}}\",\n    \"ticketId\": \"6451e6d8-72e1-41ba-b1fb-9057bcac2e6c\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/devices",
              "host": [
                "{{host}}"
              ],
              "path": [
                "devices"
              ]
            },
            "description": "`Public`\n\nCreates a device by supplying `ticketId` and `eventId`. Returns token and ticket object which contain `deviceInfo`.\n\nImportant: Follow the order of currently written in request Body. `ticketId` should be first then followed by `eventId`."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Email",
      "item": [
        {
          "name": "Send email",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"email\": \"\", \n    \"sendgridTicketId\": \"\", \n    \"ticketUrl\": \"\" \n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/emails/send_emails",
              "host": [
                "{{host}}"
              ],
              "path": [
                "emails",
                "send_emails"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Send email (Japan)",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"email\": \"{{FanEmail}}\" \n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/emails/japan/interest/:email",
              "host": [
                "{{host}}"
              ],
              "path": [
                "emails",
                "japan",
                "interest",
                ":email"
              ],
              "variable": [
                {
                  "key": "email",
                  "value": "{{FanUserEmail}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Send email test template",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"sendgridTicketId\": \"\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/emails/test_template",
              "host": [
                "{{host}}"
              ],
              "path": [
                "emails",
                "test_template"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "Afterparty",
          "item": [
            {
              "name": "Create Afterparty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let generateAccessCode = \"T\"+Math.floor(0000000 + Math.random() * 999999999);",
                      "",
                      "let eventId;",
                      "",
                      "const options = {",
                      "    url: `${pm.variables.get('host')}/events`,",
                      "    method: 'POST',",
                      "    header: { ",
                      "        'Authorization': `Bearer ${pm.variables.get('token')}`,",
                      "        'content-type': 'application/json' },",
                      "    body: {",
                      "        mode: 'raw',",
                      "        raw: JSON.stringify({",
                      "            \"displayName\": `${pm.variables.get('DisplayName')}`,",
                      "            \"eventType\": \"stream\",",
                      "            \"description\": `${pm.variables.get('EventDescription')}`,",
                      "            \"datetime\": `${pm.variables.get('EventDate')}`,",
                      "            \"isDvr\": \"true\",",
                      "            \"streamProvider\": \"mux\",",
                      "            \"backupStreamProvider\": \"mux\",",
                      "            \"duration\": \"5\",",
                      "            \"ticketPrice\": 10500,",
                      "            \"ticketCap\": 999,",
                      "            \"vodDuration\": 24,",
                      "            \"pwyw\": false",
                      "        })",
                      "    }",
                      "};",
                      "",
                      "pm.sendRequest(options, function (error, result) {",
                      "    let data = result.json();",
                      "",
                      "    pm.variables.set(\"eventId\", data.event.id)",
                      "",
                      "    if (error) {",
                      "        console.log(error);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"displayName\": \"{{DisplayName}}\",\n    \"description\": \"{{EventDescription}}\",\n    \"datetime\": \"{{EventDate}}\",\n    \"isDvr\": \"true\",\n    \"duration\": \"5\",\n    \"ticketPrice\": 10500,\n    \"ticketCap\": 999,\n    \"vodDuration\": 24\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/vip?order=next",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "vip"
                  ],
                  "query": [
                    {
                      "key": "order",
                      "value": "next",
                      "description": "This value indicates in which order the event be created. `next` for afterparty, and `previous` for pre-event show which is not currently used"
                    }
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "",
                      "description": "ID of the event you wanted to add Afterparty event"
                    }
                  ]
                },
                "description": "`Private`\n\nThis creates next event from the parent/main event. This is used when adding Afterparty for an event.\n\n`eventId` is needed to create an Afterparty."
              },
              "response": []
            },
            {
              "name": "Update Afterparty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"displayName\": \"{{DisplayName}}\",\n    \"description\": \"{{EventDescription}}\",\n    \"datetime\": \"{{EventDate}}\",\n    \"isDvr\": \"true\",\n    \"duration\": \"5\",\n    \"ticketPrice\": 10500,\n    \"ticketCap\": 999,\n    \"vodDuration\": 24\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:nextEventIdOrSlug/vip",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":nextEventIdOrSlug",
                    "vip"
                  ],
                  "variable": [
                    {
                      "key": "nextEventIdOrSlug",
                      "value": "",
                      "description": "ID of the afterparty event you wanted to update"
                    }
                  ]
                },
                "description": "`Private`\n\nThis updates an Afterparty event."
              },
              "response": []
            },
            {
              "name": "Delete Afterparty",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{host}}/events/vip/:nextEventIdOrSlug?order",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    "vip",
                    ":nextEventIdOrSlug"
                  ],
                  "query": [
                    {
                      "key": "order",
                      "value": null,
                      "description": "This value indicates in which order the event be deleted. `next` for afterparty, and `previous` for pre-event show which is not currently used"
                    }
                  ],
                  "variable": [
                    {
                      "key": "nextEventIdOrSlug",
                      "value": "",
                      "description": "ID of the afterparty event you wanted to delete"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to delete next event when ticketsSold = 0 and it removes next_event_id associated to parent event."
              },
              "response": []
            }
          ]
        },
        {
          "name": "Bundles",
          "item": [
            {
              "name": "Set bundle to public",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \n    \"isPublic\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/bundles/:bundleId/set_public",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "bundles",
                    ":bundleId",
                    "set_public"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event associated with the bundle"
                    },
                    {
                      "key": "bundleId",
                      "value": "{{BundleId}}",
                      "description": "ID of bundle you wanted to make public"
                    }
                  ]
                },
                "description": "`Public`\n\nThis sets an event bundle to public to make bundle visible on checkout."
              },
              "response": []
            },
            {
              "name": "Update event bundle",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bundleCap\": 100,\n    \"id\": \"{{BundleId}}\",\n    \"name\": \"111Ordered bundled Id 1\",\n    \"physicalGoods\": [\n        \"{id: {{MerchId}}}\"\n        ],\n    \"merchType\": \"checkout\",\n    \"price\": 120000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/bundles",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "bundles"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of bundle you wanted to update"
                    }
                  ]
                },
                "description": "`Private`\n\nThis updates bundle data.\n \n`id` is the bundle id.\n\n`physicalGoods [{id}]` is an array of merch objects. Supply `merchId` per merch\n\nNote: `description` and `addOnInfo` params are not being used"
              },
              "response": []
            },
            {
              "name": "Order event bundles",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \n    \"orderedBundleIds\": [\n                \"f4f24bd8-2a6e-4390-bf50-e0faa0f659b8\", \n                \"c461d0f5-3232-4d81-87f4-4fe1bb48285c\", \n                \"cb6499a3-c017-48bb-9e4e-21d2f072b271\"\n                        ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/bundles/order",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "bundles",
                    "order"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event that contains bundles you wanted to order/sort alphabetically"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to order event bundles alphabetically."
              },
              "response": []
            },
            {
              "name": "Delete event bundle",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \n    \"eventSlug\": \"{{EventSlug}}\", \n    \"bundleId\":  \"a16ef5ad-4bb3-4094-9d67-81b552407536\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventSlug/bundles/delete",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventSlug",
                    "bundles",
                    "delete"
                  ],
                  "variable": [
                    {
                      "key": "eventSlug",
                      "value": "{{EventId}}",
                      "description": "ID of bundle you wanted to delete"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to delete a Bundle from an event."
              },
              "response": []
            }
          ]
        },
        {
          "name": "House",
          "item": [
            {
              "name": "Get private House info",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/accessCode/:accessCode",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "accessCode",
                    ":accessCode"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event associated to the private House"
                    },
                    {
                      "key": "accessCode",
                      "value": "BKDBG",
                      "description": "Access code of the private House"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to get private House information by supplying access code associated to the private House in params `accessCode`."
              },
              "response": []
            },
            {
              "name": "Get all event Houses",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/party",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "party"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to get Houses"
                    }
                  ]
                },
                "description": "`Public`\n\nThis is used to get all Houses of an event."
              },
              "response": []
            },
            {
              "name": "Create private house",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNDUzM2Y4Mi1mZmRlLTQ3OTEtOTYwOC1lMjI2YWI1ZmQwOTMiLCJhcnRpc3RCcmFuZElkIjoiYWE0MGY3ZmUtOTkzNC00MGRiLTg2NmYtNzk0OTc4ZGI3MDc2IiwiaWF0IjoxNjI3OTI4MTk2LCJleHAiOjE2Mjg1MzI5OTZ9.jM0Y0Vx9jcgHdcBIcozkxCqI07GfCQwrIoJqcEq8Quc",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"displayName\": \"Display name {{RandomString}}\", \n    \"uid\": \"I am uid\",\n    \"isPublic\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/create/:eventId/party",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    "create",
                    ":eventId",
                    "party"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "77503faf-5d6f-44fa-850e-1c8d6eb630df",
                      "description": "ID of the event you wanted to get Houses"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to create a private House in an event stream.\n\nIssue:\nsee comment"
              },
              "response": []
            },
            {
              "name": "!!!Add participant to House",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"uid\": \"this should be name\", \n    \"name\": \"Display name\",\n    \"displayName\": \"aaaa\",\n    \"isArtist\": true,\n    \"isDemo\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/party/:accessCode/setName",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "party",
                    ":accessCode",
                    "setName"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event the House is created into"
                    },
                    {
                      "key": "accessCode",
                      "value": "BKDBG",
                      "description": "Access code of the private House"
                    }
                  ]
                },
                "description": "`Public`\n\nThis is used to add a participant from a House in an event stream."
              },
              "response": []
            },
            {
              "name": "Remove participant from House",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"uid\": \"this should be name\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/party/:accessCode/removeName",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "party",
                    ":accessCode",
                    "removeName"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event the House is created into"
                    },
                    {
                      "key": "accessCode",
                      "value": "BKDBG",
                      "description": "Access code of created House"
                    }
                  ]
                },
                "description": "`Public`\n\nThis is used to remove a participant from a House in an event stream by supplying `uid` in request body."
              },
              "response": []
            },
            {
              "name": "Ban participant from House",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"uid\": \"this should be name\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/party/:accessCode/kick",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "party",
                    ":accessCode",
                    "kick"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event the House is created into"
                    },
                    {
                      "key": "accessCode",
                      "value": "BKDBG",
                      "description": "Access code of created House"
                    }
                  ]
                },
                "description": "`Public`\n\nThis is used to ban a participant from a House in an event stream."
              },
              "response": []
            },
            {
              "name": "Update member count per House",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/privateParty/:eventId/updateCount",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    "privateParty",
                    ":eventId",
                    "updateCount"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event the House is created into"
                    }
                  ]
                },
                "description": "`Public`\n\nThis is used to update all count per House in the House list."
              },
              "response": []
            }
          ]
        },
        {
          "name": "Chat",
          "item": [
            {
              "name": "Get event chat logs",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/chat_logs/csv",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "chat_logs",
                    "csv"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to get chat logs"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to get event chat logs."
              },
              "response": []
            },
            {
              "name": "Get muted users",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/get-mute-users/:eventId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    "get-mute-users",
                    ":eventId"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to get muted users"
                    }
                  ]
                },
                "description": "`Public`\n\nThis is used to get users which muted for event."
              },
              "response": []
            },
            {
              "name": "Mute user",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \n    \"userId\": \"\"\n} ",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/mute/:eventId/user",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    "mute",
                    ":eventId",
                    "user"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to mute a user"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to mute a user from the steam chat by supplying `userId` in request body."
              },
              "response": []
            }
          ]
        },
        {
          "name": "Promotion",
          "item": [
            {
              "name": "Get all event Promotion",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"test slug\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventIdOrSlug/promotions",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventIdOrSlug",
                    "promotions"
                  ],
                  "variable": [
                    {
                      "key": "eventIdOrSlug",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to get all promotions "
                    }
                  ]
                },
                "description": "`Private`\n\nThis gets all promotions of an event.\n\n\nNote: After the user has connected their Patreon account to their MH account, this should be available.\n\nReference for future changes\nhttps://linear.app/momenthouse/issue/ENG-2102/list-all-promotions-api-endpoint"
              },
              "response": []
            },
            {
              "name": "Create a Promotion",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"test promotion name\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventIdOrSlug/promotions",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventIdOrSlug",
                    "promotions"
                  ],
                  "variable": [
                    {
                      "key": "eventIdOrSlug",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to create a promotion "
                    }
                  ]
                },
                "description": "`Private`\n\nThis creates a promotion to an event. Requires `name` from request body.\n\n\nNote: After the user has connected their Patreon account to their MH account, this should be available."
              },
              "response": []
            },
            {
              "name": "Edit Promotion name",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"new promotion name {{RandomNumber}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventIdOrSlug/promotions/:promotionId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventIdOrSlug",
                    "promotions",
                    ":promotionId"
                  ],
                  "variable": [
                    {
                      "key": "eventIdOrSlug",
                      "value": "{{EventId}}",
                      "description": "ID of the event where the promotion is created"
                    },
                    {
                      "key": "promotionId",
                      "value": "",
                      "description": "ID of the promotion you wanted to edit"
                    }
                  ]
                },
                "description": "`Private`\n\nThis edits a promotion's name from an event. Requires `name` from request body.\n\n\nNote: After the user has connected their Patreon account to their MH account, this should be available."
              },
              "response": []
            },
            {
              "name": "Delete a Promotion",
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"test slug\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventIdOrSlug/promotions/:promotionId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventIdOrSlug",
                    "promotions",
                    ":promotionId"
                  ],
                  "variable": [
                    {
                      "key": "eventIdOrSlug",
                      "value": "{{EventId}}",
                      "description": "ID of the event where the promotion is created"
                    },
                    {
                      "key": "promotionId",
                      "value": "",
                      "description": "ID of the promotion you wanted to delete"
                    }
                  ]
                },
                "description": "`Private`\n\nThis deletes a promotion from an event.\n\n\nNote: After the user has connected their Patreon account to their MH account, this should be available."
              },
              "response": []
            }
          ]
        },
        {
          "name": "RTMP",
          "item": [
            {
              "name": "Get event RTMP config",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"auth_key\": \"{{RtmpAuthKey}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/rtmp_config?auth_key={{RtmpAuthKey}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "rtmp_config"
                  ],
                  "query": [
                    {
                      "key": "auth_key",
                      "value": "{{RtmpAuthKey}}",
                      "description": "Authentication key required"
                    }
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to get RTMP config"
                    }
                  ]
                },
                "description": "`Public`\n\nGets an event's RTMP config. Requires authentication via `auth_key` param on request query."
              },
              "response": []
            },
            {
              "name": "Get pre-recorded events within hour",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/hour?auth_key={{RtmpAuthKey}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    "hour"
                  ],
                  "query": [
                    {
                      "key": "auth_key",
                      "value": "{{RtmpAuthKey}}",
                      "description": "Authentication key required"
                    }
                  ]
                },
                "description": "`Public`\n\nGet pre-recorded events within the hour. Requires authentication via `auth_key` param on request query."
              },
              "response": []
            },
            {
              "name": "Get specific event RTMP config",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"auth_key\": \"{{RtmpAuthKey}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventIdOrSlug/:key/rtmp?auth_key={{RtmpAuthKey}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventIdOrSlug",
                    ":key",
                    "rtmp"
                  ],
                  "query": [
                    {
                      "key": "auth_key",
                      "value": "{{RtmpAuthKey}}",
                      "description": "Authentication key required"
                    }
                  ],
                  "variable": [
                    {
                      "key": "eventIdOrSlug",
                      "value": "{{EventId}}"
                    },
                    {
                      "key": "key",
                      "value": "started",
                      "description": "Available values: started, startTime, endTime, filePath, duration"
                    }
                  ]
                },
                "description": "`Public`\n\nGets a specific config value from an events RTMP config. Requires authentication via `auth_key` param on request query."
              },
              "response": []
            },
            {
              "name": "Start event",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"auth_key\": \"{{RtmpAuthKey}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/rtmp_start",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "rtmp_start"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to start"
                    }
                  ]
                },
                "description": "`Public`\n\nStarts event via RTMP. Requires authentication via `auth_key` param on request body."
              },
              "response": []
            },
            {
              "name": "Stop  event",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"auth_key\": \"{{RtmpAuthKey}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/rtmp_stop",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "rtmp_stop"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to stop"
                    }
                  ]
                },
                "description": "`Public`\n\nStops event via RTMP. Requires authentication via `auth_key` param on request body."
              },
              "response": []
            },
            {
              "name": "Update specific event RTMP config",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"auth_key\": \"{{RtmpAuthKey}}\",\n    \"started\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventIdOrSlug/:key/rtmp",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventIdOrSlug",
                    ":key",
                    "rtmp"
                  ],
                  "variable": [
                    {
                      "key": "eventIdOrSlug",
                      "value": "{{EventId}}"
                    },
                    {
                      "key": "key",
                      "value": "started",
                      "description": "Available values: started, startTime, endTime, filePath, duration"
                    }
                  ]
                },
                "description": "`Public`\n\nUpdates a specific config value from an events RTMP config. Requires authentication via `auth_key` param on request body."
              },
              "response": []
            },
            {
              "name": "Update event RTMP config",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"auth_key\": \"{{RtmpAuthKey}}\",\n    \"startTime\": \"2021-11-19 02:45:30\",\n    \"endTime\": \"2021-11-19 04:52:30\",\n    \"key\": \"3\",\n    \"duration\": \"12 + 5\",\n    \"started\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/events/:eventId/rtmp_config",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "events",
                    ":eventId",
                    "rtmp_config"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{EventId}}",
                      "description": "ID of the event you wanted to get RTMP config"
                    }
                  ]
                },
                "description": "`Public`\n\nUpdate necessary data while uploading file to AWS S3. Requires authentication via `auth_key` param on request body."
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get events",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/events/filtered_collection?eventIds={{EventId}}&eventIds={{TempEventId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                "filtered_collection"
              ],
              "query": [
                {
                  "key": "eventIds",
                  "value": "{{EventId}}",
                  "description": "Add `eventIds=` for each eventid you want to get"
                },
                {
                  "key": "eventIds",
                  "value": "{{TempEventId}}",
                  "description": "Add `eventIds=` for each eventid you want to get"
                }
              ]
            },
            "description": "`Public`\n\nGets a collection of events."
          },
          "response": []
        },
        {
          "name": "Get chat export",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/events/:eventId/chat_export",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "chat_export"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to export chat "
                }
              ]
            },
            "description": "`Public`\n\nGet chat export logs data of an event."
          },
          "response": []
        },
        {
          "name": "Get private event data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/events/private/:eventIdOrSlug",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                "private",
                ":eventIdOrSlug"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get event's data visible to event creator account only."
          },
          "response": []
        },
        {
          "name": "Get public event data",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/events/public/:eventIdOrSlug",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                "public",
                ":eventIdOrSlug"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get event's data that are visible to public (not logged in users)."
          },
          "response": []
        },
        {
          "name": "Get all tickets of event",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/tickets/meet",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "tickets",
                "meet"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get all tickets associated to an event."
          },
          "response": []
        },
        {
          "name": "Get event checkout details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/events/checkout/:eventIdOrSlug",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                "checkout",
                ":eventIdOrSlug"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get event's checkout details."
          },
          "response": []
        },
        {
          "name": "Get event polls",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/polls",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "polls"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to update all count per House in the House list."
          },
          "response": []
        },
        {
          "name": "Get all event questions",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/questions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "questions"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to set the prerecorded stream to auto-play when event starts."
          },
          "response": []
        },
        {
          "name": "Get event active demo session",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/events/:eventIdOrSlug/demo_session/active",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventIdOrSlug",
                "demo_session",
                "active"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get a demo session associated with an event."
          },
          "response": []
        },
        {
          "name": "Get curated events",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/events/search/curated/:language?tagFilter=default&start=0&end=6",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                "search",
                "curated",
                ":language"
              ],
              "query": [
                {
                  "key": "tagFilter",
                  "value": "default"
                },
                {
                  "key": "start",
                  "value": "0",
                  "description": "Number where it starts to display the event (index)"
                },
                {
                  "key": "end",
                  "value": "6",
                  "description": "Number where it end to display the event (index)"
                }
              ],
              "variable": [
                {
                  "key": "language",
                  "value": "en"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get curated/organized events. \n\nUsed in Home to get events list https://stage.mhcdn.tv/"
          },
          "response": []
        },
        {
          "name": "Get event playlist",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/playlist?provider=mux",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "playlist"
              ],
              "query": [
                {
                  "key": "provider",
                  "value": "mux",
                  "description": "Available values: ivs, mux"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get event playlist in CMAF format",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventSlug/playlist/cmaf",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventSlug",
                "playlist",
                "cmaf"
              ],
              "variable": [
                {
                  "key": "eventSlug",
                  "value": "{{EventSlug}}"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get event playlist in CMAF format."
          },
          "response": []
        },
        {
          "name": "Get VOD stream",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/vod/playlist",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "vod",
                "playlist"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get curated/organized events. \n\nUsed in Home to get events list https://stage.mhcdn.tv/"
          },
          "response": []
        },
        {
          "name": "Get Agora VOD URL",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/vod/playlist",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "vod",
                "playlist"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get curated/organized events. \n\nUsed in Home to get events list https://stage.mhcdn.tv/"
          },
          "response": []
        },
        {
          "name": "Start event",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/start",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "start"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to start streaming"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to start event."
          },
          "response": []
        },
        {
          "name": "Create VOD",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/create_vod",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "create_vod"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "shraybansal-full-vod-with-afterparty",
                  "description": "ID of the event you wanted to start streaming"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to start event."
          },
          "response": []
        },
        {
          "name": "Start intermission",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"type\": \"\", \n    \"data\": \"\"\n} ",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/intermission",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "intermission"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to start intermission"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to start stream intermission."
          },
          "response": []
        },
        {
          "name": "Stop event",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/stop",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "stop"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to stop streaming"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to issue a refund process for an event and soft deletes it. Money will be returned to the buyers and emails will be sent out."
          },
          "response": []
        },
        {
          "name": "Create Moment event",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"displayName\": \"{{DisplayName}}\",\n    \"eventType\": \"stream\",\n    \"description\": \"{{EventDescription}}\",\n    \"datetime\": \"{{EventDate}}\",\n    \"streamType\": \"\",\n    \"isDvr\": \"true\",\n    \"streamProvider\": \"mux\",\n    \"backupStreamProvider\": \"mux\",\n    \"duration\": \"5\",\n    \"ticketPrice\": 10500,\n    \"ticketCap\": 999,\n    \"vodDuration\": 24,\n    \"pwyw\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events"
              ]
            },
            "description": "`Private`\n\nThis creates a Moment event."
          },
          "response": []
        },
        {
          "name": "Create Meet and Greet event",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"displayName\": \"Meet & Greet\",\n    \"eventType\": \"meet\",\n    \"description\": \"{{EventDescription}}\",\n    \"datetime\": \"{{EventDate}}\",\n    \"duration\": \"5\",\n    \"ticketPrice\": 10500,\n    \"ticketCap\": 10,\n    \"meetInterval\": \"5\",\n    \"pwyw\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events"
              ]
            },
            "description": "`Private`\n\nThis creates a Meet and Greet event."
          },
          "response": []
        },
        {
          "name": "Update event image",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "event_image",
                  "description": "The image you wanted to assign as event image. Replace the image in `VALUE` column",
                  "type": "file",
                  "src": "diagonal bg pattern 2.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/events/:eventId/image",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "image"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to update event image"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to update event's image.\nRequest body should be `form-data`"
          },
          "response": []
        },
        {
          "name": "Update event sponsor image",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "sponsorImage",
                  "description": "The image you wanted to assign as event sponsor image. Replace the image in `VALUE` column",
                  "type": "file",
                  "src": "diagonal bg pattern 2.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/events/:eventId/sponsor",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "sponsor"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to update sponsor image"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to update event's sponsor image.  Request body should be `form-data`"
          },
          "response": []
        },
        {
          "name": "Set event to public",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"public\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/set_public",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "set_public"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to make public"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to set event to public or private. If setting to public, go to request body and supply `public` as `true`. Otherwise `false`"
          },
          "response": []
        },
        {
          "name": "Reschedule event",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventIdOrSlug\": \"{{EventId}}\", \n    \"artistMessage\": \"Unexpected incident happened\", \n    \"datetime\": \"2022-05-26T00:01:00.000Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/reschedule",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "reschedule"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to reschedule the event"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to reschedule an event.\n\nNote: `datetime` should be in UTC timezone and in this sample format `2022-05-26T00:02:00.000Z`. \n\nSo if I want to reschedule an event on `May 25, 2022 05:01PM` in PDT timezone, my `datetime` value should be `2022-05-26T00:01:00.000Z`. Notice that it converts the `datetime` into UTC timezone."
          },
          "response": []
        },
        {
          "name": "Refund event",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/refund",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "refund"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to refund the event"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to issue a refund process for an event and soft deletes it. Money will be returned to the buyers and emails will be sent out."
          },
          "response": []
        },
        {
          "name": "Create Tier",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventIdOrSlug\": 100,\n    \"name\": \"fe989311-27dc-40ad-a5fb-f70b8a5722cd\",\n    \"datetime\": \"2021-07-31T01:00:00.000Z\",\n    \"increaseType\":\"percentage\",\n    \"increase\": 20,\n    \"applyToBundles\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventIdOrSlug/tiers",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventIdOrSlug",
                "tiers"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to create a tier"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to create a tier on an event. \n\nRequest body:\n\n- `name` refers to the name of the tier to be created.\n\n- `datetime` is the date time when the tier is available\n\n- `increaseType` can be `percentage` or `fixed`\n\n- `applyToBundles` takes boolean. `True` if the increase is to be applied also to bundles."
          },
          "response": []
        },
        {
          "name": "Create VOD",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventIdOrSlug/createVOD",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventIdOrSlug",
                "createVOD"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to create a VOD"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to create a VOD of an event.\n(Optional) Supply `startSeconds` and `endSeconds` time in seconds in request body."
          },
          "response": []
        },
        {
          "name": "Ask question",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{UserEmail}}\",\n    \"question\": \"How do I download the VOD?\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/questions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "questions"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to ask a question"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to ask a question on an event. User can only ask one question (One question per email)"
          },
          "response": []
        },
        {
          "name": "Get event user count",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/users/:channelId/count",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                "users",
                ":channelId",
                "count"
              ],
              "variable": [
                {
                  "key": "channelId",
                  "value": "",
                  "description": "ID of the channel you wanted to get the event user count"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get current users count in an event channel stream."
          },
          "response": []
        },
        {
          "name": "Create Vimeo stream",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"vimeoId\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/vimeo",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "vimeo"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "",
                  "description": "ID of the event you wanted to create a Vimeo stream"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to create a vimeo stream. Supply vimeo ID in request body."
          },
          "response": []
        },
        {
          "name": "Mux webhook",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"type\": \"\", \n    \"data\": \"\"\n} ",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/mux",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                "mux"
              ]
            },
            "description": "`Public`\n\nEndpoint for Mux web hook. Data is supplied in request body: `type`, `data`\n\nMore of mux web hooks: https://docs.mux.com/guides/video/listen-for-webhooks"
          },
          "response": []
        },
        {
          "name": "Set prerecord to auto-play",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/auto-playback/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                "auto-playback",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to set the prerecord to auto-play"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to set the prerecorded stream to auto-play when event starts."
          },
          "response": []
        },
        {
          "name": "Import Shopify items to event",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "csv",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{host}}/events/:eventId/import",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "import"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to import products"
                }
              ]
            },
            "description": "`Public`\n\nImports Shopify products to a MH event from a csv file."
          },
          "response": []
        },
        {
          "name": "End event demo session",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{host}}/events/:eventIdOrSlug/demo_session/end",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventIdOrSlug",
                "demo_session",
                "end"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to end demo session"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to end a demo session associated with an event."
          },
          "response": []
        },
        {
          "name": "Reset event live state",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{host}}/events/:eventIdOrSlug/reset_event",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventIdOrSlug",
                "reset_event"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to set event live state"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to reset event's live state."
          },
          "response": []
        },
        {
          "name": "Update Moment event",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"description\": \"{{EventDescription}}\",\n    \"displayName\": \"{{DisplayName}}\",\n    \"duration\": 45,\n    \"ticketCap\": 100,\n    \"ticketPrice\": 9000,\n    \"vodDuration\": 45,\n\t\"slug\": \"newslughere2121\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "9605794d-7c40-41dc-a178-090d3268abe3",
                  "description": "ID of the event you wanted to update details"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to update most of the Moment event data."
          },
          "response": []
        },
        {
          "name": "Update Meet and Greet event",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"description\": \"aaaaasdads1112\",\n    \"duration\": 4,\n    \"meetInterval\": \"2\",\n    \"ticketCap\": 2,\n    \"ticketPrice\": 9900\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "b6b79aa5-9b45-4b26-835e-731765715e77",
                  "description": "ID of the event you wanted to update details"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to update most of the Meet and Greet event data."
          },
          "response": []
        },
        {
          "name": "Create default merch",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/defaultMerch",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "defaultMerch"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to create default merch"
                }
              ]
            },
            "description": "`Private`\n\nThis creates a set of default merch for the event. This requires the event to have 'Event Flyer' set."
          },
          "response": []
        },
        {
          "name": "Update nested event copy data",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventId\": \"\",\n    \"sendgridId\": \"\",\n    \"tippingHeader\": \"\",\n    \"minimumTip\": \"\",\n    \"tippingButton\": \"\",\n    \"tippingDescriptor\": \"\",\n    \"tippingDescription\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/updateNestedCopy/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                "updateNestedCopy",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted ro update nested event copy data"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to update nested event copy data."
          },
          "response": []
        },
        {
          "name": "Delete event",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventIdOrSlug",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventIdOrSlug"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "",
                  "description": "ID of event you wanted to delete"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to delete an event."
          },
          "response": []
        },
        {
          "name": "Delete Tier",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/tiers/:timestamp",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "tiers",
                ":timestamp"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event associated to the tier you wanted to delete"
                },
                {
                  "key": "timestamp",
                  "value": "1627725780000",
                  "description": "`datetime` value of the tier converted into Timestamp.\nSample `1627725780000`"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to delete a tier from an event. \nSupply `timestamp` to delete the tier with the same timestamp.\n\nIn order to get the `timestamp`, get the `datetime` of the tier you wanted to delete and convert it to Timestamp.\n\nYou may refer to the following for Timestamp converter: https://www.epochconverter.com/"
          },
          "response": []
        }
      ],
      "description": "This folder contains requests that are used to process events.\n\nAdditional information:\n\n`:nextEventIdOrSlug` is Afterparty ID\n`order=next` query parameter means event after the main event\n`order=previous` query parameter means event before the main event",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "function formatDate(date) {",
              "    let d = new Date(date),",
              "        month = '' + (d.getMonth() + 1),",
              "        day = '' + d.getDate(),",
              "        year = d.getFullYear()+1;",
              "",
              "    if (month.length < 2) ",
              "        month = '0' + month;",
              "    if (day.length < 2) ",
              "        day = '0' + day;",
              "",
              "    return [year, month, day].join('-');",
              "}",
              "",
              "let generateRandomNumber = Math.random().toString().split('.').join(\"\");",
              "let generateRandomString = Math.random().toString(36).substring(1,9);",
              "let date = formatDate(Date.now())",
              "",
              "pm.variables.set(\"RandomNumber\", generateRandomNumber);",
              "pm.variables.set(\"RandomString\", generateRandomString);",
              "",
              "pm.variables.set('DisplayName', \"Event name_\"+generateRandomString);",
              "pm.variables.set('EventDescription', \"Event description_\"+ generateRandomString);",
              "pm.variables.set('EventDate', date)",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Feedback",
      "item": [
        {
          "name": "Submit feedback",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticketId\": \"{{TicketId}}\", \n    \"submission\": \"Feedback\" \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/feedback/submit",
              "host": [
                "{{host}}"
              ],
              "path": [
                "feedback",
                "submit"
              ]
            },
            "description": "`Public`\n\nThis is used to let user submit a feedback from the Watchpage.\n\nNo auth needed but it requires access to event with valid `ticketId`."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Worlds Challenges & Rewards",
      "item": [
        {
          "name": "Complete Challenge",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"challengeOrder\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/challenges/:challengeId/complete/:challengeOrder",
              "host": [
                "{{host}}"
              ],
              "path": [
                "challenges",
                ":challengeId",
                "complete",
                ":challengeOrder"
              ],
              "variable": [
                {
                  "key": "challengeId",
                  "value": "de8e5b55-e897-4710-883c-18f527bf9e8c"
                },
                {
                  "key": "challengeOrder",
                  "value": null
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get an event's geofences if there's any."
          },
          "response": []
        },
        {
          "name": "Get Completed Challenge Items",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"location\": \"Busan, South Korea\", \n    \"milesLimit\": \"100\", \n    \"latitude\": 35.1795543,\n    \"longitude\": 129.0756416, \n    \"locationType\": \"other\", \n    \"country\": \"South Korea\", \n    \"state\": \"Busan\", \n    \"restricted\": true \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/geofences/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "geofences",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you wanted to create a geofence"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to add a geofence to an event."
          },
          "response": []
        },
        {
          "name": "Delete event geofence",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{host}}/geofences/:eventId/:geofenceId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "geofences",
                ":eventId",
                ":geofenceId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event that contains the geofence you wanted to delete"
                },
                {
                  "key": "geofenceId",
                  "value": "",
                  "description": "ID of geofence you wanted to delete"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to delete a geofence from an event."
          },
          "response": []
        },
        {
          "name": "Update event geofence",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"location\": \"Busan, South Korea\", \n    \"milesLimit\": \"100\", \n    \"latitude\": 35.1795543,\n    \"longitude\": 129.0756416, \n    \"locationType\": \"other\", \n    \"country\": \"South Korea\", \n    \"state\": \"Busan\", \n    \"restricted\": true \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/geofences/:eventId/:geofenceId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "geofences",
                ":eventId",
                ":geofenceId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event that contains the geofence you wanted to update"
                },
                {
                  "key": "geofenceId",
                  "value": "",
                  "description": "ID of geofence you wanted to update"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to update a geofence from an event."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Games",
      "item": [
        {
          "name": "Get Games",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/games/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "games",
                ""
              ]
            },
            "description": "Get All Games"
          },
          "response": []
        },
        {
          "name": "Get Leaderboard for the Game",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/games/:gameId/leaderboard?frequency=allTime",
              "host": [
                "{{host}}"
              ],
              "path": [
                "games",
                ":gameId",
                "leaderboard"
              ],
              "query": [
                {
                  "key": "frequency",
                  "value": "allTime"
                }
              ],
              "variable": [
                {
                  "key": "gameId",
                  "value": "5acf95bd-386d-4c56-a106-ce33ee279df4"
                }
              ]
            },
            "description": "Get Leaderboard for the Game with daily, weekly, monthly, and allTime."
          },
          "response": []
        },
        {
          "name": "Add Game",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"artistBrandId\":\"{{ArtistBrandId}}\",\n    \"gameType\":\"Obstacle\",\n    \"misc\":\"{\\\"duration\\\":3}\",\n    \"description\":\"Sample Description of a Game\",\n    \"name\":\"Postman Game {{$randomAlphaNumeric}}\",\n    \"isActive\":\"false\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/games/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "games",
                ""
              ]
            },
            "description": "Add a Game"
          },
          "response": []
        },
        {
          "name": "Edit Game",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"artistBrandId\":\"{{ArtistBrandId}}\",\n    \"gameType\":\"Obstacle\",\n    \"misc\":\"{\\\"duration\\\":3}\",\n    \"description\":\"Sample Description of a Game\",\n    \"name\":\"(DO NOT TOUCH) Postman Game {{$randomAlphaNumeric}}\",\n    \"isActive\":\"false\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/games/:gameId/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "games",
                ":gameId",
                ""
              ],
              "variable": [
                {
                  "key": "gameId",
                  "value": "{{GameId}}",
                  "description": "ID of the Game to be edited"
                }
              ]
            },
            "description": "Edit the Game Details"
          },
          "response": []
        },
        {
          "name": "Delete Game",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{host}}/games/:gameId/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "games",
                ":gameId",
                ""
              ],
              "variable": [
                {
                  "key": "gameId",
                  "value": "",
                  "description": "ID of the Game to be Deleted"
                }
              ]
            },
            "description": "Delete a Game"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Generic",
      "item": [
        {
          "name": "Get Demos",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/generic/demos",
              "host": [
                "{{host}}"
              ],
              "path": [
                "generic",
                "demos"
              ]
            },
            "description": "`Public`\n\nThis is used to get public demo events."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Geofences",
      "item": [
        {
          "name": "Get event geofence",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/geofences/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "geofences",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you wanted to get geofence data from"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get an event's geofences if there's any."
          },
          "response": []
        },
        {
          "name": "Create event geofence",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"location\": \"Busan, South Korea\", \n    \"milesLimit\": \"100\", \n    \"latitude\": 35.1795543,\n    \"longitude\": 129.0756416, \n    \"locationType\": \"other\", \n    \"country\": \"South Korea\", \n    \"state\": \"Busan\", \n    \"restricted\": true \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/geofences/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "geofences",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you wanted to create a geofence"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to add a geofence to an event."
          },
          "response": []
        },
        {
          "name": "Delete event geofence",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{host}}/geofences/:eventId/:geofenceId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "geofences",
                ":eventId",
                ":geofenceId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event that contains the geofence you wanted to delete"
                },
                {
                  "key": "geofenceId",
                  "value": "",
                  "description": "ID of geofence you wanted to delete"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to delete a geofence from an event."
          },
          "response": []
        },
        {
          "name": "Update event geofence",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"location\": \"Busan, South Korea\", \n    \"milesLimit\": \"100\", \n    \"latitude\": 35.1795543,\n    \"longitude\": 129.0756416, \n    \"locationType\": \"other\", \n    \"country\": \"South Korea\", \n    \"state\": \"Busan\", \n    \"restricted\": true \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/geofences/:eventId/:geofenceId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "geofences",
                ":eventId",
                ":geofenceId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event that contains the geofence you wanted to update"
                },
                {
                  "key": "geofenceId",
                  "value": "",
                  "description": "ID of geofence you wanted to update"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to update a geofence from an event."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Houses",
      "item": [
        {
          "name": "Create House",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"houseName\": \"from Postman\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/houses/create/:eventIdOrSlug",
              "host": [
                "{{host}}"
              ],
              "path": [
                "houses",
                "create",
                ":eventIdOrSlug"
              ],
              "variable": [
                {
                  "key": "eventIdOrSlug",
                  "value": "{{EventId}}",
                  "description": "ID of the event where you wanted to create a House"
                }
              ]
            },
            "description": "`Private` \n\nCreates a private house in an event. House name can be supplied in request body."
          },
          "response": []
        },
        {
          "name": "Get House information",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"houseName\": \"from Postman\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/houses/:houseIdOrSlug",
              "host": [
                "{{host}}"
              ],
              "path": [
                "houses",
                ":houseIdOrSlug"
              ],
              "variable": [
                {
                  "key": "houseIdOrSlug",
                  "value": "{{HouseId}}",
                  "description": "ID of the house you wanted to get information"
                }
              ]
            },
            "description": "`Public`\n\nGets the House information of the supplied `HouseId` from params."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Marketing",
      "item": [
        {
          "name": "Send bulk emails",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"emails\": \"['']\", \n    \"sendgridId\": \"\"  \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/marketing/send_bulk_emails",
              "host": [
                "{{host}}"
              ],
              "path": [
                "marketing",
                "send_bulk_emails"
              ]
            },
            "description": "`Private`  `Superuser` \n\nThis is used to send email marketing content to the list of emails."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Meet and Greet",
      "item": [
        {
          "name": "Removed",
          "item": [
            {
              "name": "Recording/Composition",
              "item": [
                {
                  "name": "Get recording download link",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/meet/room/recording/:ticketId",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "meet",
                        "room",
                        "recording",
                        ":ticketId"
                      ],
                      "variable": [
                        {
                          "key": "ticketId",
                          "value": "{{MeetTicketId}}",
                          "description": "ID of the user ticket to the meet and greet event"
                        }
                      ]
                    },
                    "description": "`Public`\n\nThis is used to get download links of the recordings of a Meet and Greet event."
                  },
                  "response": []
                },
                {
                  "name": "Update meet recording to available",
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/meet/room/composition",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "meet",
                        "room",
                        "composition"
                      ]
                    },
                    "description": "`Public`\n\nAll composition callbacks from Twilio will be thrown here. If twilio returns composition is available, update tickets table composition_status to composition-available."
                  },
                  "response": []
                },
                {
                  "name": "Compose all event recordings",
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [],
                    "url": {
                      "raw": "{{host}}/meet/room/:eventId/allCompositions",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "meet",
                        "room",
                        ":eventId",
                        "allCompositions"
                      ],
                      "variable": [
                        {
                          "key": "eventId",
                          "value": "{{MeetId}}",
                          "description": "ID of the meet and greet event"
                        }
                      ]
                    },
                    "description": "`Public`\n\nThis is used to compose all meet and greet event recordings."
                  },
                  "response": []
                },
                {
                  "name": "Resend recording",
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [],
                    "url": {
                      "raw": "{{host}}/meet/room/:ticketId/resendRecording",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "meet",
                        "room",
                        ":ticketId",
                        "resendRecording"
                      ],
                      "variable": [
                        {
                          "key": "ticketId",
                          "value": "{{MeetTicketId}}",
                          "description": "ID of the user ticket to the meet and greet event"
                        }
                      ]
                    },
                    "description": "`Public`\n\nThis is used to resend recording to owner of ticket ID."
                  },
                  "response": []
                },
                {
                  "name": "Create meet recording",
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "url": {
                      "raw": "{{host}}/meet/getComposition/:eventId/tickets/:ticketId",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "meet",
                        "getComposition",
                        ":eventId",
                        "tickets",
                        ":ticketId"
                      ],
                      "variable": [
                        {
                          "key": "eventId",
                          "value": "{{MeetDemoId}}",
                          "description": "ID of the meet and greet event"
                        },
                        {
                          "key": "ticketId",
                          "value": "{{MeetTicketId}}",
                          "description": "ID of the user ticket to the meet and greet event"
                        }
                      ]
                    },
                    "description": "`Private`\n\nThis creates a composition/recording of the current artist-fan meet and greet session.\n\nFor testing purposes, I've added `MeetDemoId` and `MeetTicketId` to make sure the request runs just fine. \n\nI've got these values by \n1. Edit Meet and Greet > Demo > Demo Meet and Greet\n2. Enter as Artist\n3. View as fan\n4. Enter Moment\n\nIn URL,\n`eventId` should be the value after `meet/`\n`ticketId` should be the value after `/ticket/`\n\nThere's a way to get these values via API, will add that once I'm done checking it."
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get artist current room info",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/meet/:eventId/artist",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    ":eventId",
                    "artist"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{MeetId}}",
                      "description": "ID of the meet and greet event"
                    }
                  ]
                },
                "description": "`Private`\n\nIncludes `currentRoomId` in the response body.\n\n`Public`\n\nDoes not include `currentRoomId` in the response body\n\n\nThis is used to get room information."
              },
              "response": []
            },
            {
              "name": "Get observer token",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/meet/room/:eventId/observer",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    "room",
                    ":eventId",
                    "observer"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{MeetId}}",
                      "description": "ID of the meet and greet event"
                    }
                  ]
                },
                "description": "`Public`\n\nThis is used to get observer access token."
              },
              "response": []
            },
            {
              "name": "Set room name",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \n    \"ticketId\": \"{{MeetTicketId}}\", \n    \"name\": \"Meet and greet name!!\",\n    \"isChecked\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/meet/room/setName",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    "room",
                    "setName"
                  ]
                },
                "description": "`Public`\n\nThis is used to set or change room name."
              },
              "response": []
            },
            {
              "name": "Set presence as connected",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \n    \"presence\": \"connected\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/meet/room/:eventId/tickets/:ticketId/presence",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    "room",
                    ":eventId",
                    "tickets",
                    ":ticketId",
                    "presence"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{MeetId}}",
                      "description": "ID of the meet and greet event"
                    },
                    {
                      "key": "ticketId",
                      "value": "{{MeetTicketId}}",
                      "description": "ID of the user ticket to the meet and greet event"
                    }
                  ]
                },
                "description": "`Public`\n\nThis is used to identify that the ticket ID owner is connected to the room."
              },
              "response": []
            },
            {
              "name": "Mark ticket as done",
              "request": {
                "method": "PATCH",
                "header": [],
                "url": {
                  "raw": "{{host}}/meet/room/:roomId/tickets/:ticketId/mark_done",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    "room",
                    ":roomId",
                    "tickets",
                    ":ticketId",
                    "mark_done"
                  ],
                  "variable": [
                    {
                      "key": "roomId",
                      "value": "{{MeetDemoId}}",
                      "description": "`roomId` is the current session's room ID. You can get the value for `roomId` by sending a request using the \"Get artist current room info\" endpoint."
                    },
                    {
                      "key": "ticketId",
                      "value": "{{MeetTicketId}}",
                      "description": "ID of the user ticket to the meet and greet event"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to mark ticket as done, ending a fan's meet and greet session.\n\n`roomId` is the current session's room ID. You can get the value for roomId by sending a request using the `Get artist current room info` endpoint. \n\n/meet/room/:eventId/artist"
              },
              "response": []
            },
            {
              "name": "Take a break",
              "request": {
                "method": "PATCH",
                "header": [],
                "url": {
                  "raw": "{{host}}/meet/room/:eventId/artist/take_break?takeBreak=true",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    "room",
                    ":eventId",
                    "artist",
                    "take_break"
                  ],
                  "query": [
                    {
                      "key": "takeBreak",
                      "value": "true"
                    }
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{MeetId}}",
                      "description": "ID of the meet and greet event"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to pause or take a break from the Meet and Greet event session."
              },
              "response": []
            },
            {
              "name": "Send user to back of queue",
              "request": {
                "method": "PATCH",
                "header": [],
                "url": {
                  "raw": "{{host}}/meet/room/:roomId/tickets/:ticketId/back_of_queue",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    "room",
                    ":roomId",
                    "tickets",
                    ":ticketId",
                    "back_of_queue"
                  ],
                  "variable": [
                    {
                      "key": "roomId",
                      "value": "{{MeetDemoId}}",
                      "description": "`roomId` is the current session's room ID. You can get the value for `roomId` by sending a request using the \"Get artist current room info\" endpoint."
                    },
                    {
                      "key": "ticketId",
                      "value": "{{MeetTicketId}}",
                      "description": "ID of the user ticket to the meet and greet event"
                    }
                  ]
                },
                "description": "`Private`\n\nSends ticket ID owner back of the queue.\n\n`roomId` is the current session's room ID. You can get the value for `roomId` by sending a request using the Get artist current room info endpoint.\n\n/meet/room/:eventId/artist"
              },
              "response": []
            },
            {
              "name": "End meet event",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/meet/room/endEvent",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    "room",
                    "endEvent"
                  ]
                },
                "description": "`Public`\n\nThis is used to end Meet and Greet event by suppling meet and greet event ID in request body."
              },
              "response": []
            },
            {
              "name": "Get meet queue info",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/meet/room/:eventId/get_queue",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    "room",
                    ":eventId",
                    "get_queue"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{MeetId}}",
                      "description": "ID of the meet and greet event"
                    }
                  ]
                },
                "description": "`Private`\n\nThis is used to get the queue information of the Meet and Greet event."
              },
              "response": []
            },
            {
              "name": "Get user meet metadata",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/meet/:eventId/ticket/:ticketId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    ":eventId",
                    "ticket",
                    ":ticketId"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{MeetId}}",
                      "description": "ID of the meet and greet event"
                    },
                    {
                      "key": "ticketId",
                      "value": "{{MeetTicketId}}",
                      "description": "ID of the user ticket to the meet and greet event"
                    }
                  ]
                },
                "description": "`Public`\n\nThis is used to get meet and greet public metadata including position in line, user token to access stream, liveEventStatus, and more. This is used by a fan user in meet and greet."
              },
              "response": []
            },
            {
              "name": "Kick user from room",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \n    \"ticketId\": \"\", \n    \"roomId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/meet/room/kick",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "meet",
                    "room",
                    "kick"
                  ]
                },
                "description": "`Public`\n\nThis is used to kick a participant from meet and greet event room."
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get user queue info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/meet/:eventId/ticket/:ticketId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "meet",
                ":eventId",
                "ticket",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the meet and greet event"
                },
                {
                  "key": "ticketId",
                  "value": "{{MeetId}}",
                  "description": "ID of the user ticket to the meet and greet event"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get user's current queue information."
          },
          "response": []
        },
        {
          "name": "Get host meet metadata",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/meet/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "meet",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{MeetDemoId}}",
                  "description": "ID of the meet and greet event"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get private meet and greet metadata including tickets sold, remaining, event status, the host's agora app token and more. This is used by the meet and greet host."
          },
          "response": []
        },
        {
          "name": "Send current user to back",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{host}}/meet/:eventId/ticket-line/back",
              "host": [
                "{{host}}"
              ],
              "path": [
                "meet",
                ":eventId",
                "ticket-line",
                "back"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{MeetId}}",
                  "description": "ID of the meet and greet event"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to allow the host to send the current user to the back of the ticket line."
          },
          "response": []
        },
        {
          "name": "Update next line user",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{host}}/meet/:eventId/ticket-line/next",
              "host": [
                "{{host}}"
              ],
              "path": [
                "meet",
                ":eventId",
                "ticket-line",
                "next"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{MeetId}}",
                  "description": "ID of the meet and greet event"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to allow the host to update to the next user in the ticket line."
          },
          "response": []
        },
        {
          "name": "Send photobooth image to fan",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "photobooth_image",
                  "type": "file",
                  "src": "cU5Fr5X3-cant-keep-a-good-dog-down-meme-token-dogecoin-spiked-over-500-this-year.jpeg"
                },
                {
                  "key": "email",
                  "value": "test.mh.staging@gmail.com",
                  "type": "text"
                },
                {
                  "key": "photobooth_image",
                  "type": "file",
                  "src": "106100892_159411789039416_4854002829448475538_n.png"
                },
                {
                  "key": "photobooth_image",
                  "type": "file",
                  "src": "download.jpeg"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/meet/:eventId/ticket/:ticketId/image",
              "host": [
                "{{host}}"
              ],
              "path": [
                "meet",
                ":eventId",
                "ticket",
                ":ticketId",
                "image"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "",
                  "description": "ID of the meet and greet event"
                },
                {
                  "key": "ticketId",
                  "value": "",
                  "description": "ID of the fan's ticket"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to upload and send photobooth images to the `email` supplied in request body. 3 photos will be send to the email.\n\n\nRequires `eventId` and `ticketId` of the fan user supplied in request params."
          },
          "response": []
        },
        {
          "name": "Update meet status",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"liveEventStatus\": \"IN_PROGRESS\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/meet/:eventId/event-status",
              "host": [
                "{{host}}"
              ],
              "path": [
                "meet",
                ":eventId",
                "event-status"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{MeetId}}",
                  "description": "ID of the meet and greet event"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to allow the host to update the event's status.\n\nSupply desired status in request body.\n\nAvailable `liveEventStatus` values are: <br/>\n`IN_PROGRESS` <br/>\n`INTERMISSION` <br/>\n`ENDED` <br/>"
          },
          "response": []
        },
        {
          "name": "Set meet total duration",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"durationSeconds\": 300\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/meet/:eventId/duration",
              "host": [
                "{{host}}"
              ],
              "path": [
                "meet",
                ":eventId",
                "duration"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{MeetId}}",
                  "description": "ID of the Meet and Greet you wanted to set duration\n"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to set meet and greet's total duration in seconds"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Merchs",
      "item": [
        {
          "name": "Checkout SDK Bundle",
          "item": [
            {
              "name": "Create Merch Bundle (Checkout SDK)",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkNzU5UndYNEJwSElpRkUwWUVnbFVGZWdjZlNKVmlQVTlVaTcyWDgzV2JveTN2R0IwYTJDS20iLCJpYXQiOjE2NzY0ODc4NjMsImV4cCI6MTY3NzA5MjY2M30.-b5KLoLaMa1dd7_icRrjVa64xdSu4bUi80gT2rqZPXc",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "api.momenthousestage.com"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "en-US,en;q=0.9"
                  },
                  {
                    "key": "authorization",
                    "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkVFlBVUJEUEtSVzZ4bVNnZUxLZ0NuZU5ZaE11Z0k0RHpEQ3FPWXRzYlB0am02TVV1R21PWjYiLCJpYXQiOjE2NzY0MjU4NjMsImV4cCI6MTY3NzAzMDY2M30.SL0SOwfdVXFUwOWlPsIb5c9ub1yD59K4wXWZcKNybn8"
                  },
                  {
                    "key": "origin",
                    "value": "https://www.momenthousestage.com"
                  },
                  {
                    "key": "referer",
                    "value": "https://www.momenthousestage.com/"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Not_A Brand\";v=\"99\", \"Google Chrome\";v=\"109\", \"Chromium\";v=\"109\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"macOS\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-site"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "name",
                      "value": "(DO NOT TOUCH) Sample Bundle {{$randomAlphaNumeric}}",
                      "description": "Name of the Bundle",
                      "type": "text"
                    },
                    {
                      "key": "price",
                      "value": "500",
                      "description": "Bundle Price",
                      "type": "text"
                    },
                    {
                      "key": "bundleCap",
                      "value": "10000000",
                      "description": "Number of Bundle Cap",
                      "type": "text"
                    },
                    {
                      "key": "physicalGoods",
                      "value": "[]",
                      "description": "ID of the physical items the user will get in purchasing this bundle",
                      "type": "text"
                    },
                    {
                      "key": "digitalGoods",
                      "value": "[]",
                      "description": "ID of the digital items the user will get in purchasing this bundle",
                      "type": "text"
                    },
                    {
                      "key": "hasAfterparty",
                      "value": "false",
                      "description": "If bundle has Afterparty for the Bundle. Accepts Boolean value",
                      "type": "text"
                    },
                    {
                      "key": "limitedInventory",
                      "value": "false",
                      "description": "Set bundle as limited or not. Accepts boolean value",
                      "type": "text"
                    },
                    {
                      "key": "meetEventId",
                      "value": "none",
                      "description": "ID of the Meet & Greet events that are part of this bundle",
                      "type": "text"
                    },
                    {
                      "key": "image",
                      "description": "Image for the uploaded bundle",
                      "type": "file",
                      "src": "/Users/rvo/Downloads/JPEG and PNG /12719.jpg"
                    },
                    {
                      "key": "description",
                      "value": "{\"html\":\"<p>Sample Bundle</p>\",\"content\":{\"ops\":[{\"insert\":\"Sample Bundle\\n\"}]},\"characterCount\":14}",
                      "description": "Description for the bundle",
                      "type": "text"
                    },
                    {
                      "key": "shippingRates",
                      "value": "{\"default\":0}",
                      "description": "Default Shipping rates for the bundle",
                      "type": "text"
                    },
                    {
                      "key": "geofenceRestrictions",
                      "value": "{\"countries\":[]}",
                      "description": "Countries Restricted to see the Bundle",
                      "type": "text"
                    },
                    {
                      "key": "eventIds",
                      "value": "[\"94f63fdb-a943-40dc-aa43-d701292f4610\",\"8ba33d0b-1e00-4742-8071-9c638f066494\"]",
                      "description": "IDs of the Events the Bundle will have",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{host}}/merchs/bundle",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "merchs",
                    "bundle"
                  ]
                },
                "description": "Creates a Bundle for the artist that can be seen in Checkout SDK"
              },
              "response": []
            },
            {
              "name": "Delete Bundle (Checkout SDK)",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "authority",
                    "value": "api.momenthousestage.com"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "en-US,en;q=0.9"
                  },
                  {
                    "key": "authorization",
                    "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkVFlBVUJEUEtSVzZ4bVNnZUxLZ0NuZU5ZaE11Z0k0RHpEQ3FPWXRzYlB0am02TVV1R21PWjYiLCJpYXQiOjE2NzY0MjU4NjMsImV4cCI6MTY3NzAzMDY2M30.SL0SOwfdVXFUwOWlPsIb5c9ub1yD59K4wXWZcKNybn8"
                  },
                  {
                    "key": "origin",
                    "value": "https://www.momenthousestage.com"
                  },
                  {
                    "key": "referer",
                    "value": "https://www.momenthousestage.com/"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Not_A Brand\";v=\"99\", \"Google Chrome\";v=\"109\", \"Chromium\";v=\"109\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"macOS\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-site"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36"
                  }
                ],
                "url": {
                  "raw": "{{host}}/merchs/bundle/:bundleId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "merchs",
                    "bundle",
                    ":bundleId"
                  ],
                  "variable": [
                    {
                      "key": "bundleId",
                      "value": "",
                      "description": "ID of the bundle to be deleted"
                    }
                  ]
                },
                "description": "Deletes a bundle from that is also displayed in the Checkout SDK"
              },
              "response": []
            },
            {
              "name": "Update Bundle (Checkout SDK)",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{NewTokenforCheckoutSDK}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "authority",
                    "value": "api.momenthousestage.com"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "en-US,en;q=0.9"
                  },
                  {
                    "key": "authorization",
                    "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkVFlBVUJEUEtSVzZ4bVNnZUxLZ0NuZU5ZaE11Z0k0RHpEQ3FPWXRzYlB0am02TVV1R21PWjYiLCJpYXQiOjE2NzY0MjU4NjMsImV4cCI6MTY3NzAzMDY2M30.SL0SOwfdVXFUwOWlPsIb5c9ub1yD59K4wXWZcKNybn8"
                  },
                  {
                    "key": "origin",
                    "value": "https://www.momenthousestage.com"
                  },
                  {
                    "key": "referer",
                    "value": "https://www.momenthousestage.com/"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Not_A Brand\";v=\"99\", \"Google Chrome\";v=\"109\", \"Chromium\";v=\"109\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"macOS\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-site"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "name",
                      "value": "(DO NOT TOUCH) Sample Bundle {{$randomAlphaNumeric}}",
                      "description": "Name of the Bundle",
                      "type": "text"
                    },
                    {
                      "key": "price",
                      "value": "500",
                      "description": "Bundle Price",
                      "type": "text"
                    },
                    {
                      "key": "bundleCap",
                      "value": "10000000",
                      "description": "Number of Bundle Cap",
                      "type": "text"
                    },
                    {
                      "key": "physicalGoods",
                      "value": "[]",
                      "description": "ID of the physical items the user will get in purchasing this bundle",
                      "type": "text"
                    },
                    {
                      "key": "digitalGoods",
                      "value": "[]",
                      "description": "ID of the digital items the user will get in purchasing this bundle",
                      "type": "text"
                    },
                    {
                      "key": "hasAfterparty",
                      "value": "false",
                      "description": "If bundle has Afterparty for the Bundle. Accepts Boolean value",
                      "type": "text",
                      "disabled": true
                    },
                    {
                      "key": "limitedInventory",
                      "value": "false",
                      "description": "Set bundle as limited or not. Accepts boolean value",
                      "type": "text"
                    },
                    {
                      "key": "meetEventId",
                      "value": "none",
                      "description": "ID of the Meet & Greet events that are part of this bundle",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "{{BundleIDCheckoutSDK}}",
                      "description": "ID of the Bundle to be edited",
                      "type": "text"
                    },
                    {
                      "key": "description",
                      "value": "{\"html\":\"<p>Sample Bundle</p>\",\"content\":{\"ops\":[{\"insert\":\"Sample Bundle\\n\"}]},\"characterCount\":14}",
                      "description": "Description for the bundle",
                      "type": "text"
                    },
                    {
                      "key": "shippingRates",
                      "value": "{\"default\":0}",
                      "description": "Default Shipping rates for the bundle",
                      "type": "text"
                    },
                    {
                      "key": "geofenceRestrictions",
                      "value": "{\"countries\":[]}",
                      "description": "Countries Restricted to see the Bundle",
                      "type": "text"
                    },
                    {
                      "key": "image",
                      "description": "Image for the Bundle",
                      "type": "file",
                      "src": "/Users/rvo/Downloads/JPEG and PNG /grass gradient.png"
                    },
                    {
                      "key": "eventIds",
                      "value": "[\"94f63fdb-a943-40dc-aa43-d701292f4610\",\"8ba33d0b-1e00-4742-8071-9c638f066494\"]",
                      "description": "IDs of the Events the Bundle will have",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{host}}/merchs/bundle/:bundleId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "merchs",
                    "bundle",
                    ":bundleId"
                  ],
                  "variable": [
                    {
                      "key": "bundleId",
                      "value": "{{BundleIDCheckoutSDK}}"
                    }
                  ]
                },
                "description": "Updates the Bundle for the Checkout SDK"
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get artist merchs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/merchs/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to get merchs"
                }
              ]
            },
            "description": "`Private`\n\nGets artist brand's merch list."
          },
          "response": []
        },
        {
          "name": "Get bundle sales tax",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/merchs/:eventId/sales_tax/:bundleId?toCountry=US",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                ":eventId",
                "sales_tax",
                ":bundleId"
              ],
              "query": [
                {
                  "key": "toCountry",
                  "value": "US",
                  "description": "The country which the sales tax will be based on."
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                },
                {
                  "key": "bundleId",
                  "value": "{{BundleId}}"
                }
              ]
            },
            "description": "`Public`\n\nGets the sales tax attached to the bundle to display on the checkout screen based on the selected country. \n\nSupply the country in request query param `toCountry`.\n\nhttps://stage.mhcdn.tv/settings/moment \n`Sales Tax Enabled` should be toggled on from the settings"
          },
          "response": []
        },
        {
          "name": "Get shipping areas",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/merchs/shipping/areas",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                "shipping",
                "areas"
              ]
            },
            "description": "`Public`\n\nGets all available shipping areas."
          },
          "response": []
        },
        {
          "name": "Get event merch purchases in CSV",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/merchs/:artistBrandId/event/:eventId/add_ons/csv",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                ":artistBrandId",
                "event",
                ":eventId",
                "add_ons",
                "csv"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}"
                },
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get event addon purchases in CSV",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/merchs/:artistBrandId/event/:eventId/add_ons/csv",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                ":artistBrandId",
                "event",
                ":eventId",
                "add_ons",
                "csv"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to get external addon purchases"
                },
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you wanted to get external addon purchases"
                }
              ]
            },
            "description": "`Private`\n\nGets csv file of purchased external addons details. Moment > Add-ons"
          },
          "response": []
        },
        {
          "name": "Get my purchased goods",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{FanUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/merchs/auth/purchased-physical-goods",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                "auth",
                "purchased-physical-goods"
              ]
            },
            "description": "`Private`\n\nThis is used to get the currently logged-in user's purchased goods information."
          },
          "response": []
        },
        {
          "name": "Get purchased good info",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/merchs/purchased-physical-goods/:paymentInfoId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                "purchased-physical-goods",
                ":paymentInfoId"
              ],
              "variable": [
                {
                  "key": "paymentInfoId",
                  "value": "aeac5ad5-44bf-47f5-bd31-f4528b1cefe3",
                  "description": "ID of payment you wanted to get the purchased good with. Can be easily fetched from \"get my purchased goods\" endpoint"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get a purchased good's information by supplying the `purchaseInfoId` as a param."
          },
          "response": []
        },
        {
          "name": "Export event merch purchases in CSV",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/merchs/:aritstBrandId/event/csv?exportType=default&merchType=all&eventIds={{EventId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                ":aritstBrandId",
                "event",
                "csv"
              ],
              "query": [
                {
                  "key": "exportType",
                  "value": "default",
                  "description": "Available values: default, merch_add_on, bravado, shopify, warnermusicgroup, printful, warnermusicgrouplivesettlement"
                },
                {
                  "key": "merchType",
                  "value": "all",
                  "description": "Available values: all, checkout"
                },
                {
                  "key": "eventIds",
                  "value": "{{EventId}}",
                  "description": "Array of IDs of event you wanted to get merch purchases"
                }
              ],
              "variable": [
                {
                  "key": "aritstBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you wanted to get merch purchases"
                }
              ]
            },
            "description": "`Private`\n\nGets csv file of purchased bundles and merch details. Moment > Merchandise\n\n##### Query params available \n`merchType`\n\n\nAvailable values: all, checkout\n\n \n`exportType`:\n\nAvailable values: default, merch_add_on, bravado, shopify, warnermusicgroup, printful, warnermusicgrouplivesettlement\n\n\n`eventIds = []`\n\n\nArray of event Ids"
          },
          "response": []
        },
        {
          "name": "Get all products in Shopify",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{NewTokenforCheckoutSDK}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/merchs/:artistBrandId/shopify/allProducts",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                ":artistBrandId",
                "shopify",
                "allProducts"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": ""
                }
              ]
            },
            "description": "Get all the products that are displayed in the shopify of the artist"
          },
          "response": []
        },
        {
          "name": "Create merch",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "{{MerchName}}",
                  "description": "Name of the merch item",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "{{MerchDescription}}",
                  "description": "Description of the merch item",
                  "type": "text"
                },
                {
                  "key": "price",
                  "value": "2500",
                  "description": "Merch price",
                  "type": "text"
                },
                {
                  "key": "cap",
                  "value": "-1",
                  "description": "Number of cap of all variants. Input -1 for unlimited cap",
                  "type": "text"
                },
                {
                  "key": "shippingData",
                  "value": "{\"shippingAddress\":true,\"walletAddress\":false}",
                  "description": "Shipping data of the merch item. For a physical good, set 'shippingAddress' to true.",
                  "type": "text"
                },
                {
                  "key": "shippingRates",
                  "value": "{}",
                  "description": "Rates for shipping merch",
                  "type": "text"
                },
                {
                  "key": "geofenceRestrictions",
                  "value": "{\"countries\":[]}",
                  "description": "Countries to restrict",
                  "type": "text"
                },
                {
                  "key": "variantOptions",
                  "value": "{}",
                  "description": "All variant options",
                  "type": "text"
                },
                {
                  "key": "variants",
                  "value": "[]",
                  "description": "List of all merch variants",
                  "type": "text"
                },
                {
                  "key": "variantsToRemove",
                  "value": "[]",
                  "description": "List of variants to remove from merch",
                  "type": "text"
                },
                {
                  "key": "limitedInventory",
                  "value": "false",
                  "description": "Set merch as limited or not. Accepts boolean value",
                  "type": "text"
                },
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "Id of the artist brand who owns the merch",
                  "type": "text"
                },
                {
                  "key": "merch_photo[]",
                  "description": "The image you wanted to assign as merch photo. Replace the image in `VALUE` column",
                  "type": "file",
                  "src": "pexels-анастасия-латунова-10006445.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/merchs",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs"
              ]
            },
            "description": "`Private`\n\nCreates a merch from dashboard."
          },
          "response": []
        },
        {
          "name": "Create custom merch",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"includeShirt\": true,\n    \"includeHoodie\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/merchs/customMerch",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                "customMerch"
              ]
            },
            "description": "`Private`\n\nCreates a custom merch."
          },
          "response": []
        },
        {
          "name": "Export event merch to Shopify",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sample\": \"data\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/merchs/:artistBrandId/event/:eventId/shopify-export",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                ":artistBrandId",
                "event",
                ":eventId",
                "shopify-export"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}"
                },
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Public`\n\nExports event merch data to Shopify."
          },
          "response": []
        },
        {
          "name": "Update order status",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventIdOrSlug\": \"{{EventId}}\",\n    \"productId\": \"{{ProducId}}\", \n    \"orderStatus\": \"not shipped\", \n    \"eta\": \"12/31/2022\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/merchs/updateOrderStatus",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                "updateOrderStatus"
              ]
            },
            "description": "`Public`\n\nUpdates status of order."
          },
          "response": []
        },
        {
          "name": "Create UMG product",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "{{MerchName}}",
                  "description": "Name of the merch item",
                  "type": "text"
                },
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "Id of the artist brand who owns the merch",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "{{MerchDescription}}",
                  "description": "Description of the merch item",
                  "type": "text"
                },
                {
                  "key": "cap",
                  "value": "-1",
                  "description": "Number of cap of all variants. Input -1 for unlimited cap",
                  "type": "text"
                },
                {
                  "key": "shippingData",
                  "value": "{\"shippingAddress\":true,\"walletAddress\":false}",
                  "description": "Shipping data of the merch item. For a physical good, set 'shippingAddress' to true.",
                  "type": "text"
                },
                {
                  "key": "variantOptions",
                  "value": "{}",
                  "description": "All variant options",
                  "type": "text"
                },
                {
                  "key": "variants",
                  "value": "[]",
                  "description": "List of all merch variants",
                  "type": "text"
                },
                {
                  "key": "productId",
                  "value": "{{ProductId}}",
                  "description": "Product ID of merch",
                  "type": "text"
                },
                {
                  "key": "price",
                  "value": "2500",
                  "description": "Merch price",
                  "type": "text"
                },
                {
                  "key": "geofenceRestrictions",
                  "value": "{\"countries\":[]}",
                  "description": "Countries to restrict",
                  "type": "text"
                },
                {
                  "key": "shippingRates",
                  "value": "{}",
                  "description": "Rates for shipping merch",
                  "type": "text"
                },
                {
                  "key": "limitedInventory",
                  "value": "false",
                  "description": "Set merch as limited or not. Accepts boolean value",
                  "type": "text"
                },
                {
                  "key": "images",
                  "description": "Merch images",
                  "type": "file",
                  "src": "Screenshot at Jan 20 13-56-20.png"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/merchs/shopify/addUmgProducts",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                "shopify",
                "addUmgProducts"
              ]
            },
            "description": "`Private`\n\nCreates a UMG product."
          },
          "response": []
        },
        {
          "name": "Create merch bundle",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "{{MerchName}}",
                  "description": "Name of the merch item",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "{{MerchDescription}}",
                  "description": "Description of the merch item",
                  "type": "text"
                },
                {
                  "key": "price",
                  "value": "2500",
                  "description": "Merch price",
                  "type": "text"
                },
                {
                  "key": "physicalGoods",
                  "value": "[{{ProductId}}]",
                  "description": "List of physical goods to add in bundle",
                  "type": "text"
                },
                {
                  "key": "digitalGoods",
                  "value": "",
                  "description": "List of digital goods to add in bundle",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "geofenceRestrictions",
                  "value": "{\"countries\":[]}",
                  "description": "Countries to restrict",
                  "type": "text"
                },
                {
                  "key": "merchType",
                  "value": "checkout",
                  "description": "Merch type of bundle",
                  "type": "text"
                },
                {
                  "key": "addOnInfo",
                  "value": "{}",
                  "description": "Add on information",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "shippingRates",
                  "value": "{}",
                  "description": "Rates for shipping merch",
                  "type": "text"
                },
                {
                  "key": "hasAfterparty",
                  "value": "false",
                  "description": "If event has afterparty or not. Accepts boolean value",
                  "type": "text"
                },
                {
                  "key": "limitedInventory",
                  "value": "false",
                  "description": "Set merch as limited or not. Accepts boolean value",
                  "type": "text"
                },
                {
                  "key": "bundleCap",
                  "value": "-1",
                  "description": "Number of cap of bundle. Input -1 for unlimited cap",
                  "type": "text"
                },
                {
                  "key": "meetEventId",
                  "value": "",
                  "description": "ID of meet and greet to add this bundle into",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "eventIds",
                  "value": "{{EventId}}",
                  "description": "ID of events to add this bundle into",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/merchs/create_bundles",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                "create_bundles"
              ]
            },
            "description": "`Private`\n\nCreates a merch bundle."
          },
          "response": []
        },
        {
          "name": "Delete merch",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "url": {
              "raw": "{{host}}/merchs/:merchId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                ":merchId"
              ],
              "variable": [
                {
                  "key": "merchId",
                  "value": "",
                  "description": "ID of merch you wanted to delete"
                }
              ]
            },
            "description": "`Private`\n\nDeletes a merch. If a merch is added on a bundle on an event, bundle will also be deleted."
          },
          "response": []
        },
        {
          "name": "Delete merch bundle",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bundleId\": \"969986ae-29ae-4ed9-a288-6ea5129f33a4\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/events/:eventId/bundles/delete",
              "host": [
                "{{host}}"
              ],
              "path": [
                "events",
                ":eventId",
                "bundles",
                "delete"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "6a618ba7-f3d6-4048-a4b1-43e00790962a"
                }
              ]
            },
            "description": "`Private`\n\nDeletes a merch bundle. Requires `eventId` in the request param, and `bundleId` in the req body"
          },
          "response": []
        },
        {
          "name": "Update merch",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "{{MerchName}}_updated",
                  "description": "Name of the merch item",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "{{MerchDescription}}_updated",
                  "description": "Description of the merch item",
                  "type": "text"
                },
                {
                  "key": "price",
                  "value": "5000",
                  "type": "text"
                },
                {
                  "key": "cap",
                  "value": "10000",
                  "description": "Number of cap of all variants. Input -1 for unlimited cap",
                  "type": "text"
                },
                {
                  "key": "shippingData",
                  "value": "{\"shippingAddress\":true,\"walletAddress\":false}",
                  "description": "Shipping data of the merch item. For a physical good, set 'shippingAddress' to true.",
                  "type": "text"
                },
                {
                  "key": "shippingRates",
                  "value": "{}",
                  "type": "text"
                },
                {
                  "key": "geofenceRestrictions",
                  "value": "{\"countries\":[]}",
                  "type": "text"
                },
                {
                  "key": "variantOptions",
                  "value": "{}",
                  "type": "text"
                },
                {
                  "key": "variants",
                  "value": "[]",
                  "type": "text"
                },
                {
                  "key": "variantsToRemove",
                  "value": "[]",
                  "type": "text"
                },
                {
                  "key": "limitedInventory",
                  "value": "false",
                  "type": "text"
                },
                {
                  "key": "merch_photo[]",
                  "description": "The image you wanted to assign as merch photo. Replace the image in `VALUE` column",
                  "type": "file",
                  "src": "pexels-анастасия-латунова-10006445.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/merchs/:merchId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                ":merchId"
              ],
              "variable": [
                {
                  "key": "merchId",
                  "value": "{{MerchId}}"
                }
              ]
            },
            "description": "`Private`\n\nCreates a merch from dashboard."
          },
          "response": []
        },
        {
          "name": "Request NFT transfer[]",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddressId\": \"12312312\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/merchs/nfts/:purchaseId/transfer",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                "nfts",
                ":purchaseId",
                "transfer"
              ],
              "variable": [
                {
                  "key": "purchaseId",
                  "value": "9951b836-cd02-4084-806e-a55239de321d",
                  "description": "The id of purchased digital goods"
                }
              ]
            },
            "description": "`Public`\n\nSubmits a request for a NFT transfer or claim to the wallet address of the supplied `shippingAddressId` supplied in request body.\n\nThe `status` field from response should be updated to indicate that a transfer request has been submitted into `requested` requested."
          },
          "response": []
        },
        {
          "name": "Set bundle to public[]",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"isPublic\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/merchs/bundles/:bundleId/set_public",
              "host": [
                "{{host}}"
              ],
              "path": [
                "merchs",
                "bundles",
                ":bundleId",
                "set_public"
              ],
              "variable": [
                {
                  "key": "bundleId",
                  "value": "{{BundleId}}",
                  "description": "ID of merch bundle to set public"
                }
              ]
            },
            "description": "`Public`\n\nSets a bundle to public."
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let generateRandomString = Math.random().toString(36).substring(1,9);",
              "",
              "pm.variables.set(\"MerchName\", \"Merch\"+generateRandomString);",
              "pm.variables.set(\"MerchDescription\", \"Merch_description\"+generateRandomString);",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Moderation",
      "item": [
        {
          "name": "Get Messages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/moderation/messages",
              "host": [
                "{{host}}"
              ],
              "path": [
                "moderation",
                "messages"
              ]
            },
            "description": "Get messages that were reported."
          },
          "response": []
        },
        {
          "name": "Get one Message",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/moderation/message/:messageId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "moderation",
                "message",
                ":messageId"
              ],
              "variable": [
                {
                  "key": "messageId",
                  "value": "96ce2e30-753a-4ab4-83b8-6e19d1d4dda1",
                  "description": "ID of the Message"
                }
              ]
            },
            "description": "Get a message that was reported through message ID."
          },
          "response": []
        },
        {
          "name": "Get Banned Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/moderation/banned-users",
              "host": [
                "{{host}}"
              ],
              "path": [
                "moderation",
                "banned-users"
              ]
            },
            "description": "Get all banned users."
          },
          "response": []
        },
        {
          "name": "Post Message for Moderation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJkZWZjODdjNy00ODVmLTRlOTAtYWY3YS00MWI2OTk1ZDg1ZGIiLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCQ0R1RxOVJpSzBYYU5mLzNpeEF3TTJ1UFJqN1VGb1duTURHSk9vd3E2elJkY3dZZXFLNXkuQyIsImlhdCI6MTY3NzAyMTU1MCwiZXhwIjoxNjc3NjI2MzUwfQ.9sxgMMXxrtSjpuvttrZOHEtbF5fWwLF8rKHBZVeddiQ"
              },
              {
                "key": "content-type",
                "value": "application/json"
              },
              {
                "key": "origin",
                "value": "https://rvo-sdk.worstage.co"
              },
              {
                "key": "referer",
                "value": "https://rvo-sdk.worstage.co/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Not_A Brand\";v=\"99\", \"Google Chrome\";v=\"109\", \"Chromium\";v=\"109\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "cross-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"channel_id\": \"world_stage_7d5199fa-2e74-4c13-8f8b-d7d53d2e3d5d_0\",\n    \"message_cleaned\": \"(FOR API TEST ONLY) PLEASE DO NOT TOUCH: **** YOU\",\n    \"message_id\": \"{{MessageId}}\",\n    \"message_raw\": \"(FOR API TEST ONLY) PLEASE DO NOT TOUCH: FUCK YOU\",\n    \"source\": \"Neutrino\",\n    \"username\": \"umpire\",\n    \"world_domain\": \"{{WorldDomain}}\",\n    \"world_id\": \"{{WorldId}}\",\n    \"priority\": 0.5,\n    \"provider\": \"pubnub\"\n}"
            },
            "url": {
              "raw": "https://api.momenthousestage.com/api/v1/moderation",
              "protocol": "https",
              "host": [
                "api",
                "momenthousestage",
                "com"
              ],
              "path": [
                "api",
                "v1",
                "moderation"
              ]
            },
            "description": "Post message to be moderated. Automatic if the system detects bad words."
          },
          "response": []
        },
        {
          "name": "Ban User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "*/*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkdi9GU2N2Q0lhN1ZGWXk2ZEcyemhVZXAwVzlaR0c1RGpQWjd5dTdCc1NiZWt3cThEai5FWHEiLCJpYXQiOjE2NzcwMTYyODgsImV4cCI6MTY3NzYyMTA4OH0.-eQLRH1CmDFCuJPF_hJK4_ysLSks2PRXgcA4OesiM_s"
              },
              {
                "key": "content-type",
                "value": "application/json"
              },
              {
                "key": "origin",
                "value": "https://admin.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://admin.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Chromium\";v=\"110\", \"Not A(Brand\";v=\"24\", \"Google Chrome\";v=\"110\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"worldId\": \"{{WorldId}}\"\n}"
            },
            "url": {
              "raw": "{{host}}/moderation/ban/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "moderation",
                "ban",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "",
                  "description": "ID of the user to ban"
                }
              ]
            },
            "description": "Ban user from the World or Sitewide."
          },
          "response": []
        },
        {
          "name": "Edit Message Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "*/*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkdi9GU2N2Q0lhN1ZGWXk2ZEcyemhVZXAwVzlaR0c1RGpQWjd5dTdCc1NiZWt3cThEai5FWHEiLCJpYXQiOjE2NzcwMTYyODgsImV4cCI6MTY3NzYyMTA4OH0.-eQLRH1CmDFCuJPF_hJK4_ysLSks2PRXgcA4OesiM_s"
              },
              {
                "key": "content-type",
                "value": "application/json"
              },
              {
                "key": "origin",
                "value": "https://admin.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://admin.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Not_A Brand\";v=\"99\", \"Google Chrome\";v=\"109\", \"Chromium\";v=\"109\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"messageId\": \"{{MessageId}}\",\n    \"userId\": \"{{UserId}}\",\n    \"status\": \"deleted\" //Choices can be deleted, and  approved\n}"
            },
            "url": {
              "raw": "{{host}}/moderation/message/:messageId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "moderation",
                "message",
                ":messageId"
              ],
              "variable": [
                {
                  "key": "messageId",
                  "value": "882bbc71-d854-431f-b1be-5043503de97a"
                }
              ]
            },
            "description": "Edits the message to be deleted or approved after reviewed."
          },
          "response": []
        },
        {
          "name": "Unban User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "*/*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkdi9GU2N2Q0lhN1ZGWXk2ZEcyemhVZXAwVzlaR0c1RGpQWjd5dTdCc1NiZWt3cThEai5FWHEiLCJpYXQiOjE2NzcwMTYyODgsImV4cCI6MTY3NzYyMTA4OH0.-eQLRH1CmDFCuJPF_hJK4_ysLSks2PRXgcA4OesiM_s"
              },
              {
                "key": "content-type",
                "value": "application/json"
              },
              {
                "key": "origin",
                "value": "https://admin.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://admin.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Chromium\";v=\"110\", \"Not A(Brand\";v=\"24\", \"Google Chrome\";v=\"110\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"worldId\":\"7d5199fa-2e74-4c13-8f8b-d7d53d2e3d5d\"}"
            },
            "url": {
              "raw": "{{host}}/moderation/ban/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "moderation",
                "ban",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "",
                  "description": "ID of the user you want to unban"
                }
              ]
            },
            "description": "Remove user from the banlist."
          },
          "response": []
        },
        {
          "name": "Delete Thread",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkbGFpLm5BMGdydXYzNUJTYTFtRkFNLmswbHkxa293c2VydFZYVkYwZjRWWlNZUGp1bHBwcE8iLCJpYXQiOjE2NzcwOTkzNDcsImV4cCI6MTY3NzcwNDE0N30.CTa4TkLvCNg-JfZT1UWCgRG70DlJd3dSLVpxvc8BZ7Q"
              },
              {
                "key": "origin",
                "value": "https://rvo-sdk.worstage.co"
              },
              {
                "key": "referer",
                "value": "https://rvo-sdk.worstage.co/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Chromium\";v=\"110\", \"Not A(Brand\";v=\"24\", \"Google Chrome\";v=\"110\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "cross-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"
              }
            ],
            "url": {
              "raw": "{{host}}/moderation/threads/:threadMessageId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "moderation",
                "threads",
                ":threadMessageId"
              ],
              "variable": [
                {
                  "key": "threadMessageId",
                  "value": "",
                  "description": "ID of the thread to be deleted"
                }
              ]
            },
            "description": "Delete a thread message."
          },
          "response": []
        }
      ]
    },
    {
      "name": "NFTs",
      "item": [
        {
          "name": "getAllNFTCollection",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/nfts/collections/artist_brands/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "nfts",
                "collections",
                "artist_brands",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "bb707310-f1a3-48d2-9cf4-a1ac590edbfb"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get an event's geofences if there's any."
          },
          "response": []
        },
        {
          "name": "getNFTCollection",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/nfts/collections/:collectionId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "nfts",
                "collections",
                ":collectionId"
              ],
              "variable": [
                {
                  "key": "collectionId",
                  "value": "b3b6e3b3-39cf-4a4c-b23b-5e99361185b1"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get an event's geofences if there's any."
          },
          "response": []
        },
        {
          "name": "getAllNFTs",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/nfts/collections/:collectionId/nfts",
              "host": [
                "{{host}}"
              ],
              "path": [
                "nfts",
                "collections",
                ":collectionId",
                "nfts"
              ],
              "variable": [
                {
                  "key": "collectionId",
                  "value": "b3b6e3b3-39cf-4a4c-b23b-5e99361185b1"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get an event's geofences if there's any."
          },
          "response": []
        },
        {
          "name": "postMint",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{host}}/nfts/mint",
              "host": [
                "{{host}}"
              ],
              "path": [
                "nfts",
                "mint"
              ]
            },
            "description": "`Public`\n\nThis is used to get an event's geofences if there's any."
          },
          "response": []
        },
        {
          "name": "postArtistNFTCollection",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"state\": \"DROPPING\",\n    \"name\": \"name\",\n    \"description\": \"description\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/nfts/artist_brands/:ArtistBrandId/collection",
              "host": [
                "{{host}}"
              ],
              "path": [
                "nfts",
                "artist_brands",
                ":ArtistBrandId",
                "collection"
              ],
              "variable": [
                {
                  "key": "ArtistBrandId",
                  "value": "shraybansal"
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get an event's geofences if there's any."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Notifications",
      "item": [
        {
          "name": "Get all Notifications",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{WorldsToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "userId",
                  "value": "{{UserIdWorlds}}",
                  "description": "ID of the user that you will get the notifications",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/notifications/inbox",
              "host": [
                "{{host}}"
              ],
              "path": [
                "notifications",
                "inbox"
              ]
            },
            "description": "Returns all notifications from the user."
          },
          "response": []
        },
        {
          "name": "Create Notification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkWDRTMmdFZENDZUFvUmRLWVJqUk0udWNUMXNlNTVpZzBsdEVDTnRoakV2ZnVyaTJ2SFMubWkiLCJpYXQiOjE2NzcxMTE3MzUsImV4cCI6MTY3NzcxNjUzNX0.vlzvOJrgUfxymJYmxJcPVj5Lv1fID8gF7mRLlOFO7go"
              },
              {
                "key": "content-type",
                "value": "application/json"
              },
              {
                "key": "origin",
                "value": "https://rvo-sdk.worstage.co"
              },
              {
                "key": "referer",
                "value": "https://rvo-sdk.worstage.co/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Chromium\";v=\"110\", \"Not A(Brand\";v=\"24\", \"Google Chrome\";v=\"110\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "cross-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sentFrom\": \"{{UserIdWorlds}}\",\n    \"sentFromType\": \"user\",\n    \"audience\": \"followers\",\n    \"body\": \"dracolich2422 is now live\",\n    \"title\": \"dracolich2422 - BROADCAST\",\n    \"targetDevices\": \"all\",\n    \"sendLive\": true,\n    \"msgType\": \"NOTIFICATION_BROADCAST_LIVE\",\n    \"liveNotification\": {\n        \"source\": {\n            \"slug\": \"dracolich2422\",\n            \"uid\": \"{{UserIdWorlds}}\"\n        },\n        \"worldUrl\": \"https://rvo-sdk.worstage.co/space\"\n    }\n}"
            },
            "url": {
              "raw": "{{host}}/notifications/notify",
              "host": [
                "{{host}}"
              ],
              "path": [
                "notifications",
                "notify"
              ]
            },
            "description": "Create a notification most especially when a creator goes live."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Patreon",
      "item": [
        {
          "name": "Begin Patreon Authentication",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/patreon/:artistBrandId/auth?isArtistBrand=true&ref=https%3A%2F%2Fmomenthousestage.com%2Fsettings%2Fpatreon",
              "host": [
                "{{host}}"
              ],
              "path": [
                "patreon",
                ":artistBrandId",
                "auth"
              ],
              "query": [
                {
                  "key": "isArtistBrand",
                  "value": "true"
                },
                {
                  "key": "ref",
                  "value": "https%3A%2F%2Fmomenthousestage.com%2Fsettings%2Fpatreon"
                }
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of the ArtistBrand"
                }
              ]
            },
            "description": "Connects the Momenthouse account to the logged in Patreon Account."
          },
          "response": []
        },
        {
          "name": "Get Patreon Promotion Tiers",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"isArtistBrand\":\"true\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/patreon/:artistBrandid/promotions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "patreon",
                ":artistBrandid",
                "promotions"
              ],
              "variable": [
                {
                  "key": "artistBrandid",
                  "value": "{{WorldsArtistBrandId}}",
                  "description": "ID of the ArtistBrand"
                }
              ]
            },
            "description": "Gets all the Patreon Promotion of an artist."
          },
          "response": []
        },
        {
          "name": "Get Patreon Identity and Campaign",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{WorldsToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkTHFraFR0YWxZUDJhUGtHYi85RmtqZWE2S0dPNFR1cDRWTDdnT1RvaVFqQ2ZpWklXODdkMXUiLCJpYXQiOjE2Nzg4Mzc2MTcsImV4cCI6MTY3OTQ0MjQxN30.EXHmdjVx1DfHLHw9_zVpKA3szdH5WOa97XedQ5yX8TY",
                "disabled": true
              },
              {
                "key": "if-none-match",
                "value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
              },
              {
                "key": "origin",
                "value": "https://www.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://www.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
              }
            ],
            "url": {
              "raw": "{{host}}/patreon/:artistBrandId/identity?isArtistBrand=true",
              "host": [
                "{{host}}"
              ],
              "path": [
                "patreon",
                ":artistBrandId",
                "identity"
              ],
              "query": [
                {
                  "key": "isArtistBrand",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{WorldsArtistBrandId}}",
                  "description": "ID of the Artist Brand"
                }
              ]
            },
            "description": "Get the Patreon Identity and all the Patreon Tiers."
          },
          "response": []
        },
        {
          "name": "!---Patreon Webhook",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"signature\":\"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/patreon/:artistBrandId/webhook",
              "host": [
                "{{host}}"
              ],
              "path": [
                "patreon",
                ":artistBrandId",
                "webhook"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{WorldsArtistBrandId}}",
                  "description": "ID of the Artist Brand"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Patreon Promotion",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{WorldsToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkTHFraFR0YWxZUDJhUGtHYi85RmtqZWE2S0dPNFR1cDRWTDdnT1RvaVFqQ2ZpWklXODdkMXUiLCJpYXQiOjE2Nzg4Mzc2MTcsImV4cCI6MTY3OTQ0MjQxN30.EXHmdjVx1DfHLHw9_zVpKA3szdH5WOa97XedQ5yX8TY",
                "disabled": true
              },
              {
                "key": "content-type",
                "value": "application/json"
              },
              {
                "key": "origin",
                "value": "https://www.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://www.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tiers\": [\n        {\n            \"id\": \"324b2652-0caf-4cfc-923c-18b7fd7b32c6\",\n            \"artistBrandId\": \"{{WorldsArtistBrandId}}\",\n            \"campaignId\": \"{{PatreonCampaignId}}\",\n            \"tierId\": \"8438155\",\n            \"eventId\": null,\n            \"discountValue\": \"30\",\n            \"excludeMerch\": true\n        },\n        {\n            \"id\": \"9cf8f8eb-a3ce-4125-a3bb-e9b0aa8ff406\",\n            \"artistBrandId\": \"{{WorldsArtistBrandId}}\",\n            \"campaignId\": \"{{PatreonCampaignId}}\",\n            \"tierId\": \"8438156\",\n            \"eventId\": null,\n            \"discountValue\": \"35\",\n            \"excludeMerch\": true\n        },\n        {\n            \"id\": \"fb024665-cd94-45d2-813c-0d99c62d12ce\",\n            \"artistBrandId\": \"{{WorldsArtistBrandId}}\",\n            \"campaignId\": \"{{PatreonCampaignId}}\",\n            \"tierId\": \"8438157\",\n            \"eventId\": null,\n            \"discountValue\": \"40\",\n            \"excludeMerch\": true\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{host}}/patreon/:artistBrandId/promotions/delete",
              "host": [
                "{{host}}"
              ],
              "path": [
                "patreon",
                ":artistBrandId",
                "promotions",
                "delete"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{WorldsArtistBrandId}}",
                  "description": "ID of the Artist Brand you want to delete"
                }
              ]
            },
            "description": "Deletes all the Patreon Promotion."
          },
          "response": []
        },
        {
          "name": "Removes Patreon from Account",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkTHFraFR0YWxZUDJhUGtHYi85RmtqZWE2S0dPNFR1cDRWTDdnT1RvaVFqQ2ZpWklXODdkMXUiLCJpYXQiOjE2Nzg4Mzc2MTcsImV4cCI6MTY3OTQ0MjQxN30.EXHmdjVx1DfHLHw9_zVpKA3szdH5WOa97XedQ5yX8TY",
                "disabled": true
              },
              {
                "key": "origin",
                "value": "https://www.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://www.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
              }
            ],
            "url": {
              "raw": "{{host}}/patreon/:artistBrandId/disconnect?isArtistBrand=true",
              "host": [
                "{{host}}"
              ],
              "path": [
                "patreon",
                ":artistBrandId",
                "disconnect"
              ],
              "query": [
                {
                  "key": "isArtistBrand",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{WorldsArtistBrandId}}",
                  "description": "ID of the Artist Brand of the account you want to remove the connection with"
                }
              ]
            },
            "description": "Removes connection of the account to the Patreon account it is connected."
          },
          "response": []
        },
        {
          "name": "Edit Patreon Promotions",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{WorldsToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkTHFraFR0YWxZUDJhUGtHYi85RmtqZWE2S0dPNFR1cDRWTDdnT1RvaVFqQ2ZpWklXODdkMXUiLCJpYXQiOjE2Nzg4Mzc2MTcsImV4cCI6MTY3OTQ0MjQxN30.EXHmdjVx1DfHLHw9_zVpKA3szdH5WOa97XedQ5yX8TY",
                "disabled": true
              },
              {
                "key": "content-type",
                "value": "application/json"
              },
              {
                "key": "origin",
                "value": "https://www.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://www.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tiers\": [\n        {\n            \"tierId\": \"8438155\",\n            \"discountValue\": 30,\n            \"artistBrandId\": \"{{WorldsArtistBrandId}}\",\n            \"campaignId\": \"{{PatreonCampaignId}}\",\n            \"excludeMerch\": true\n        },\n        {\n            \"tierId\": \"8438156\",\n            \"discountValue\": 35,\n            \"artistBrandId\": \"{{WorldsArtistBrandId}}\",\n            \"campaignId\": \"{{PatreonCampaignId}}\",\n            \"excludeMerch\": true\n        },\n        {\n            \"tierId\": \"8438157\",\n            \"discountValue\": 40,\n            \"artistBrandId\": \"{{WorldsArtistBrandId}}\",\n            \"campaignId\": \"{{PatreonCampaignId}}\",\n            \"excludeMerch\": true\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{host}}/patreon/:artistBrandId/promotions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "patreon",
                ":artistBrandId",
                "promotions"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{WorldsArtistBrandId}}",
                  "description": "ID of the Artist Brand Account to edit the promotions"
                }
              ]
            },
            "description": "Edits the Patreon Promotion with Discount."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Payments",
      "item": [
        {
          "name": "Get payment methods",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/payment_methods",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "payment_methods"
              ]
            },
            "description": "`Private`\n\nThis is used to get user's payment methods."
          },
          "response": []
        },
        {
          "name": "Get Stripe connect link",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/payment/stripe-oauth",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "stripe-oauth"
              ]
            },
            "description": "`Private`\n\nThis allows currently logged in user to set up payment information. This returns a Stripe redirect connect link."
          },
          "response": []
        },
        {
          "name": "Update Stripe account ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authority",
                "value": "stage-api.mhcdn.tv",
                "type": "text"
              },
              {
                "warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNDUzM2Y4Mi1mZmRlLTQ3OTEtOTYwOC1lMjI2YWI1ZmQwOTMiLCJhcnRpc3RCcmFuZElkIjoiYWE0MGY3ZmUtOTkzNC00MGRiLTg2NmYtNzk0OTc4ZGI3MDc2IiwiaWF0IjoxNjI1NTk1NDA1LCJleHAiOjE2MjYyMDAyMDV9.ki5bR9LefCCvC_C9xN_iqDAqhlO9R1abhKJKV4f2o1U",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{host}}/payment/connect",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "connect"
              ]
            },
            "description": "`Private`\n\nThis is used by Stripe to update user ID in the user table and is also used to redirect user to MH's Dashboard page upon successful request."
          },
          "response": []
        },
        {
          "name": "Get Paypal connect link",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/payment/pp-oauth",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "pp-oauth"
              ]
            },
            "description": "`Private`\n\nThis allows currently logged in user to set up payment information. This returns a Paypal redirect connect link."
          },
          "response": []
        },
        {
          "name": "Update  Paypal account ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/payment/pp-connect",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "pp-connect"
              ]
            },
            "description": "`Private`\n\nThis is used by Paypal to update user ID in the user table and is also used to redirect user to MH's Dashboard page upon successful request."
          },
          "response": []
        },
        {
          "name": "Get Shopify connect link",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/payment/shopify-oauth?shop&session",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "shopify-oauth"
              ],
              "query": [
                {
                  "key": "shop",
                  "value": null
                },
                {
                  "key": "session",
                  "value": null
                }
              ]
            },
            "description": "`Public`\n\nThis is used to get Shopify redirect connect link."
          },
          "response": []
        },
        {
          "name": "Create Stripe login link",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/createlogin/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "createlogin",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{UserId}}",
                  "description": "ID of the user you wanted to create Stripe login link"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to create a Stripe login link."
          },
          "response": []
        },
        {
          "name": "Get Stripe source status",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/stripe/source_status/:sourceId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "stripe",
                "source_status",
                ":sourceId"
              ],
              "variable": [
                {
                  "key": "sourceId",
                  "value": "",
                  "description": "ID of the source you wanted to check the status"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get Stripe source status by providing `sourceId` in the param."
          },
          "response": []
        },
        {
          "name": "!!!Get payment info",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/payment_info",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "payment_info"
              ]
            },
            "description": "`Private`\n\nThis is used to get payment info. Requires `Authorization` header in the Headers tab"
          },
          "response": []
        },
        {
          "name": "Connect Shopify account",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{host}}/payment/shopify-connect",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "shopify-connect"
              ]
            },
            "description": "`Private`\n\nThis is used to connect Shopify account to currently logged in MH account."
          },
          "response": []
        },
        {
          "name": "Call Stripe webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "stripe-signature",
                "value": "",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/stripe/webhook",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "stripe",
                "webhook"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Refund payment",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{host}}/payment/refund/:paymentIntentId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "refund",
                ":paymentIntentId"
              ],
              "variable": [
                {
                  "key": "paymentIntentId",
                  "value": "",
                  "description": "ID of the payment intent you wanted to refund"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to refund a payment made that is associated to  `paymentIntentId` provided in the request param."
          },
          "response": []
        },
        {
          "name": "Refund via email",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventId\": \"\",\n    \"paymentEmail\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/refundEmail",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "refundEmail"
              ]
            },
            "description": "`Private`\n\nThis is used to refund a payment by providing email used in payment."
          },
          "response": []
        },
        {
          "name": "Checkout via Shopify",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"artistBrandIdOrSlug\": \"{{ArtistBrandId}}\", \n    \"checkoutData\": {\n        \"checkout\": {\n            \"email\": \"{{UserEmail}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/artist_brands/:artistBrandId/shopify-checkout",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "artist_brands",
                ":artistBrandId",
                "shopify-checkout"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of event you wanted to process Shopify artist brand checkout"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to process artist brand checkout using Shopify by supplying `artistBrandId` in params and the checkout data in request body. This returns url, there Shopify handles the transaction."
          },
          "response": []
        },
        {
          "name": "Checkout event via Shopify",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"eventIdOrSlug\": \"{{EventId}}\", \n    \"checkoutData\": {\n        \"checkout\": {\n            \"email\": \"{{UserEmail}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/event/:eventId/shopify-checkout",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "event",
                ":eventId",
                "shopify-checkout"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you wanted to process Shopify event checkout"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to process event checkout using Shopify by supplying `eventId` in params and the checkout data in request body. This returns url, there Shopify handles the transaction."
          },
          "response": []
        },
        {
          "name": "Intent ticket payment",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "stripe-signature",
                "value": "",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"eventIds\": [\"{{EventId}}\"],\n\t\"price\": 0,\n\t\"location\": {\n\t\t\"locationData\": {\n\t\t\t\"data\": {\n\t\t\t\t\"ip\": \"209.146.18.107\",\n\t\t\t\t\"country\": \"Philippines\",\n\t\t\t\t\"countryCode\": \"PH\",\n\t\t\t\t\"continent\": \"Asia\",\n\t\t\t\t\"city\": \"Tupi\",\n\t\t\t\t\"zip\": \"9505\",\n\t\t\t\t\"state\": \"12\",\n\t\t\t\t\"lat\": 6.3344,\n\t\t\t\t\"lon\": 124.9528,\n\t\t\t\t\"timezone\": \"Asia/Manila\"\n\t\t\t},\n\t\t\t\"status\": 200,\n\t\t\t\"statusText\": \"\",\n\t\t\t\"headers\": {\n\t\t\t\t\"content-length\": \"178\",\n\t\t\t\t\"content-type\": \"application/json; charset=utf-8\"\n\t\t\t},\n\t\t\t\"config\": {\n\t\t\t\t\"url\": \"https://stage-api.mhcdn.tv/info/ip\",\n\t\t\t\t\"method\": \"get\",\n\t\t\t\t\"headers\": {\n\t\t\t\t\t\"Accept\": \"application/json, text/plain, */*\"\n\t\t\t\t},\n\t\t\t\t\"transformRequest\": [null],\n\t\t\t\t\"transformResponse\": [null],\n\t\t\t\t\"timeout\": 0,\n\t\t\t\t\"xsrfCookieName\": \"XSRF-TOKEN\",\n\t\t\t\t\"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n\t\t\t\t\"maxContentLength\": -1\n\t\t\t},\n\t\t\t\"request\": {}\n\t\t},\n\t\t\"address\": {\n\t\t\t\"address1\": \"blk 7 lot 10\",\n\t\t\t\"city\": \"Sharon Springs\",\n\t\t\t\"country_code\": \"Philippines\",\n\t\t\t\"fullName\": \"Test PH Address\",\n\t\t\t\"line2\": \"Cottage Ave\",\n\t\t\t\"province_code\": \"Davao del Sur\",\n\t\t\t\"raw\": \"blk 7 lot 10 Sharon Springs Davao del Sur 8001\",\n\t\t\t\"zip\": \"8001\",\n\t\t\t\"normalized_shipping_country\": null\n\t\t}\n\t},\n\t\"selectedCurrency\": \"PHP\",\n\t\"accessCode\": \"\",\n\t\"quantity\": 1,\n\t\"selectedBundle\": null,\n\t\"selectedMerchAddOnDetails\": {},\n\t\"bundleDetails\": {},\n\t\"addOns\": {\n\t\t\"meetAndGreet\": [],\n\t\t\"prePost\": [],\n\t\t\"external\": [],\n\t\t\"merch\": []\n\t},\n\t\"returnPrice\": true,\n\t\"userInfo\": {\n\t\t\"data\": {\n\t\t\t\"id\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\"firstName\": \"Test MH\",\n\t\t\t\"lastName\": \"Staging\",\n\t\t\t\"slug\": \"test-mhstaging4\",\n\t\t\t\"email\": \"test.mh.staging+main@gmail.com\",\n\t\t\t\"passwordHash\": \"$2b$10$OfX2xnQJa6qa6HwyJ0SifeClBFPN1RWKJRi6OfhINjWgz1Rxg0Obe\",\n\t\t\t\"createdAt\": \"2021-05-10T22:06:15.869Z\",\n\t\t\t\"updatedAt\": \"2021-05-10T22:06:15.869Z\",\n\t\t\t\"isSuper\": true,\n\t\t\t\"stripeAccountId\": null,\n\t\t\t\"phone\": null,\n\t\t\t\"resetPasswordToken\": null,\n\t\t\t\"isVerified\": false,\n\t\t\t\"paypal\": null,\n\t\t\t\"stripeCustomerId\": null,\n\t\t\t\"externalBillingId\": \"cus_JScl6IybXE9tio\",\n\t\t\t\"lang\": \"en\",\n\t\t\t\"timezone\": \"America/Los_Angeles\",\n\t\t\t\"image\": \"user/1621280654978_blurred-abstract-background-interior-view-looking-out-toward-empty-office-lobby-entrance-doors-glass-curtain-wall-with-frame_1339-6364.jpeg\",\n\t\t\t\"bio\": null,\n\t\t\t\"instagram\": null,\n\t\t\t\"paymentMethods\": [{\n\t\t\t\t\"id\": \"pm_1IxK1mIm56RF6P9ofbSeEyF7\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"stripeCustomerId\": \"cus_JScl6IybXE9tio\",\n\t\t\t\t\"isDefault\": true,\n\t\t\t\t\"paymentMethodType\": \"card\",\n\t\t\t\t\"billingName\": \"Declined card~\",\n\t\t\t\t\"cardBrand\": \"visa\",\n\t\t\t\t\"cardCountry\": \"US\",\n\t\t\t\t\"cardExpMonth\": \"11\",\n\t\t\t\t\"cardExpYear\": \"2031\",\n\t\t\t\t\"cardLast4\": \"4954\",\n\t\t\t\t\"cardFunding\": \"credit\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"createdAt\": \"2021-05-31T22:56:12.433Z\"\n\t\t\t}, {\n\t\t\t\t\"id\": \"pm_1IxdP7Im56RF6P9oIgdQ3pKr\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"stripeCustomerId\": \"cus_JScl6IybXE9tio\",\n\t\t\t\t\"isDefault\": true,\n\t\t\t\t\"paymentMethodType\": \"card\",\n\t\t\t\t\"billingName\": \"Auto Tester\",\n\t\t\t\t\"cardBrand\": \"visa\",\n\t\t\t\t\"cardCountry\": \"US\",\n\t\t\t\t\"cardExpMonth\": \"12\",\n\t\t\t\t\"cardExpYear\": \"2031\",\n\t\t\t\t\"cardLast4\": \"4242\",\n\t\t\t\t\"cardFunding\": \"credit\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"createdAt\": \"2021-06-01T19:37:34.806Z\"\n\t\t\t}],\n\t\t\t\"shippingAddresses\": [{\n\t\t\t\t\"id\": \"3522a634-f11f-4049-8995-29c1a3bd5534\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"fullName\": \"Test PH Address\",\n\t\t\t\t\"line1\": \"blk 7 lot 10\",\n\t\t\t\t\"line2\": \"Cottage Ave\",\n\t\t\t\t\"city\": \"Sharon Springs\",\n\t\t\t\t\"province\": \"Davao del Sur\",\n\t\t\t\t\"country\": \"Philippines\",\n\t\t\t\t\"zip\": \"8001\",\n\t\t\t\t\"rawAddress\": \"blk 7 lot 10 Sharon Springs Davao del Sur 8001\",\n\t\t\t\t\"createdAt\": \"2021-06-01T20:59:26.772Z\",\n\t\t\t\t\"updatedAt\": \"2021-06-01T20:59:26.772Z\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"countryAlpha2Code\": \"PH\",\n\t\t\t\t\"countryAlpha3Code\": \"PHL\",\n\t\t\t\t\"smartyStreetValidated\": false,\n\t\t\t\t\"phoneNumber\": \"+6311002312\",\n\t\t\t\t\"type\": \"mailing\"\n\t\t\t}, {\n\t\t\t\t\"id\": \"02b5bbbe-2ea9-4038-8d69-31ad29e2ce6e\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"fullName\": \"a\",\n\t\t\t\t\"line1\": \"Cottage Avenue\",\n\t\t\t\t\"line2\": \"Sharon Springs\",\n\t\t\t\t\"city\": \"Baltimore\",\n\t\t\t\t\"province\": \"MD\",\n\t\t\t\t\"country\": \"United States of America\",\n\t\t\t\t\"zip\": \"21215\",\n\t\t\t\t\"rawAddress\": \"Cottage Avenue, Baltimore, MD, USA\",\n\t\t\t\t\"createdAt\": \"2021-06-02T22:48:07.024Z\",\n\t\t\t\t\"updatedAt\": \"2021-06-02T22:48:07.024Z\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"countryAlpha2Code\": \"US\",\n\t\t\t\t\"countryAlpha3Code\": \"USA\",\n\t\t\t\t\"smartyStreetValidated\": true,\n\t\t\t\t\"phoneNumber\": \"\",\n\t\t\t\t\"type\": \"mailing\"\n\t\t\t}]\n\t\t},\n\t\t\"isLoggedIn\": true,\n\t\t\"name\": \"\",\n\t\t\"password\": \"\"\n\t}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/intent",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "intent"
              ]
            },
            "description": "`Public`\n\nThis is used to initiate ticket payment intent. \n\nRequest body sample can be get on event checkout page."
          },
          "response": []
        },
        {
          "name": "Intent merch payment",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "stripe-signature",
                "value": "",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"eventId\": \"fab34749-c089-4d6d-9dbf-72d549bf5701\",\n\t\"location\": {\n\t\t\"locationData\": null,\n\t\t\"address\": {\n\t\t\t\"address1\": \"blk 7 lot 10\",\n\t\t\t\"city\": \"Sharon Springs\",\n\t\t\t\"country_code\": \"PH\",\n\t\t\t\"country\": \"Philippines\",\n\t\t\t\"fullName\": \"Test PH Address\",\n\t\t\t\"line2\": \"Cottage Ave\",\n\t\t\t\"province_code\": \"Davao del Sur\",\n\t\t\t\"raw\": \"blk 7 lot 10 Sharon Springs Davao del Sur 8001\",\n\t\t\t\"zip\": \"8001\",\n\t\t\t\"normalized_shipping_country\": {\n\t\t\t\t\"name\": \"Philippines\",\n\t\t\t\t\"topLevelDomain\": [\".ph\"],\n\t\t\t\t\"alpha2Code\": \"PH\",\n\t\t\t\t\"alpha3Code\": \"PHL\",\n\t\t\t\t\"callingCodes\": [\"63\"],\n\t\t\t\t\"capital\": \"Manila\",\n\t\t\t\t\"altSpellings\": [\"PH\", \"Republic of the Philippines\", \"Repúblika ng Pilipinas\"],\n\t\t\t\t\"region\": \"Asia\",\n\t\t\t\t\"subregion\": \"South-Eastern Asia\",\n\t\t\t\t\"population\": 103279800,\n\t\t\t\t\"latlng\": [13, 122],\n\t\t\t\t\"demonym\": \"Filipino\",\n\t\t\t\t\"area\": 342353,\n\t\t\t\t\"gini\": 43,\n\t\t\t\t\"timezones\": [\"UTC+08:00\"],\n\t\t\t\t\"borders\": [],\n\t\t\t\t\"nativeName\": \"Pilipinas\",\n\t\t\t\t\"numericCode\": \"608\",\n\t\t\t\t\"currencies\": [{\n\t\t\t\t\t\"code\": \"PHP\",\n\t\t\t\t\t\"name\": \"Philippine peso\",\n\t\t\t\t\t\"symbol\": \"₱\"\n\t\t\t\t}],\n\t\t\t\t\"languages\": [{\n\t\t\t\t\t\"iso639_1\": \"en\",\n\t\t\t\t\t\"iso639_2\": \"eng\",\n\t\t\t\t\t\"name\": \"English\",\n\t\t\t\t\t\"nativeName\": \"English\"\n\t\t\t\t}],\n\t\t\t\t\"translations\": {\n\t\t\t\t\t\"de\": \"Philippinen\",\n\t\t\t\t\t\"es\": \"Filipinas\",\n\t\t\t\t\t\"fr\": \"Philippines\",\n\t\t\t\t\t\"ja\": \"フィリピン\",\n\t\t\t\t\t\"it\": \"Filippine\",\n\t\t\t\t\t\"br\": \"Filipinas\",\n\t\t\t\t\t\"pt\": \"Filipinas\",\n\t\t\t\t\t\"nl\": \"Filipijnen\",\n\t\t\t\t\t\"hr\": \"Filipini\",\n\t\t\t\t\t\"fa\": \"جزایر الندفیلیپین\"\n\t\t\t\t},\n\t\t\t\t\"flag\": \"https://restcountries.eu/data/phl.svg\",\n\t\t\t\t\"regionalBlocs\": [{\n\t\t\t\t\t\"acronym\": \"ASEAN\",\n\t\t\t\t\t\"name\": \"Association of Southeast Asian Nations\",\n\t\t\t\t\t\"otherAcronyms\": [],\n\t\t\t\t\t\"otherNames\": []\n\t\t\t\t}],\n\t\t\t\t\"cioc\": \"PHI\"\n\t\t\t}\n\t\t}\n\t},\n\t\"selectedCurrency\": \"PHP\",\n\t\"shoppingBag\": [{\n\t\t\"id\": \"asdasd-size-xs\",\n\t\t\"bundle\": {\n\t\t\t\"id\": \"d0710c4f-ec16-4022-a8da-96c507afa16a\",\n\t\t\t\"eventId\": \"fab34749-c089-4d6d-9dbf-72d549bf5701\",\n\t\t\t\"name\": \"asdasd\",\n\t\t\t\"price\": 11100,\n\t\t\t\"createdAt\": \"2021-06-07T20:01:10.514Z\",\n\t\t\t\"deletedAt\": null,\n\t\t\t\"displayOrder\": null,\n\t\t\t\"staticSoldOut\": null,\n\t\t\t\"merchType\": \"merch_gallery\",\n\t\t\t\"description\": \"{\\\"html\\\":\\\"<p>asd</p>\\\",\\\"content\\\":{\\\"ops\\\":[{\\\"insert\\\":\\\"asd\\\\n\\\"}]}}\",\n\t\t\t\"shippingRates\": {},\n\t\t\t\"taxInfo\": {},\n\t\t\t\"isPublic\": true,\n\t\t\t\"geofenceRestrictions\": {},\n\t\t\t\"addOnInfo\": {},\n\t\t\t\"fulfillmentCost\": 0,\n\t\t\t\"serviceFeePct\": \"0.10\",\n\t\t\t\"digitalGoods\": [],\n\t\t\t\"physicalGoods\": [{\n\t\t\t\t\"id\": \"be5dfc0a-2dcd-4062-8704-a5e06cec1b72\",\n\t\t\t\t\"bundleId\": null,\n\t\t\t\t\"productId\": \"be5dfc0a-2dcd-4062-8704-a5e06cec1b72\",\n\t\t\t\t\"type\": \"physical\",\n\t\t\t\t\"importedGood\": {\n\t\t\t\t\t\"name\": \"sizes\",\n\t\t\t\t\t\"images\": [{\n\t\t\t\t\t\t\"src\": \"https://static.mhcdn.tv/merch/1620780597089_blurred-abstract-background-interior-view-looking-out-toward-empty-office-lobby-entrance-doors-glass-curtain-wall-with-frame_1339-6364.jpeg\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"options\": [{\n\t\t\t\t\t\t\"name\": \"Size\",\n\t\t\t\t\t\t\"values\": [\"XS\", \"S\", \"M\", \"L\", \"XL\", \"XXL\"]\n\t\t\t\t\t}],\n\t\t\t\t\t\"description\": \"asdasda\"\n\t\t\t\t},\n\t\t\t\t\"provider\": \"merch_upload\",\n\t\t\t\t\"artistBrandId\": \"aa40f7fe-9934-40db-866f-794978db7076\",\n\t\t\t\t\"createdAt\": \"2021-05-12T00:49:57.521Z\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"shippingAddressRequired\": true,\n\t\t\t\t\"walletRequired\": false,\n\t\t\t\t\"digtalInfo\": {},\n\t\t\t\t\"name\": \"sizes\",\n\t\t\t\t\"images\": [{\n\t\t\t\t\t\"src\": \"https://static.mhcdn.tv/merch/1620780597089_blurred-abstract-background-interior-view-looking-out-toward-empty-office-lobby-entrance-doors-glass-curtain-wall-with-frame_1339-6364.jpeg\"\n\t\t\t\t}],\n\t\t\t\t\"options\": [{\n\t\t\t\t\t\"name\": \"Size\",\n\t\t\t\t\t\"values\": [\"XS\", \"S\", \"M\", \"L\", \"XL\", \"XXL\"]\n\t\t\t\t}]\n\t\t\t}],\n\t\t\t\"soldOut\": false\n\t\t},\n\t\t\"quantity\": 1,\n\t\t\"variant\": {\n\t\t\t\"be5dfc0a-2dcd-4062-8704-a5e06cec1b72\": {\n\t\t\t\t\"Size\": \"XS\"\n\t\t\t}\n\t\t}\n\t}],\n\t\"returnPrice\": true,\n\t\"isDemo\": false,\n\t\"breakoutFee\": null\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/merch_gallery/intent",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "merch_gallery",
                "intent"
              ]
            },
            "description": "`Public`\n\nThis is used to initiate merch payment intent. \n\nRequest body sample can be get on Watchplayer and after selecting a merch gallery and clicking `Add to Bag`."
          },
          "response": []
        },
        {
          "name": "Intent tipping payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "stripe-signature",
                "value": "",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"paymentMethodId\": \"pm_1IxdP7Im56RF6P9oIgdQ3pKr\",\n\t\"method\": \"stripe\",\n\t\"eventId\": \"fab34749-c089-4d6d-9dbf-72d549bf5701\",\n\t\"location\": {\n\t\t\"locationData\": null,\n\t\t\"address\": {}\n\t},\n\t\"selectedCurrency\": \"USD\",\n\t\"timezone\": \"America/Los_Angeles\",\n\t\"saveCard\": false,\n\t\"userInfo\": {\n\t\t\"data\": {\n\t\t\t\"id\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\"firstName\": \"Test MH\",\n\t\t\t\"lastName\": \"Staging\",\n\t\t\t\"slug\": \"test-mhstaging4\",\n\t\t\t\"email\": \"test.mh.staging+main@gmail.com\",\n\t\t\t\"passwordHash\": \"$2b$10$OfX2xnQJa6qa6HwyJ0SifeClBFPN1RWKJRi6OfhINjWgz1Rxg0Obe\",\n\t\t\t\"createdAt\": \"2021-05-10T22:06:15.869Z\",\n\t\t\t\"updatedAt\": \"2021-05-10T22:06:15.869Z\",\n\t\t\t\"isSuper\": true,\n\t\t\t\"stripeAccountId\": null,\n\t\t\t\"phone\": null,\n\t\t\t\"resetPasswordToken\": null,\n\t\t\t\"isVerified\": false,\n\t\t\t\"paypal\": null,\n\t\t\t\"stripeCustomerId\": null,\n\t\t\t\"externalBillingId\": \"cus_JScl6IybXE9tio\",\n\t\t\t\"lang\": \"en\",\n\t\t\t\"timezone\": \"America/Los_Angeles\",\n\t\t\t\"image\": \"user/1621280654978_blurred-abstract-background-interior-view-looking-out-toward-empty-office-lobby-entrance-doors-glass-curtain-wall-with-frame_1339-6364.jpeg\",\n\t\t\t\"bio\": null,\n\t\t\t\"instagram\": null,\n\t\t\t\"shippingAddresses\": [{\n\t\t\t\t\"id\": \"3522a634-f11f-4049-8995-29c1a3bd5534\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"fullName\": \"Test PH Address\",\n\t\t\t\t\"line1\": \"blk 7 lot 10\",\n\t\t\t\t\"line2\": \"Cottage Ave\",\n\t\t\t\t\"city\": \"Sharon Springs\",\n\t\t\t\t\"province\": \"Davao del Sur\",\n\t\t\t\t\"country\": \"Philippines\",\n\t\t\t\t\"zip\": \"8001\",\n\t\t\t\t\"rawAddress\": \"blk 7 lot 10 Sharon Springs Davao del Sur 8001\",\n\t\t\t\t\"createdAt\": \"2021-06-01T20:59:26.772Z\",\n\t\t\t\t\"updatedAt\": \"2021-06-01T20:59:26.772Z\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"countryAlpha2Code\": \"PH\",\n\t\t\t\t\"countryAlpha3Code\": \"PHL\",\n\t\t\t\t\"smartyStreetValidated\": false,\n\t\t\t\t\"phoneNumber\": \"+6311002312\",\n\t\t\t\t\"type\": \"mailing\"\n\t\t\t}, {\n\t\t\t\t\"id\": \"02b5bbbe-2ea9-4038-8d69-31ad29e2ce6e\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"fullName\": \"a\",\n\t\t\t\t\"line1\": \"Cottage Avenue\",\n\t\t\t\t\"line2\": \"Sharon Springs\",\n\t\t\t\t\"city\": \"Baltimore\",\n\t\t\t\t\"province\": \"MD\",\n\t\t\t\t\"country\": \"United States of America\",\n\t\t\t\t\"zip\": \"21215\",\n\t\t\t\t\"rawAddress\": \"Cottage Avenue, Baltimore, MD, USA\",\n\t\t\t\t\"createdAt\": \"2021-06-02T22:48:07.024Z\",\n\t\t\t\t\"updatedAt\": \"2021-06-02T22:48:07.024Z\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"countryAlpha2Code\": \"US\",\n\t\t\t\t\"countryAlpha3Code\": \"USA\",\n\t\t\t\t\"smartyStreetValidated\": true,\n\t\t\t\t\"phoneNumber\": \"\",\n\t\t\t\t\"type\": \"mailing\"\n\t\t\t}],\n\t\t\t\"paymentMethods\": [{\n\t\t\t\t\"id\": \"pm_1IxK1mIm56RF6P9ofbSeEyF7\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"stripeCustomerId\": \"cus_JScl6IybXE9tio\",\n\t\t\t\t\"isDefault\": true,\n\t\t\t\t\"paymentMethodType\": \"card\",\n\t\t\t\t\"billingName\": \"Declined card~\",\n\t\t\t\t\"cardBrand\": \"visa\",\n\t\t\t\t\"cardCountry\": \"US\",\n\t\t\t\t\"cardExpMonth\": \"11\",\n\t\t\t\t\"cardExpYear\": \"2031\",\n\t\t\t\t\"cardLast4\": \"4954\",\n\t\t\t\t\"cardFunding\": \"credit\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"createdAt\": \"2021-05-31T22:56:12.433Z\"\n\t\t\t}, {\n\t\t\t\t\"id\": \"pm_1IxdP7Im56RF6P9oIgdQ3pKr\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"stripeCustomerId\": \"cus_JScl6IybXE9tio\",\n\t\t\t\t\"isDefault\": true,\n\t\t\t\t\"paymentMethodType\": \"card\",\n\t\t\t\t\"billingName\": \"Auto Tester\",\n\t\t\t\t\"cardBrand\": \"visa\",\n\t\t\t\t\"cardCountry\": \"US\",\n\t\t\t\t\"cardExpMonth\": \"12\",\n\t\t\t\t\"cardExpYear\": \"2031\",\n\t\t\t\t\"cardLast4\": \"4242\",\n\t\t\t\t\"cardFunding\": \"credit\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"createdAt\": \"2021-06-01T19:37:34.806Z\"\n\t\t\t}]\n\t\t},\n\t\t\"isLoggedIn\": true,\n\t\t\"name\": \"\",\n\t\t\"password\": \"\",\n\t\t\"email\": \"free@momenthouse.com\"\n\t},\n\t\"price\": 467,\n\t\"messageText\": \"hey I just sent you tip!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/tipping/intent",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "tipping",
                "intent"
              ]
            },
            "description": "`Private`\n\nThis is used to initiate tip payment intent. \n\nRequest body sample can be get on Watchplayer and on the Chat, click Tip icon. Then complete a tip process"
          },
          "response": []
        },
        {
          "name": "Intent addon payment",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"paymentMethodId\": \"pm_1IxdP7Im56RF6P9oIgdQ3pKr\",\n\t\"method\": \"stripe\",\n\t\"eventIds\": [\"5e3f9045-317e-40cd-9754-72af6e590f5b\"],\n\t\"price\": 0,\n\t\"location\": {\n\t\t\"locationData\": {\n\t\t\t\"data\": {\n\t\t\t\t\"ip\": \"209.146.18.107\",\n\t\t\t\t\"country\": \"Philippines\",\n\t\t\t\t\"countryCode\": \"PH\",\n\t\t\t\t\"continent\": \"Asia\",\n\t\t\t\t\"city\": \"Tupi\",\n\t\t\t\t\"zip\": \"9505\",\n\t\t\t\t\"state\": \"12\",\n\t\t\t\t\"lat\": 6.3344,\n\t\t\t\t\"lon\": 124.9528,\n\t\t\t\t\"timezone\": \"Asia/Manila\"\n\t\t\t},\n\t\t\t\"status\": 200,\n\t\t\t\"statusText\": \"\",\n\t\t\t\"headers\": {\n\t\t\t\t\"content-length\": \"178\",\n\t\t\t\t\"content-type\": \"application/json; charset=utf-8\"\n\t\t\t},\n\t\t\t\"config\": {\n\t\t\t\t\"url\": \"https://stage-api.mhcdn.tv/info/ip\",\n\t\t\t\t\"method\": \"get\",\n\t\t\t\t\"headers\": {\n\t\t\t\t\t\"Accept\": \"application/json, text/plain, */*\"\n\t\t\t\t},\n\t\t\t\t\"transformRequest\": [null],\n\t\t\t\t\"transformResponse\": [null],\n\t\t\t\t\"timeout\": 0,\n\t\t\t\t\"xsrfCookieName\": \"XSRF-TOKEN\",\n\t\t\t\t\"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n\t\t\t\t\"maxContentLength\": -1\n\t\t\t},\n\t\t\t\"request\": {}\n\t\t},\n\t\t\"address\": {\n\t\t\t\"normalized_shipping_country\": null\n\t\t}\n\t},\n\t\"quantity\": 1,\n\t\"selectedCurrency\": \"PHP\",\n\t\"timezone\": \"America/Los_Angeles\",\n\t\"mailingList\": true,\n\t\"selectedBundle\": null,\n\t\"saveCard\": false,\n\t\"bundleDetails\": {\n\t\t\"askAddress\": false,\n\t\t\"askWalletAddress\": false,\n\t\t\"askShippingAddress\": false\n\t},\n\t\"selectedMerchAddOnDetails\": {},\n\t\"accessCode\": \"\",\n\t\"userInfo\": {\n\t\t\"data\": {\n\t\t\t\"id\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\"firstName\": \"Test MH\",\n\t\t\t\"lastName\": \"Staging\",\n\t\t\t\"slug\": \"test-mhstaging4\",\n\t\t\t\"email\": \"test.mh.staging+main@gmail.com\",\n\t\t\t\"passwordHash\": \"$2b$10$OfX2xnQJa6qa6HwyJ0SifeClBFPN1RWKJRi6OfhINjWgz1Rxg0Obe\",\n\t\t\t\"createdAt\": \"2021-05-10T22:06:15.869Z\",\n\t\t\t\"updatedAt\": \"2021-05-10T22:06:15.869Z\",\n\t\t\t\"isSuper\": true,\n\t\t\t\"stripeAccountId\": null,\n\t\t\t\"phone\": null,\n\t\t\t\"resetPasswordToken\": null,\n\t\t\t\"isVerified\": false,\n\t\t\t\"paypal\": null,\n\t\t\t\"stripeCustomerId\": null,\n\t\t\t\"externalBillingId\": \"cus_JScl6IybXE9tio\",\n\t\t\t\"lang\": \"en\",\n\t\t\t\"timezone\": \"America/Los_Angeles\",\n\t\t\t\"image\": \"user/1621280654978_blurred-abstract-background-interior-view-looking-out-toward-empty-office-lobby-entrance-doors-glass-curtain-wall-with-frame_1339-6364.jpeg\",\n\t\t\t\"bio\": null,\n\t\t\t\"instagram\": null,\n\t\t\t\"shippingAddresses\": [{\n\t\t\t\t\"id\": \"3522a634-f11f-4049-8995-29c1a3bd5534\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"fullName\": \"Test PH Address\",\n\t\t\t\t\"line1\": \"blk 7 lot 10\",\n\t\t\t\t\"line2\": \"Cottage Ave\",\n\t\t\t\t\"city\": \"Sharon Springs\",\n\t\t\t\t\"province\": \"Davao del Sur\",\n\t\t\t\t\"country\": \"Philippines\",\n\t\t\t\t\"zip\": \"8001\",\n\t\t\t\t\"rawAddress\": \"blk 7 lot 10 Sharon Springs Davao del Sur 8001\",\n\t\t\t\t\"createdAt\": \"2021-06-01T20:59:26.772Z\",\n\t\t\t\t\"updatedAt\": \"2021-06-01T20:59:26.772Z\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"countryAlpha2Code\": \"PH\",\n\t\t\t\t\"countryAlpha3Code\": \"PHL\",\n\t\t\t\t\"smartyStreetValidated\": false,\n\t\t\t\t\"phoneNumber\": \"+6311002312\",\n\t\t\t\t\"type\": \"mailing\"\n\t\t\t}, {\n\t\t\t\t\"id\": \"02b5bbbe-2ea9-4038-8d69-31ad29e2ce6e\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"fullName\": \"a\",\n\t\t\t\t\"line1\": \"Cottage Avenue\",\n\t\t\t\t\"line2\": \"Sharon Springs\",\n\t\t\t\t\"city\": \"Baltimore\",\n\t\t\t\t\"province\": \"MD\",\n\t\t\t\t\"country\": \"United States of America\",\n\t\t\t\t\"zip\": \"21215\",\n\t\t\t\t\"rawAddress\": \"Cottage Avenue, Baltimore, MD, USA\",\n\t\t\t\t\"createdAt\": \"2021-06-02T22:48:07.024Z\",\n\t\t\t\t\"updatedAt\": \"2021-06-02T22:48:07.024Z\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"countryAlpha2Code\": \"US\",\n\t\t\t\t\"countryAlpha3Code\": \"USA\",\n\t\t\t\t\"smartyStreetValidated\": true,\n\t\t\t\t\"phoneNumber\": \"\",\n\t\t\t\t\"type\": \"mailing\"\n\t\t\t}],\n\t\t\t\"paymentMethods\": [{\n\t\t\t\t\"id\": \"pm_1IxK1mIm56RF6P9ofbSeEyF7\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"stripeCustomerId\": \"cus_JScl6IybXE9tio\",\n\t\t\t\t\"isDefault\": true,\n\t\t\t\t\"paymentMethodType\": \"card\",\n\t\t\t\t\"billingName\": \"Declined card~\",\n\t\t\t\t\"cardBrand\": \"visa\",\n\t\t\t\t\"cardCountry\": \"US\",\n\t\t\t\t\"cardExpMonth\": \"11\",\n\t\t\t\t\"cardExpYear\": \"2031\",\n\t\t\t\t\"cardLast4\": \"4954\",\n\t\t\t\t\"cardFunding\": \"credit\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"createdAt\": \"2021-05-31T22:56:12.433Z\"\n\t\t\t}, {\n\t\t\t\t\"id\": \"pm_1IxdP7Im56RF6P9oIgdQ3pKr\",\n\t\t\t\t\"userId\": \"a4533f82-ffde-4791-9608-e226ab5fd093\",\n\t\t\t\t\"stripeCustomerId\": \"cus_JScl6IybXE9tio\",\n\t\t\t\t\"isDefault\": true,\n\t\t\t\t\"paymentMethodType\": \"card\",\n\t\t\t\t\"billingName\": \"Auto Tester\",\n\t\t\t\t\"cardBrand\": \"visa\",\n\t\t\t\t\"cardCountry\": \"US\",\n\t\t\t\t\"cardExpMonth\": \"12\",\n\t\t\t\t\"cardExpYear\": \"2031\",\n\t\t\t\t\"cardLast4\": \"4242\",\n\t\t\t\t\"cardFunding\": \"credit\",\n\t\t\t\t\"deletedAt\": null,\n\t\t\t\t\"createdAt\": \"2021-06-01T19:37:34.806Z\"\n\t\t\t}]\n\t\t},\n\t\t\"isLoggedIn\": true,\n\t\t\"name\": \"\",\n\t\t\"password\": \"\"\n\t},\n\t\"giftingInfo\": {\n\t\t\"purchaserName\": \"\",\n\t\t\"gifteeName\": \"\",\n\t\t\"gifteeEmail\": \"\",\n\t\t\"sendToGiftee\": false\n\t},\n\t\"addOns\": {\n\t\t\"meetAndGreet\": [],\n\t\t\"prePost\": [\"post\"],\n\t\t\"external\": [\"5b840edf-18a4-4c72-8d1d-5648914540fa\"],\n\t\t\"merch\": []\n\t},\n\t\"shippingAddressId\": null,\n\t\"captchaToken\": \"03AGdBq27kPX9_cstINT5lsLf48U1N8qgWc32wjSvOB3Op03Ttsr4dGJKmvueRBEHmuc5pS2WyH5C1K5awemAHH8kCrgJkzBOoSvu8x4YUEvq3RdMKOOcTKCKQMRm6I6hOwpET-x0kzo5UjQZOkSigXwG-LSKiHTQ7T6z6b4ikczEQFBgFTj28t8Lma6V-kMFaPxQt_GMnfzX0FLIdk-sVQXPwP2ONOaHFdFbrf9MSsEkcMknkKOiBLfvyl8fqCf59XhdasXSiRl2WKEGk0Mi6cE7BSSahLerVMJ85WAHV7ywiMhlFJ9wuKZBtU-3D3dxi1C_PIAavGINQjD754nlxXVYcQHNWaZMhKiiURS0SWluKBGWtCmYRcEOYoQS1OW39F6KoV6qSopDRa87kyY4eZyEB8qQjozGzF_TvCf0Rgtthjdb997v1F1Urpe3U9kd9js7NW7t5SSPls6UvaDVgUhtXRmUd1ujYq8TYrEuGRuwlFwexv0chyuwYn362i3BpTsg1AMAj5x1MCxxO-SqJfM5Mmna8U40JM3b5tIY8pSyUMhFIRcZnmvULnPBCxAcRor4EYaY0tIw9KjkJfPwbfKDf7Wzq0QdIRfJIQqW0XwCWwGwJIqmJ2itMFiLOq-x70N4Tw9aWZOIojB-ILbjGieZ_emKlUMn5LE1eTkwHVbrh16_pIzRLo8TpM6Q5IJOqSeU9TAP0WrnXIwZXCyHWvWzrDSYrF8bqZTKAaPg5b8UtQPSQAw9wFRErDWvz5sGY-XSxs-7IOyIfz-_st8XSLl2XICQGaWx4eMXMv5roDvsheVdfEbVtopFrZvgibPExAPp6zg574Y5huRIPsJqeCpC99gABiBb-HYVwCo7G_oyGPGrzNHICDU_BH2feAPeQ0STdBYh8G1rL0nv23pf0mwNUPU2QQnkPHGmpTE6sTrJeiWkeNYAzoeJl3NNNa-vTetDeKrzCzjR-ubdG9_wl6hM79HSpMTRJe6fyk9xp7s3d06q2yccXkzIq8ZQA4_oVibwqzV9y6YTbJRn_T7ltuwG4Sw4QFVf28ZNxfw24J9luX0D1aIsdLQCLRSK-Xr1Bz4k0uFDDSTFddWI2sujO8M6N0mAyvLz83wg8s3ci9eUOMD9gR_bOzJ6vbJvitY8UGkO9hfytQMnaKpJ5g4uB-2kswCkTrOyjSQ\",\n\t\"priceDisplay\": 1351688\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/add_on/intent",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "add_on",
                "intent"
              ]
            },
            "description": "`Public`\n\nThis is used to initiate addon payment intent."
          },
          "response": []
        },
        {
          "name": "Set default payment method",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/payment_methods/:paymentMethodId/set_default",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "payment_methods",
                ":paymentMethodId",
                "set_default"
              ],
              "variable": [
                {
                  "key": "paymentMethodId",
                  "value": "pm_1IxdP7Im56RF6P9oIgdQ3pKr",
                  "description": "ID of payment method you wanted to set as the default payment method"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to attach new payment method to user. This is processed first by Stripes api https://api.stripe.com/v1/payment_methods then passes values to this MH API. So there's no value that's been passed in this API."
          },
          "response": []
        },
        {
          "name": "Attach payment method",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "url": {
              "raw": "{{host}}/payment/payment_methods/:paymentMethodId/attach",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "payment_methods",
                ":paymentMethodId",
                "attach"
              ],
              "variable": [
                {
                  "key": "paymentMethodId",
                  "value": "",
                  "description": "ID of the payment method passed by Stripe"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to attach new payment method to user. This is processed first by Stripe's API https://api.stripe.com/v1/payment_methods then passes values to this MH endpoint. So there's no value that's been passed in this endpoint."
          },
          "response": []
        },
        {
          "name": "Detach payment method",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payment/payment_methods/:paymentMethodId/detach",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payment",
                "payment_methods",
                ":paymentMethodId",
                "detach"
              ],
              "variable": [
                {
                  "key": "paymentMethodId",
                  "value": "",
                  "description": "ID of the payment method you wanted to detach"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to detach payment method from user's account."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Payout",
      "item": [
        {
          "name": "Get payout balance",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/artist_brands/:artistBrandId/balance",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "artist_brands",
                ":artistBrandId",
                "balance"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you want get payout balance"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nThis is used to get payout balance information including Stripe and Paypal balance."
          },
          "response": []
        },
        {
          "name": "Get sales info",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/sales?artistBrandId={{ArtistBrandId}}&eventId={{EventId}}&tourId&csv=true&refresh=true&grouping",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "sales"
              ],
              "query": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you want to to get sales data"
                },
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you want to to get sales data"
                },
                {
                  "key": "tourId",
                  "value": null,
                  "description": "ID of tour you want to to get sales data"
                },
                {
                  "key": "csv",
                  "value": "true",
                  "description": "Use CSV format in response. Boolean"
                },
                {
                  "key": "refresh",
                  "value": "true"
                },
                {
                  "key": "grouping",
                  "value": null
                }
              ]
            },
            "description": "`Private`\n\nGets sales info of artist brand, event or tour."
          },
          "response": []
        },
        {
          "name": "Get event raw sales",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/sales-raw?artistBrandId={{ArtistBrandId}}&eventId={{EventId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "sales-raw"
              ],
              "query": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you want to get sales data"
                },
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you want to to get sales data"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nThis is used to get event's raw sales data."
          },
          "response": []
        },
        {
          "name": "[REMOVED] Get event sales tax",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/events/:eventId/sales-tax",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "events",
                ":eventId",
                "sales-tax"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you want to get sales data"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get event's raw sales tax data."
          },
          "response": []
        },
        {
          "name": "Get event final breakdown",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/events/:eventId/final-breakdown",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "events",
                ":eventId",
                "final-breakdown"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of artist brand you want to get the final breakdown data"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get event's final breakdown data."
          },
          "response": []
        },
        {
          "name": "Get sales breakdown collection",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/sales_breakdown_collection?artistBrandId={{ArtistBrandId}}&eventId={{EventId}}&csv=true",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "sales_breakdown_collection"
              ],
              "query": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you want to get sales data"
                },
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you want to get sales data"
                },
                {
                  "key": "csv",
                  "value": "true",
                  "description": "Use CSV format in response. Boolean"
                }
              ]
            },
            "description": "`Private`\n\nGets sales breakdown of artist brand or an event."
          },
          "response": []
        },
        {
          "name": "Get event tippers",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/events/:eventId/tipper",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "events",
                ":eventId",
                "tipper"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you want to get the event tippers data"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get list of tippers' email and tip amount."
          },
          "response": []
        },
        {
          "name": "Calculate subscription payout",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/:artistBrandId/subscriptions/:month/:year",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                ":artistBrandId",
                "subscriptions",
                ":month",
                ":year"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{SubscriptionArtistBrandId}}",
                  "description": "ID of artist brand you want to process subscription payout"
                },
                {
                  "key": "month",
                  "value": "06",
                  "description": "[MM] Month period where you want to process subscription payout"
                },
                {
                  "key": "year",
                  "value": "2021",
                  "description": "[YYYY] Year period where you want to process subscription payout"
                }
              ]
            },
            "description": "`Private`  `Superuser`\n\nThis is used to calculate subscription payout."
          },
          "response": []
        },
        {
          "name": "Get sales info broken down to all different offers",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/payouts/payout_collection?artistBrandId={{ArtistBrandId}}&eventId={{EventId}}&csv=true",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "payout_collection"
              ],
              "query": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}"
                },
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                },
                {
                  "key": "csv",
                  "value": "true"
                }
              ]
            },
            "description": "Return sales info broken down into all the different offers"
          },
          "response": []
        },
        {
          "name": "Process event payout",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventIds\": []\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/events/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "",
                  "description": "ID of event you want to process payout"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nThis is used to process an event payout."
          },
          "response": []
        },
        {
          "name": "Process multiple event payouts",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventIds\": [\"{{EventId}}\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/events/multi-payout",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "events",
                "multi-payout"
              ]
            },
            "description": "`Private` `Superuser`\n\nProcesses multiple payouts. Supply eventIds in Body of events that you wish to process payout"
          },
          "response": []
        },
        {
          "name": "Mark event as paid",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/events/:eventId/markAsPaid?payoutProcessed=true",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "events",
                ":eventId",
                "markAsPaid"
              ],
              "query": [
                {
                  "key": "payoutProcessed",
                  "value": "true",
                  "description": "Indicates whether payout is already been processed and settled or not. Takes boolean value"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "",
                  "description": "ID of event you want to process event payout"
                }
              ]
            },
            "description": "`Private`  `Superuser`\n\nThis is used to mark event as paid."
          },
          "response": []
        },
        {
          "name": "Reverse connected account amount",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/reverseConnectedAccount/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "reverseConnectedAccount",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you want to reverse connected account amount in to"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nReverses connected accounts amount."
          },
          "response": []
        },
        {
          "name": "Empty connected account amount",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/emptyConnectedAccount/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "emptyConnectedAccount",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of artist brand you want to empty connected account amount"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nEmpties the connected account's balance"
          },
          "response": []
        },
        {
          "name": "Process payout for given event",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fromDate\":\"2023-01-31T16:00:00.000Z\",\n    \"toDate\":\"023-03-31T15:59:59.999Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/payouts/merchs/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "payouts",
                "merchs",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}"
                }
              ]
            },
            "description": "This will trigger a payout process for the given event."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Privacy",
      "item": [
        {
          "name": "Redact Shopify shop data",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"shop_id\": 954889,\n    \"shop_domain\": \"snowdevil.myshopify.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/privacy/shop/redact",
              "host": [
                "{{host}}"
              ],
              "path": [
                "privacy",
                "shop",
                "redact"
              ]
            },
            "description": "`Public`\n\nThis is used to redact or remove Shopify shop data from MomentHouse. Shopify shop data is supplied in request body."
          },
          "response": []
        },
        {
          "name": "Request Shopify customer data",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shop_id\": 954889,\n  \"shop_domain\": \"snowdevil.myshopify.com\",\n  \"orders_requested\": [299938, 280263, 220458],\n  \"customer\": {\n    \"id\": 191167,\n    \"email\": \"john@email.com\",\n    \"phone\":  \"555-625-1199\"\n  },\n  \"data_request\": {\n    \"id\": 9999\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/privacy/customers/data_request",
              "host": [
                "{{host}}"
              ],
              "path": [
                "privacy",
                "customers",
                "data_request"
              ]
            },
            "description": "`Public`\n\nRequest Shopify customer data be sent to email supplied in request body."
          },
          "response": []
        },
        {
          "name": "Redact Shopify customer data",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shop_id\": 954889,\n  \"shop_domain\": \"snowdevil.myshopify.com\",\n  \"customer\": {\n    \"id\": 191167,\n    \"email\": \"john@email.com\",\n    \"phone\": \"555-625-1199\"\n  },\n  \"orders_to_redact\": [299938, 280263, 220458]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/privacy/customers/redact",
              "host": [
                "{{host}}"
              ],
              "path": [
                "privacy",
                "customers",
                "redact"
              ]
            },
            "description": "`Public`\n\nThis is used to redact or remove Shopify customer order data from MomentHouse. Shopify customer order data is supplied in request body."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Realtime/Poll",
      "item": [
        {
          "name": "Create poll",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"question\": \"This is a question\",\n\t\"answers\": [{\n\t\t\"answer\": \"Answer option 1\"\n\t}, {\n\t\t\"answer\": \"Answer option 2\"\n\t}, {\n\t\t\"answer\": \"Answer option 3\"\n\t}, {\n\t\t\"answer\": \"Answer option 4\"\n\t}]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/realtime/:eventId/poll",
              "host": [
                "{{host}}"
              ],
              "path": [
                "realtime",
                ":eventId",
                "poll"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to add a poll"
                }
              ]
            },
            "description": "`Private`\n\nThis creates a poll that contains a question, 2 required answer options and 2 optional answer options. This can be created on AVRoom of an event."
          },
          "response": []
        },
        {
          "name": "Get event poll",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/realtime/:eventId/poll",
              "host": [
                "{{host}}"
              ],
              "path": [
                "realtime",
                ":eventId",
                "poll"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to get event poll"
                }
              ]
            },
            "description": "`Public`\n\nGets the poll questions and answers of an event."
          },
          "response": []
        },
        {
          "name": "Vote poll",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"answerId\": \"{{AnswerId}}\", \n    \"ticketId\": \"{{TicketId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/realtime/:eventId/vote",
              "host": [
                "{{host}}"
              ],
              "path": [
                "realtime",
                ":eventId",
                "vote"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to add a vote from a poll"
                }
              ]
            },
            "description": "`Public`\n\nAdds an answer to the poll question of an event."
          },
          "response": []
        },
        {
          "name": "Remove Poll",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{host}}/realtime/:eventId/poll/:pollId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "realtime",
                ":eventId",
                "poll",
                ":pollId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the Event of the Poll"
                },
                {
                  "key": "pollId",
                  "value": "",
                  "description": "ID of the poll created in POST /realtime/:eventId/poll"
                }
              ]
            },
            "description": "Delete the poll from the Event."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Sales Tax",
      "item": [
        {
          "name": "Get item sales tax",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/sales_tax/:artistBrandId/ticket_sales_tax/:eventId/:price",
              "host": [
                "{{host}}"
              ],
              "path": [
                "sales_tax",
                ":artistBrandId",
                "ticket_sales_tax",
                ":eventId",
                ":price"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of the artist brand who owns the event"
                },
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to get sales tax"
                },
                {
                  "key": "price",
                  "value": "100",
                  "description": "Value of the price to get calculated tax"
                }
              ]
            },
            "description": "`Public`\n\nThis gets the sales tax of an item (ticket, merch, etc.)\n\nNote: This currently is not found in checkout. Might be not used anymore."
          },
          "response": []
        },
        {
          "name": "Refresh Keys",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{host}}/sales_tax/refresh_keys",
              "host": [
                "{{host}}"
              ],
              "path": [
                "sales_tax",
                "refresh_keys"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Search (Worlds)",
      "item": [
        {
          "name": "Search a user",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer"
              },
              {
                "key": "origin",
                "value": "https://rhobert.worstage.co"
              },
              {
                "key": "referer",
                "value": "https://rhobert.worstage.co/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "cross-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
              }
            ],
            "url": {
              "raw": "{{host}}/search?q={{WorldsSearchName}}&entities[]=usersAll",
              "host": [
                "{{host}}"
              ],
              "path": [
                "search"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "{{WorldsSearchName}}",
                  "description": "Artist Name or Artist Brand"
                },
                {
                  "key": "entities[]",
                  "value": "usersAll"
                }
              ]
            },
            "description": "Returns searched users."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Social",
      "item": [
        {
          "name": "Get follow counts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/follow_counts?targetId={{UserId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "follow_counts"
              ],
              "query": [
                {
                  "key": "targetId",
                  "value": "{{UserId}}",
                  "description": "ID of user you wanted to get follow counts"
                }
              ]
            },
            "description": "`Private`\n\nGets user's follow counts per user type (user and artist): \n`followerCount`, `followingCount`"
          },
          "response": []
        },
        {
          "name": "Get User Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/status?targetId={{UserId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "status"
              ],
              "query": [
                {
                  "key": "targetId",
                  "value": "{{UserId}}",
                  "description": "ID of user you wanted to get follow counts"
                }
              ]
            },
            "description": "`Private`\n\nGets user's Status"
          },
          "response": []
        },
        {
          "name": "Get user follower list",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/followers?targetId={{UserId}}&pageSize=25&nextToken=&joinObjects=true&targetType=user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "followers"
              ],
              "query": [
                {
                  "key": "targetId",
                  "value": "{{UserId}}",
                  "description": "ID of user you wanted to get followers list"
                },
                {
                  "key": "pageSize",
                  "value": "25",
                  "description": "Number of users you wanted to get on your list"
                },
                {
                  "key": "nextToken",
                  "value": "",
                  "description": "First page should pass nextToken=null. Subsequent pages should pass nextToken equal to the last received nextToken. The end is reached when you receive a 'STOP' nextToken"
                },
                {
                  "key": "joinObjects",
                  "value": "true",
                  "description": "To join all user objects or not"
                },
                {
                  "key": "targetType",
                  "value": "user",
                  "description": "Target's type. Either artist or user"
                }
              ]
            },
            "description": "`Private`\n\nGets user's follower list."
          },
          "response": []
        },
        {
          "name": "Get user following list",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/following?targetId={{FanUserId}}&pageSize=25&nextToken=&joinObjects=true&targetType=user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "following"
              ],
              "query": [
                {
                  "key": "targetId",
                  "value": "{{FanUserId}}",
                  "description": "ID of user you wanted to get followers list"
                },
                {
                  "key": "pageSize",
                  "value": "25",
                  "description": "Number of users you wanted to get on your list"
                },
                {
                  "key": "nextToken",
                  "value": "",
                  "description": "First page should pass nextToken=null. Subsequent pages should pass nextToken equal to the last received nextToken. The end is reached when you receive a 'STOP' nextToken"
                },
                {
                  "key": "joinObjects",
                  "value": "true",
                  "description": "To join all user objects or not"
                },
                {
                  "key": "targetType",
                  "value": "user",
                  "description": "Target's type. Either artist or user"
                }
              ]
            },
            "description": "`Private`\n\nGets user's following list."
          },
          "response": []
        },
        {
          "name": "Get user friend list",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/followers?targetId={{UserId}}&pageSize=25&nextToken=&joinObjects=true&targetType=user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "followers"
              ],
              "query": [
                {
                  "key": "targetId",
                  "value": "{{UserId}}",
                  "description": "ID of user you wanted to get followers list"
                },
                {
                  "key": "pageSize",
                  "value": "25",
                  "description": "Number of users you wanted to get on your list"
                },
                {
                  "key": "nextToken",
                  "value": "",
                  "description": "First page should pass nextToken=null. Subsequent pages should pass nextToken equal to the last received nextToken. The end is reached when you receive a 'STOP' nextToken"
                },
                {
                  "key": "joinObjects",
                  "value": "true",
                  "description": "To join all user objects or not"
                },
                {
                  "key": "targetType",
                  "value": "user",
                  "description": "Target's type. Either artist or user"
                }
              ]
            },
            "description": "`Private`\n\nGets user's friend list."
          },
          "response": []
        },
        {
          "name": "Get Friends",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "sec-ch-ua",
                "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "Referer",
                "value": "https://rvo-sdk.worstage.co/"
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1YmVmNmFlZS1jMDY1LTQ3ZmItYjliMC1jNGUyNTlhN2RjMzIiLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCRGUjY0WjNGdlpMMnZSYlV2ODhzcUx1RUh5VDhNLlZ3RUI4NFpsd24zT3hmRS4uYnZRUFlnNiIsImlhdCI6MTY4MDU1NzAxMiwiZXhwIjoxNjgxMTYxODEyfQ.XMP4Op8b3mNSUuTWNsnA1C4BO7sZijUIBrDufoMRjHQ"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              }
            ],
            "url": {
              "raw": "{{host}}/social/friends?targetId={{WorldsArtistBrandId}}&targetType=user&pageSize=20&joinObjects=true",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "friends"
              ],
              "query": [
                {
                  "key": "targetId",
                  "value": "{{WorldsArtistBrandId}}",
                  "description": "ID of user you wanted to get followers list"
                },
                {
                  "key": "targetType",
                  "value": "user",
                  "description": "Target's type. Either artist or user"
                },
                {
                  "key": "pageSize",
                  "value": "20",
                  "description": "Number of users you wanted to get on your list"
                },
                {
                  "key": "joinObjects",
                  "value": "true",
                  "description": "To join all user objects or not"
                }
              ]
            },
            "description": "Get friends of the user."
          },
          "response": []
        },
        {
          "name": "Check if user is following particular user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/is_following?followerId={{FanUserId}}&targetId={{UserId}}&followerType=user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "is_following"
              ],
              "query": [
                {
                  "key": "followerId",
                  "value": "{{FanUserId}}",
                  "description": "ID of target user1 you wanted to check another user against"
                },
                {
                  "key": "targetId",
                  "value": "{{UserId}}",
                  "description": "ID of target user2 that will be checked if user1 is following"
                },
                {
                  "key": "followerType",
                  "value": "user",
                  "description": "Target's type. Either artist or user"
                }
              ]
            },
            "description": "`Private`\n\nChecks if user is following another user.\n\nRequest param\n\n`fromId`: ID of user1 you wanted to check another user against\n\n`toId`: ID of other user2 that will be checked if user1 is following"
          },
          "response": []
        },
        {
          "name": "Get Blocked Users",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1YmVmNmFlZS1jMDY1LTQ3ZmItYjliMC1jNGUyNTlhN2RjMzIiLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCQxaFpQeWtTeWJpaENoRWtPekozZEZPUlVMeUJSNEtjUnpmdjRZS0xuTVRRWnJjRkhiVVE5SyIsImlhdCI6MTY4MDU0OTQzMSwiZXhwIjoxNjgxMTU0MjMxfQ.ffLWNHdXMT__qq2Or0rYeH7NPeU53r-cd1gtSCIfeLc",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1YmVmNmFlZS1jMDY1LTQ3ZmItYjliMC1jNGUyNTlhN2RjMzIiLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCQxaFpQeWtTeWJpaENoRWtPekozZEZPUlVMeUJSNEtjUnpmdjRZS0xuTVRRWnJjRkhiVVE5SyIsImlhdCI6MTY4MDU0OTQzMSwiZXhwIjoxNjgxMTU0MjMxfQ.ffLWNHdXMT__qq2Or0rYeH7NPeU53r-cd1gtSCIfeLc",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{host}}/social/blocks?pageSize=100&joinObjects=true&type=Blocking",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "blocks"
              ],
              "query": [
                {
                  "key": "pageSize",
                  "value": "100",
                  "description": "Number of users you wanted to get on your list"
                },
                {
                  "key": "joinObjects",
                  "value": "true",
                  "description": "To join all user objects or not"
                },
                {
                  "key": "type",
                  "value": "Blocking",
                  "description": "Get users that the current user blocked."
                }
              ]
            },
            "description": "Gets all blocked users of the account."
          },
          "response": []
        },
        {
          "name": "Get Blockers",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1YmVmNmFlZS1jMDY1LTQ3ZmItYjliMC1jNGUyNTlhN2RjMzIiLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCQxaFpQeWtTeWJpaENoRWtPekozZEZPUlVMeUJSNEtjUnpmdjRZS0xuTVRRWnJjRkhiVVE5SyIsImlhdCI6MTY4MDU0OTQzMSwiZXhwIjoxNjgxMTU0MjMxfQ.ffLWNHdXMT__qq2Or0rYeH7NPeU53r-cd1gtSCIfeLc",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1YmVmNmFlZS1jMDY1LTQ3ZmItYjliMC1jNGUyNTlhN2RjMzIiLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCQxaFpQeWtTeWJpaENoRWtPekozZEZPUlVMeUJSNEtjUnpmdjRZS0xuTVRRWnJjRkhiVVE5SyIsImlhdCI6MTY4MDU0OTQzMSwiZXhwIjoxNjgxMTU0MjMxfQ.ffLWNHdXMT__qq2Or0rYeH7NPeU53r-cd1gtSCIfeLc",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{host}}/social/blocks?pageSize=100&joinObjects=true&type=Blocker",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "blocks"
              ],
              "query": [
                {
                  "key": "pageSize",
                  "value": "100",
                  "description": "To join all user objects or not"
                },
                {
                  "key": "joinObjects",
                  "value": "true",
                  "description": "To join all user objects or not"
                },
                {
                  "key": "type",
                  "value": "Blocker",
                  "description": "Get users that blocked the current user"
                }
              ]
            },
            "description": "Gets all the accounts that blocked the current user"
          },
          "response": []
        },
        {
          "name": "Get Friends and Following",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "sec-ch-ua",
                "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "Referer",
                "value": "https://rvo-sdk.worstage.co/"
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1YmVmNmFlZS1jMDY1LTQ3ZmItYjliMC1jNGUyNTlhN2RjMzIiLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCRGUjY0WjNGdlpMMnZSYlV2ODhzcUx1RUh5VDhNLlZ3RUI4NFpsd24zT3hmRS4uYnZRUFlnNiIsImlhdCI6MTY4MDU1NzAxMiwiZXhwIjoxNjgxMTYxODEyfQ.XMP4Op8b3mNSUuTWNsnA1C4BO7sZijUIBrDufoMRjHQ"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              }
            ],
            "url": {
              "raw": "{{host}}/social/relationships?targetId={{UserId}}&targetType=user&joinObjects=true&pageSize=5",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "relationships"
              ],
              "query": [
                {
                  "key": "targetId",
                  "value": "{{UserId}}",
                  "description": "ID of user you wanted to get following and friends list"
                },
                {
                  "key": "targetType",
                  "value": "user",
                  "description": "Target's type. Either artist or user"
                },
                {
                  "key": "joinObjects",
                  "value": "true",
                  "description": "To join all user objects or not"
                },
                {
                  "key": "pageSize",
                  "value": "5",
                  "description": "Number of users you wanted to get on your list"
                }
              ]
            },
            "description": "Get all the user's friends and following users."
          },
          "response": []
        },
        {
          "name": "Block a user",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "content-type",
                "value": "application/json"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1YmVmNmFlZS1jMDY1LTQ3ZmItYjliMC1jNGUyNTlhN2RjMzIiLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCQxaFpQeWtTeWJpaENoRWtPekozZEZPUlVMeUJSNEtjUnpmdjRZS0xuTVRRWnJjRkhiVVE5SyIsImlhdCI6MTY4MDU0OTQzMSwiZXhwIjoxNjgxMTU0MjMxfQ.ffLWNHdXMT__qq2Or0rYeH7NPeU53r-cd1gtSCIfeLc"
              },
              {
                "key": "origin",
                "value": "https://rvo-sdk.worstage.co"
              },
              {
                "key": "referer",
                "value": "https://rvo-sdk.worstage.co/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "cross-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userIdToBlock\": \"e22fcb12-dde6-4775-b431-5211303a55f2\",\n    \"shouldBlock\": true\n}"
            },
            "url": {
              "raw": "{{host}}/social/block",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "block"
              ]
            },
            "description": "Blocks a user. Blocked user is not able to search the blocking user."
          },
          "response": []
        },
        {
          "name": "Follow/unfollow user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"targetId\": \"{{FanUserId}}\",\n    \"follow\": true, \n    \"targetType\": \"user\",\n    \"followerType\": \"user\",\n    \"followerId\": \"{{UserId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/follow",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "follow"
              ]
            },
            "description": "`Private`\n\nFollows or unfollows a user.\n\n\n#### Request body\n\n`targetId`: ID of target user that will be followed\n\n`follow`: To follow target user or not. Pass true or false value\n\n`targetType`: Target's type. Either artist or user\n\n`followerType`: Follower's type. Either artist or user\n\n`followerId`: ID of user that will follow target user"
          },
          "response": []
        },
        {
          "name": "Post user activity status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"followerType\": \"user\",\n    \"status\": \"active\",\n    \"targetId\": \"{{UserId}}\", \n    \"targetType\": \"user\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/status",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "status"
              ]
            },
            "description": "`Private`\n\nFollows or unfollows a user.\n\n\n#### Request body\n\n`followerType`: Follower's type. Either artist or user\n\n`status`: Status to set to user. Active or away\n\n`targetId`: ID of target user that will be followed\n\n`targetType`: Target's type. Either artist or user"
          },
          "response": []
        },
        {
          "name": "Get user activity status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"followerType\": \"user\",\n    \"status\": \"active\",\n    \"targetId\": \"{{UserId}}\", \n    \"targetType\": \"user\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/status?targetId={{FanUserId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "status"
              ],
              "query": [
                {
                  "key": "targetId",
                  "value": "{{FanUserId}}",
                  "description": "ID of the user you want to check the status with"
                }
              ]
            },
            "description": "`Private`\n\nGets user's activity status\n\n#### Request body\n\n`followerType`: Follower's type. Either artist or user\n\n`status`: Status to get to user. Active or away\n\n`targetId`: ID of target user that will be followed\n\n`targetType`: Target's type. Either artist or user"
          },
          "response": []
        },
        {
          "name": "Test redis emitter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/social/testRedisEmitter",
              "host": [
                "{{host}}"
              ],
              "path": [
                "social",
                "testRedisEmitter"
              ]
            },
            "description": "`Private`\n\nTests redis emitter"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Song List",
      "item": [
        {
          "name": "Get event song list",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"Verify if data type an array\", function () {",
                  "    let data = pm.response.json();",
                  "",
                  "    pm.expect(data).to.be.an('array');",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/songlist/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "songlist",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to get the song list"
                }
              ]
            },
            "description": "`Private`\n\nGets the song list of an event."
          },
          "response": []
        },
        {
          "name": "Add event song",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"Verify if song title matched with generated random title\", function () {",
                  "    let data = pm.response.json();",
                  "",
                  "    pm.expect(data.songTitle).to.be.a('string');",
                  "    pm.expect(data.songTitle).to.include(pm.variables.get('songTitle'));",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"songTitle\": \"{{SongTitle}}\",\n\t\"eventId\": \"{{EventId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/songlist",
              "host": [
                "{{host}}"
              ],
              "path": [
                "songlist"
              ]
            },
            "description": "`Private`\n\nAdd a song the the event's song list by suppling the `eventId` and a song title in request body."
          },
          "response": []
        },
        {
          "name": "Delete event song",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// If songId parameter is empty, it runs the following script to supply a song",
                  "",
                  "let songTitle = Math.random().toString(36).substring(1,9);",
                  "pm.variables.set(\"songTitle\", songTitle);",
                  "",
                  "const options = {",
                  "    url: `${pm.variables.get('host')}/songlist/`,",
                  "    method: 'POST',",
                  "    header: { ",
                  "        'Authorization': `Bearer ${pm.variables.get('token')}`,",
                  "        'content-type': 'application/json' },",
                  "    body: {",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify({",
                  "            \"songTitle\": songTitle,",
                  "            \"eventId\": `${pm.variables.get('EventId')}`",
                  "        })",
                  "    }",
                  "};",
                  "",
                  "pm.sendRequest(options, function (error, result) {",
                  "    let data = result.json();",
                  "    if (error) {",
                  "        console.log(error);",
                  "    }",
                  "    else {",
                  "        pm.variables.set(\"SongId\", data.id);",
                  "        console.log(`Song ${data.songTitle} has been deleted!`);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{host}}/songlist/:eventId/:songId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "songlist",
                ":eventId",
                ":songId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to delete the song list from"
                },
                {
                  "key": "songId",
                  "value": "{{SongId}}",
                  "description": "ID of the song you wanted to delete"
                }
              ]
            },
            "description": "`Private`\n\nDelete a song the the event's song list."
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const songTitle = Math.random().toString(36).substring(1,9);",
              "",
              "pm.variables.set(\"SongTitle\", \"Song\"+songTitle);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "SuperUser",
      "item": [
        {
          "name": "Refund",
          "item": [
            {
              "name": "Refund ticket",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/refundTicket",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "refundTicket"
                  ]
                },
                "description": "`Private` `Superuser`\n\nIssues a refund for a ticket. Supply `ticketId` in request body."
              },
              "response": []
            },
            {
              "name": "Refund subscription",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"subscriptionId\": \"{{SubscriptionId}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/refundSubscription",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "refundSubscription"
                  ]
                },
                "description": "Issues refund for subscription."
              },
              "response": []
            },
            {
              "name": "Refund other items",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"paymentInfoId\": \"68a776fa-a62e-4d6b-98dc-4061bdc51af3\", \n    \"refundReason\": \"refund reason\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/refundLineItem",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "refundLineItem"
                  ]
                },
                "description": "`Private` `Superuser`\n\nThis is used to issue refunds for afterparty, merch, bundle and meet and greet."
              },
              "response": []
            }
          ]
        },
        {
          "name": "Event",
          "item": [
            {
              "name": "Search event",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/allEvents?s=test",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "allEvents"
                  ],
                  "query": [
                    {
                      "key": "s",
                      "value": "test"
                    }
                  ]
                },
                "description": "This is used to search for an event. Search string can be done in Params > Query Params > Value"
              },
              "response": []
            },
            {
              "name": "Refresh Generic Event / Artist Brand / Ticket / User",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/refresh/:id",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "refresh",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{UserId}}",
                      "description": "ID of the entity you wanted to refresh: event, artist, ticket or user"
                    }
                  ]
                },
                "description": "`Private` `Superuser`\n\n\nThis refreshes an entity info and get the latest data from response"
              },
              "response": []
            },
            {
              "name": "Get ticket payment info",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/superuser/payment_info/tickets/:ticketId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "payment_info",
                    "tickets",
                    ":ticketId"
                  ],
                  "variable": [
                    {
                      "key": "ticketId",
                      "value": "{{TicketId}}",
                      "description": "ID of ticket you wanted to get payment inf"
                    }
                  ]
                },
                "description": "`Private`   `Superuser`\n\nGets payment information of a event ticket."
              },
              "response": []
            },
            {
              "name": "Get latest payment info",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/payment_info/:email",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "payment_info",
                    ":email"
                  ],
                  "variable": [
                    {
                      "key": "email",
                      "value": "{{FanUserEmail}}",
                      "description": "Email of the fan you wanted to get payment info"
                    }
                  ]
                },
                "description": "`Private`   `Superuser`\n\nGets latest payment info"
              },
              "response": []
            },
            {
              "name": "Get all event payments in",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{EventId}}\", \n    \"artistBrandId\": \"{{ArtistBrandId}}\",\n    \"dateStart\": \"alltime\",\n    \"dateEnd\": \"alltime\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/all_payments_in",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "all_payments_in"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get all event payments out",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"{{EventId}}\", \n    \"artistBrandId\": \"{{ArtistBrandId}}\",\n    \"dateStart\": \"alltime\",\n    \"dateEnd\": \"alltime\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/all_payments_out",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "all_payments_out"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(Negative testing) Ticket not found",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/superuser/payment_info/tickets",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "payment_info",
                    "tickets"
                  ]
                },
                "description": "Negative testing for Tickets. Must return an error 404."
              },
              "response": []
            },
            {
              "name": "Refund payment",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"paymentInfoId\": \"9849d7c3-bc01-4df6-844c-98274a99439c\", \n    \"refundReason\": \"refund reason\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/refundPayment",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "refundPayment"
                  ]
                },
                "description": "`Private` `Superuser`\n\nIssues a refund for the provided `paymentInfoId` and `ticketId`."
              },
              "response": []
            },
            {
              "name": "Duplicate Event",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"eventId\": \"testmhstagingapitests-event-name0huj8aa\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/duplicate_event_artist_brand_demo",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "duplicate_event_artist_brand_demo"
                  ]
                },
                "description": "`Private` `Superuser`\n\nThis is used to duplicate an event including artist brand, chat log, afterparty event, event bundles and then creates demo config."
              },
              "response": []
            },
            {
              "name": "Change merch size",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI3MjlkMTMyZC1iMmE5LTRmMmItOGM4YS02MDY2NWFkMTFlNmUiLCJhcnRpc3RCcmFuZElkIjoiZWQzZGEyYmItYjIyZS00MmVlLTkyN2UtMTU3ZjkzNjk0MGFjIiwiaWF0IjoxNjU2MTAzMDI4LCJleHAiOjE2NTY3MDc4Mjh9.MXguFWee7FVnfen8t3D23XHbsjEe_8Kv7g5Z2NYW1AA",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{ \n    \"paymentInfoId\": \"9a7624e9-778c-4131-9c44-55ab7b967ff4\", \n    \"variantId\": \"0995e85b-7278-4953-ada0-10eb5c2c05db\", \n    \"variantInfo\": {\n            \"SIZE\": \"MEDIUM\"\n        }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/changeMerchVariantInfo",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "changeMerchVariantInfo"
                  ]
                },
                "description": "`Private` `Superuser`\n\nThis is used to change purchased goods' merch size."
              },
              "response": []
            },
            {
              "name": "Change purchased goods shipping address",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"paymentInfoId\": \"9801c61f-7266-4db4-9369-f937141de9e6\", \n\t\"location\": {\n\t\t\"address\": {\n\t\t\t\"city\": \"new location city 001\",\n\t\t\t\"country_code\": \"OH\",\n\t\t\t\"fullName\": \"FullName+ random name\",\n\t\t\t\"address1\": \"788  Rogers Street\",\n\t\t\t\"line2\": \"line 2\",\n\t\t\t\"province_code\": \"Ohio\",\n\t\t\t\"raw\": \"788  Rogers Street Sharonville Ohio 45241\",\n\t\t\t\"zip\": \"45241\",\n\t\t\t\"manual\": true,\n\t\t\t\"phone\": \"567-277-1685\"\n\t\t}\n\t},\n\t\"noLogin\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/changeShippingAddress",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "changeShippingAddress"
                  ]
                },
                "description": "`Private` `Superuser`\n\nThis is used to change purchased goods' shipping address."
              },
              "response": []
            },
            {
              "name": "Resend ticket to email",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ticketId\": \"\", \n    \"email\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/resendTicket",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "resendTicket"
                  ]
                },
                "description": "`Private` `Superuser`\n\nThis is used to resend email containing ticket information to the target email address."
              },
              "response": []
            },
            {
              "name": "Delete event ticket",
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/ticket/:eventId/:ticketId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "ticket",
                    ":eventId",
                    ":ticketId"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "",
                      "description": "ID of the event where the ticket is associated with"
                    },
                    {
                      "key": "ticketId",
                      "value": "",
                      "description": "ID of the ticket you wanted to delete"
                    }
                  ]
                },
                "description": "`Private` `Superuser`\n\nThis is used to delete an event ticket."
              },
              "response": []
            },
            {
              "name": "Delete all events",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{host}}/superuser/artist_brands/:artistBrandId/events",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "artist_brands",
                    ":artistBrandId",
                    "events"
                  ],
                  "variable": [
                    {
                      "key": "artistBrandId",
                      "value": "",
                      "description": "ID of artist brand whose events will be deleted"
                    }
                  ]
                },
                "description": "`Private`   `Superuser`\n\nDeletes all events of the artist brand.\n\nConditions:\nMust be superuser, artist brands slug should have \"test\" and no events that has sales."
              },
              "response": []
            }
          ]
        },
        {
          "name": "Front",
          "item": [
            {
              "name": "Get Front inbox",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/front/inboxes",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "front",
                    "inboxes"
                  ]
                },
                "description": "`Private` `Superuser`\n\nThis is used to get Front app's inbox content"
              },
              "response": []
            },
            {
              "name": "Export Front inbox",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"start\": \"\", \n    \"end\": \"\", \n    \"inboxId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/front/export",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "front",
                    "export"
                  ]
                },
                "description": "`Private` `Superuser`\n\nThis is used to get latest Front app inbox export."
              },
              "response": []
            },
            {
              "name": "Create Front export",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"start\": \"\", \n    \"end\": \"\", \n    \"inboxId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/superuser/front/export",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "superuser",
                    "front",
                    "export"
                  ]
                },
                "description": "`Private` `Superuser`\n\nThis is used to create a Front app inbox export."
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get all artist brands",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/allArtistBrands",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "allArtistBrands"
              ]
            },
            "description": "Gets list of all artist brands' slug and display name."
          },
          "response": []
        },
        {
          "name": "Search email",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/allEmails?s=@gmail",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "allEmails"
              ],
              "query": [
                {
                  "key": "s",
                  "value": "@gmail",
                  "description": "Email string to search"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nThis is used to search for an email. Search string can be done in Params > Query Params > Value"
          },
          "response": []
        },
        {
          "name": "Get recent sent emails",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/sent_emails/:email",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "sent_emails",
                ":email"
              ],
              "variable": [
                {
                  "key": "email",
                  "value": "{{FanUserEmail}}"
                }
              ]
            },
            "description": "`Private`   `Superuser`\n\nGets an array of emails sent for the last 30 seconds."
          },
          "response": []
        },
        {
          "name": "Get All Emails With Receipt",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/superuser/allEmailsWithReciept",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "allEmailsWithReciept"
              ]
            },
            "description": "`Private` `Superuser`\n\nGets users with receipts."
          },
          "response": []
        },
        {
          "name": "Get detailed user info",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/detailed_user/:email?refresh=true",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "detailed_user",
                ":email"
              ],
              "query": [
                {
                  "key": "refresh",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "key": "email",
                  "value": "{{FanUserEmail}}",
                  "description": "Email of the user you wanted to get info"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nGets user's detailed information."
          },
          "response": []
        },
        {
          "name": "Clear Cache",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/superuser/clear_cache/temp/:key",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "clear_cache",
                "temp",
                ":key"
              ],
              "variable": [
                {
                  "key": "key",
                  "value": "user",
                  "description": "Clears cache for the selected key. Available keys:\nuser, artistBrand, accessCodes, salesTax, location"
                }
              ]
            },
            "description": "`PrivateSuperuser`\n\nClears cache for the selected key.  \nAvailable keys:  \n  \n`user`"
          },
          "response": []
        },
        {
          "name": "Get all Avatar Images",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/superuser/allavatarImages",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "allavatarImages"
              ]
            },
            "description": "`Private` `Superuser`\n\nGets user's avatar images"
          },
          "response": []
        },
        {
          "name": "Get All ArtistBrands with Shopify",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/superuser/allShopifyArtistBrands",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "allShopifyArtistBrands"
              ]
            },
            "description": "`Private` `Superuser`\n\nGets all Artist Brands with Shopify connected."
          },
          "response": []
        },
        {
          "name": "Refresh Banned Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/superuser/refreshBannedUsers",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "refreshBannedUsers"
              ]
            },
            "description": "Refreshes and updates banned user list."
          },
          "response": []
        },
        {
          "name": "Create vendor account",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{UserEmail}}\",\n    \"name\": \"{{getRandomString}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/vendorAccount",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "vendorAccount"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create vendor key",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{UserId}}\",\n    \"apiKeyName\": \"{{getRandomString}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/vendorKey",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "vendorKey"
              ]
            },
            "description": "Requires `developer`, `devKey`"
          },
          "response": []
        },
        {
          "name": "Issue True Up payment",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"artistBrandId\": \"\", \n    \"paymentMethodId\": \"\", \n    \"price\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/trueup/intent",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "trueup",
                "intent"
              ]
            },
            "description": "`Private` `Superuser`\n\nIssues a true up payment."
          },
          "response": []
        },
        {
          "name": "Refresh Entity Type",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"entityType\": \"curatedEvents\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/refresh/entity",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "refresh",
                "entity"
              ]
            },
            "description": "`Private`  `Superuser`\n\nThis is used to refresh an entity. Entity values available are `artist_brand`, `event`, `user`, `ticket`, and `curatedEvents`"
          },
          "response": []
        },
        {
          "name": "Search artist or event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-typesense-api-key",
                "value": "tJv6XFGrfWG8v2nMcZRsiKRsEir5cJQV",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"searches\": [{\n\t\t\"collection\": \"events\",\n\t\t\"q\": \"\",\n\t\t\"query_by\": \"displayName,artistName\",\n\t\t\"filter_by\": \"state:RECOMMENDED\",\n\t\t\"sort_by\": \"artistName:asc\",\n\t\t\"typo_tokens_threshold\": 0,\n\t\t\"drop_tokens_threshold\": 0,\n\t\t\"split_join_tokens\": false\n\t}, {\n\t\t\"collection\": \"artists\",\n\t\t\"q\": \"a\",\n\t\t\"query_by\": \"artistName\",\n\t\t\"num_typos\": \"0\",\n\t\t\"split_join_tokens\": false,\n\t\t\"sort_by\": \"artistName:asc\",\n\t\t\"typo_tokens_threshold\": 0,\n\t\t\"drop_tokens_threshold\": 0\n\t}, {\n\t\t\"collection\": \"events\",\n\t\t\"q\": \"a\",\n\t\t\"query_by\": \"displayName,artistName\",\n\t\t\"filter_by\": \"state:!=[ENDED, PAST, RECOMMENDED]\",\n\t\t\"num_typos\": \"0,0\",\n\t\t\"split_join_tokens\": false,\n\t\t\"sort_by\": \"artistName:asc\",\n\t\t\"typo_tokens_threshold\": 0,\n\t\t\"drop_tokens_threshold\": 0\n\t}, {\n\t\t\"collection\": \"events\",\n\t\t\"q\": \"a\",\n\t\t\"query_by\": \"displayName,artistName\",\n\t\t\"filter_by\": \"state:[ENDED, PAST]\",\n\t\t\"num_typos\": \"0,0\",\n\t\t\"split_join_tokens\": false,\n\t\t\"sort_by\": \"artistName:asc\",\n\t\t\"typo_tokens_threshold\": 0,\n\t\t\"drop_tokens_threshold\": 0\n\t}]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "https://pm0x6qktj5f7bn2ep-1.a1.typesense.net/multi_search",
              "protocol": "https",
              "host": [
                "pm0x6qktj5f7bn2ep-1",
                "a1",
                "typesense",
                "net"
              ],
              "path": [
                "multi_search"
              ]
            },
            "description": "`Private` `Superuer`\n\nThis is used in Home page. Used to search artist brand user and/or events. \n\nInput search query in request body > \"q\" property"
          },
          "response": []
        },
        {
          "name": "Add Wearables for a user",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userIds\":[\"{{UserId}}\"],\n    \"wearableIds\":[\"5f0acfc1-c726-48f4-93d1-0a76ac2654d5\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/add_wearables_for_user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "add_wearables_for_user"
              ]
            },
            "description": "Add Wearables to a User."
          },
          "response": []
        },
        {
          "name": "Verify Daily Password",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{host}}/superuser/verifyDailyPassword/:password",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "verifyDailyPassword",
                ":password"
              ],
              "variable": [
                {
                  "key": "password",
                  "value": "",
                  "description": "Daily password to access the Admin"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nConfirms the superuser Daily Password"
          },
          "response": []
        },
        {
          "name": "Cancel subscription",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/users/:userId/subscriptions/:subscriptionId/cancel",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "users",
                ":userId",
                "subscriptions",
                ":subscriptionId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "",
                  "description": "ID of the user you wanted to unsubscribe from an artist"
                },
                {
                  "key": "subscriptionId",
                  "value": "",
                  "description": "ID of subscription you wanted the user to unsubscribe from"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nCancels user's subscription from an artist."
          },
          "response": []
        },
        {
          "name": "Cache prime sales tax",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"price\": 999,\n    \"artistBrandId\": \"{{ArtistBrandId}}\",\n    \"expiry\": 120\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/primeSalesTaxCache",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "primeSalesTaxCache"
              ]
            },
            "description": "`Private` `Superuser`\n\nCaches prime sales tax."
          },
          "response": []
        },
        {
          "name": "Change user email",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"\", \n    \"newEmail\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/changeEmail",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "changeEmail"
              ]
            },
            "description": "`Private` `Superuser`\n\nThis is used to change user's email."
          },
          "response": []
        },
        {
          "name": "Cache prime access code",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"artistBrandId\": \"{{ArtistBrandId}}\",\n    \"eventId\": \"{{EventId}}\",\n    \"expiry\": 120\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/primeAccessCodeCache",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "primeAccessCodeCache"
              ]
            },
            "description": "`Private` `Superuser`\n\nCaches prime access code."
          },
          "response": []
        },
        {
          "name": "Clear cache",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "",
                "value": "",
                "description": "Key that will clear the cache. Available keys: user, artistBrand, accessCodes, salesTax, location",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/clear_cache/:key",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "clear_cache",
                ":key"
              ],
              "variable": [
                {
                  "key": "key",
                  "value": "user",
                  "description": "Clears cache for the selected key. Available keys:\nuser, artistBrand, accessCodes, salesTax, location"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nClears cache for the selected key.\nAvailable keys:<br />\n`user` <br />\n`artistBrand`<br />\n`accessCodes`<br />\n`salesTax`<br />\n`location`<br />"
          },
          "response": []
        },
        {
          "name": "Update Superuser status",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{host}}/superUser/toggleSuperUser/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superUser",
                "toggleSuperUser",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "b4f666e1-a831-443b-87c9-78fffccaf244",
                  "description": "ID or the email of the user you wanted to toggle superuser status on or off"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nThis is used to toggle on or off user's superuser status."
          },
          "response": []
        },
        {
          "name": "Delete user by email",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/superuser/:email",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                ":email"
              ],
              "variable": [
                {
                  "key": "email",
                  "value": "",
                  "description": "Email of the user you wanted to delete"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nThis is used to delete a user by email."
          },
          "response": []
        },
        {
          "name": "Backfill User Roles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/superuser/backfill_user_roles",
              "host": [
                "{{host}}"
              ],
              "path": [
                "superuser",
                "backfill_user_roles"
              ]
            }
          },
          "response": []
        }
      ],
      "description": "This is exclusive to Superuser accounts only. Since this needs a superuser account, authentication is required on all routes and are `Private`."
    },
    {
      "name": "Tickets",
      "item": [
        {
          "name": "Get my tickets",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{FanUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/tickets/auth/get-tickets",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tickets",
                "auth",
                "get-tickets"
              ]
            },
            "description": "`Private`\n\nGets tickets of the logged in user."
          },
          "response": []
        },
        {
          "name": "Get ticket information",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/tickets/:ticketId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tickets",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "{{TicketId}}",
                  "description": "ID of the ticket you wanted to get information"
                }
              ]
            },
            "description": "`Private`\n\nGets the ticket information of the supplied `ticketId`."
          },
          "response": []
        },
        {
          "name": "Get guest list tickets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/tickets/guest-list/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tickets",
                "guest-list",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to get guest lists' free tickets"
                }
              ]
            },
            "description": "`Private`\n\nGets free tickets of the event's guest lists."
          },
          "response": []
        },
        {
          "name": "Get event referrals",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tickets/event/:eventId/referrals",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tickets",
                "event",
                ":eventId",
                "referrals"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of event you wanted to get referrers"
                }
              ]
            },
            "description": "`Public`\n\nThis gets the list of referrer through which event ticket purchased."
          },
          "response": []
        },
        {
          "name": "Create ticket",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"free@momenthouse.com\",\n\t\"eventId\": \"{{EventId}}\",\n\t\"ticketType\": \"admin\",\n\t\"sendEmail\": true,\n\t\"timezone\": \"America/Los_Angeles\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tickets",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tickets"
              ]
            },
            "description": "`Private`\n\nCreates a ticket and sends it to the email address indicated in request body.\n\nTo create a free ticket, set the following as request body:\n\n\n`email`: \"free@momenthouse.com\"\n\n`eventId`: {{EventId}}\n\n`ticketType`: \"free\""
          },
          "response": []
        },
        {
          "name": "Resend ticket",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{FanEmail}}\",\n\t\"eventId\": \"{{EventId}}\",\n    \"artistBrandSlug\": \"{{ArtistBrandSlug}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tickets/resend_ticket",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tickets",
                "resend_ticket"
              ]
            },
            "description": "`Public`\n\nResends an email that contains user's ticket link to the event indicated in the request body."
          },
          "response": []
        },
        {
          "name": "Resend guest list ticket",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"c5f67033-8be1-4ba9-a3a5-94d9f34b02e7\",\n    \"eventId\": \"{{EventId}}\",\n    \"artistBrandSlug\": \"{{ArtistBrandSlug}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tickets/resend_guest_list_ticket",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tickets",
                "resend_guest_list_ticket"
              ]
            },
            "description": "`Public`\n\nResends an email that contains user's ticket link to the event. Currently being used in Moment Settings > Guest list > Resend Ticket Email."
          },
          "response": []
        },
        {
          "name": "Generate ticket gift pdf",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"ticketId\": \"{{TicketId}}\",\n\t\"email\": \"{{FanEmail}}\",\n\t\"eventId\": \"{{EventId}}\",\n\t\"artistBrandId\": \"{{ArtistBrandId}}\"\n\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tickets/create-pdf",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tickets",
                "create-pdf"
              ]
            },
            "description": "`Private`\n\nGenerates a pdf that contains a free ticket information to the event indicated in request body."
          },
          "response": []
        },
        {
          "name": "Delete ticket",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tickets/:ticketId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tickets",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "",
                  "description": "ID of the ticket you wanted to delete"
                }
              ]
            },
            "description": "`Private`\n\nDeletes a ticket by removing a guest list from the event. Supply `ticketId` in the request body."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tours",
      "item": [
        {
          "name": "Get private tours",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv/shraybansal"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "url": {
              "raw": "{{host}}/tours/artist_brands/:artistBrandId/private",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tours",
                "artist_brands",
                ":artistBrandId",
                "private"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of the artist brand you wanted to get private tours"
                }
              ]
            },
            "description": "`Private`\n\nGets all artist brand's private/unpublished tours."
          },
          "response": []
        },
        {
          "name": "Get public tours",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "url": {
              "raw": "{{host}}/tours/artist_brands/:artistBrandId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tours",
                "artist_brands",
                ":artistBrandId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID of the artist brand you wanted to get public tours"
                }
              ]
            },
            "description": "`Public`\n\nGets all artist brand's public tours."
          },
          "response": []
        },
        {
          "name": "Get tour",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv/shraybansal"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "url": {
              "raw": "{{host}}/tours/:tourId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tours",
                ":tourId"
              ],
              "variable": [
                {
                  "key": "tourId",
                  "value": "{{TourId}}",
                  "description": "ID of the tour you wanted to get tour information"
                }
              ]
            },
            "description": "`Public`\n\nGets a single tour information by supplying `tourId`."
          },
          "response": []
        },
        {
          "name": "Create tour",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv/shraybansal"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{TourName}}\",\n    \"artistBrandId\": \"{{ArtistBrandId}}\",\n    \"events\": [\"{{EventId}}\"],\n    \"image\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tours",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tours"
              ]
            },
            "description": "`Private`\n\nCreates a tour by attaching existing event or events.\n\nThis can be done on UI via url: https://stage.mhcdn.tv/backstage"
          },
          "response": []
        },
        {
          "name": "Create ticket template",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv/shraybansal"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"ticket_template12\",\n\t\"ticketPrice\": 10001,\n\t\"ticketCap\": 100,\n\t\"serviceFeePct\": 500,\n\t\"serviceFeeFixed\": 50,\n\t\"eventConfig\": {\n\t\t\"Meet and Greet\": [\n\t\t\t\"14b8967e-1a86-46b8-9597-e29b38dd1678\"\n\t\t],\n\t\t\"VIP\": [\n\t\t\t\"14b8967e-1a86-46b8-9597-e29b38dd1678\"\n\t\t],\n\t\t\"General Admission\": [\n\t\t\t\"14b8967e-1a86-46b8-9597-e29b38dd1678\"\n\t\t]\n\t}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tours/:tourId/ticket_templates",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tours",
                ":tourId",
                "ticket_templates"
              ],
              "variable": [
                {
                  "key": "tourId",
                  "value": "{{TourId}}",
                  "description": "ID of the tour you wanted to create a ticket template"
                }
              ]
            },
            "description": "`Private`\n\nThis creates a ticket template by supplying `tourId`."
          },
          "response": []
        },
        {
          "name": "Set tour to public",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv/shraybansal"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"public\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tours/:tourId/set_public",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tours",
                ":tourId",
                "set_public"
              ],
              "variable": [
                {
                  "key": "tourId",
                  "value": "{{TourId}}",
                  "description": "ID of the tour you wanted to set to public"
                }
              ]
            },
            "description": "`Private`\n\nPublishes the tour and sets it to public."
          },
          "response": []
        },
        {
          "name": "Update ticket template",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv/shraybansal"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"ticket_template12\",\n\t\"ticketPrice\": 10001,\n\t\"ticketCap\": 100,\n\t\"serviceFeePct\": 500,\n\t\"serviceFeeFixed\": 50,\n\t\"eventConfig\": {\n\t\t\"Meet and Greet\": [\n\t\t\t\"14b8967e-1a86-46b8-9597-e29b38dd1678\"\n\t\t],\n\t\t\"VIP\": [\n\t\t\t\"14b8967e-1a86-46b8-9597-e29b38dd1678\"\n\t\t],\n\t\t\"General Admission\": [\n\t\t\t\"14b8967e-1a86-46b8-9597-e29b38dd1678\"\n\t\t]\n\t}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/v1/tours/:tourId/ticket_templates/:ticketTemplateId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "v1",
                "tours",
                ":tourId",
                "ticket_templates",
                ":ticketTemplateId"
              ],
              "variable": [
                {
                  "key": "tourId",
                  "value": "",
                  "description": "ID of the tour you wanted to update ticket template"
                },
                {
                  "key": "ticketTemplateId",
                  "value": "",
                  "description": "ID of the ticket template you wanted to update"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Group events",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv/shraybansal"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"parentId\": \"7aab40eb-54bf-468d-af30-c5a9173e85ff\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tours/:tourId/group_event",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tours",
                ":tourId",
                "group_event"
              ],
              "variable": [
                {
                  "key": "tourId",
                  "value": "{{TourId}}",
                  "description": "ID of the tour you wanted to group events in to"
                }
              ]
            },
            "description": "`Private`\n\nThis groups tour's events and sets a parent event. Fans with ticket to parent event can also access other events of the tour using the same ticket.\n\nTo set parent event, put the `parentId` (the parent event id) in request body."
          },
          "response": []
        },
        {
          "name": "Update tour",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv/shraybansal"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"name\": \"Updated {{TourName}}\", \n    \"image\": \"\", \n    \"events\":  [\"7aab40eb-54bf-468d-af30-c5a9173e85ff\",\"5dd68ff1-2c61-4303-8b12-bba80c8073db\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tours/:tourId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tours",
                ":tourId"
              ],
              "variable": [
                {
                  "key": "tourId",
                  "value": "{{TourId}}",
                  "description": "ID of the tour you wanted to update info"
                }
              ]
            },
            "description": "`Private`\n\nUpdates tour details and events attached."
          },
          "response": []
        },
        {
          "name": "Delete tour",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Pragma",
                "value": "no-cache"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              },
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
              },
              {
                "key": "Origin",
                "value": "https://www.mhcdn.tv"
              },
              {
                "key": "Sec-Fetch-Site",
                "value": "same-site"
              },
              {
                "key": "Sec-Fetch-Mode",
                "value": "cors"
              },
              {
                "key": "Sec-Fetch-Dest",
                "value": "empty"
              },
              {
                "key": "Referer",
                "value": "https://www.mhcdn.tv/shraybansal"
              },
              {
                "key": "Accept-Language",
                "value": "en-US,en;q=0.9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/tours/:tourId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "tours",
                ":tourId"
              ],
              "variable": [
                {
                  "key": "tourId",
                  "value": "",
                  "description": "ID of the tour you wanted to delete"
                }
              ]
            },
            "description": "`Private` \n\nDeletes a tour."
          },
          "response": []
        }
      ],
      "description": "Tours\n\nCan be access via this URL only, not accessible through the app UI:\nhttps://stage.mhcdn.tv/backstage",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const tourName = Math.random().toString(36).substring(1,9);",
              "",
              "pm.variables.set(\"TourName\", \"Postman-Tour\"+tourName);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Waitlist",
      "item": [
        {
          "name": "Get event waitlist",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/waitlist/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "waitlist",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}",
                  "description": "ID of the event you wanted to get the waitlist"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get the waitlist of an event. Event setting `Waitlist` should be enabled."
          },
          "response": []
        },
        {
          "name": "Join waitlist",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"email\": \"test.staging.mh+fan@gmail.com\", \n    \"location\": \"Philippines\", \n    \"eventId\": \"{{EventId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/waitlist/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "waitlist",
                ""
              ]
            },
            "description": "`Public`\n\nAllows a user to join the waiting list of an event. \n\nThis can be done from Artist page previously but currently, it is no longer available. To clarify."
          },
          "response": []
        },
        {
          "name": "Send email to waitlist",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventId\": \"{{EventId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/waitlist/send-email",
              "host": [
                "{{host}}"
              ],
              "path": [
                "waitlist",
                "send-email"
              ]
            },
            "description": "`Private` \n\nThis is used to send email to 50 waitlist users of event."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Worlds",
      "item": [
        {
          "name": "Party",
          "item": [
            {
              "name": "Get all parties",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/worlds/party/all",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "all"
                  ]
                },
                "description": "`Public`\n\nGets the list of all available parties"
              },
              "response": []
            },
            {
              "name": "Get party information",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party?partyId={{PartyId}}&accessCode={{PartyAccessCode}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party"
                  ],
                  "query": [
                    {
                      "key": "partyId",
                      "value": "{{PartyId}}",
                      "description": "ID of the worlds party"
                    },
                    {
                      "key": "accessCode",
                      "value": "{{PartyAccessCode}}",
                      "description": "Access code of the worlds party"
                    }
                  ]
                },
                "description": "`Public`\n\nGets the party's public information"
              },
              "response": []
            },
            {
              "name": "Get user list of joined parties",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/joined",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "joined"
                  ]
                },
                "description": "`Private`\n\nGets the list of parties joined by the currently logged user including past and present parties"
              },
              "response": []
            },
            {
              "name": "Get user party invites",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/invites",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "invites"
                  ]
                },
                "description": "`Private`\n\nGets the list of the party invites the currently logged user have"
              },
              "response": []
            },
            {
              "name": "Create a party",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"PartyId\", jsonData.id);",
                      "pm.environment.set(\"PartyAccessCode\", jsonData.accessCode);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Party created from Postman\",\n    \"isPublic\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/create",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "create"
                  ]
                },
                "description": "`Private`\n\nCreates a World party. Only requires party name in the request body"
              },
              "response": []
            },
            {
              "name": "Join party via access code",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partyId\": \"{{PartyId}}\",\n    \"notificationId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/:accessCode/join",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    ":accessCode",
                    "join"
                  ],
                  "variable": [
                    {
                      "key": "accessCode",
                      "value": "ZTVXQ",
                      "description": "Acess code of the worlds party"
                    }
                  ]
                },
                "description": "`Private`\n\nJoin party via access code"
              },
              "response": []
            },
            {
              "name": "Leave party via access code",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partyId\": \"{{PartyId}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/:accessCode/leave",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    ":accessCode",
                    "leave"
                  ],
                  "variable": [
                    {
                      "key": "accessCode",
                      "value": "{{PartyAccessCode}}",
                      "description": "Acess code of the worlds party"
                    }
                  ]
                },
                "description": "`Private`\n\nLeave party via access code"
              },
              "response": []
            },
            {
              "name": "Send party invite",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partyId\": \"{{PartyId}}\",\n    \"accessCode\": \"{{PartyAccessCode}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/send_invite/:userIdOrEmail",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "send_invite",
                    ":userIdOrEmail"
                  ],
                  "variable": [
                    {
                      "key": "userIdOrEmail",
                      "value": "{{UserId}}",
                      "description": "ID or email of the user you wanted to invite"
                    }
                  ]
                },
                "description": "`Private`\n\nSends a party invite to userId/email"
              },
              "response": []
            },
            {
              "name": "Decline party invite",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partyId\": \"{{PartyId}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/decline",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "decline"
                  ]
                },
                "description": "`Private`\n\nDecline a party invite"
              },
              "response": []
            },
            {
              "name": "Kick party member",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partyId\": \"{{PartyId}}\",\n    \"accessCode\": \"{{PartyAccessCode}}\",\n    \"userId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/kick",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "kick"
                  ]
                },
                "description": "`Private`\n\nKicks a party member"
              },
              "response": []
            },
            {
              "name": "Mute party member",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partyId\": \"{{PartyId}}\",\n    \"accessCode\": \"{{PartyAccessCode}}\",\n    \"userId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/mute",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "mute"
                  ]
                },
                "description": "`Private`\n\nMutes a party member. Can only be done by party leader."
              },
              "response": []
            },
            {
              "name": "Unmute party member",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partyId\": \"{{PartyId}}\",\n    \"accessCode\": \"{{PartyAccessCode}}\",\n    \"userId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/unmute",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "unmute"
                  ]
                },
                "description": "`Private`\n\nUnmutes a party member. Can only be done by party leader."
              },
              "response": []
            },
            {
              "name": "Revoke party invite",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partyId\": \"{{PartyId}}\",\n    \"accessCode\": \"{{PartyAccessCode}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/party/revoke_invite/:userId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "party",
                    "revoke_invite",
                    ":userId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "asdasds"
                    }
                  ]
                },
                "description": "`Private`\n\nRevoke party invite from a friend/user"
              },
              "response": []
            }
          ]
        },
        {
          "name": "Boards",
          "item": [
            {
              "name": "Post Image in Boards",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{FanUserToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\":\"Sample Title 0308202302\",\n  \"message\":\"Sample\",\n  \"image\": \"https://moment-house-worlds.s3.us-west-1.amazonaws.com/postImge/1678217676042_12719.jpg\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/worlds/threads/:worldId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "threads",
                    ":worldId"
                  ],
                  "variable": [
                    {
                      "key": "worldId",
                      "value": "{{WorldId}}",
                      "description": "ID of the Worlds"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Post a Link in the Thread",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "api.momenthousestage.com"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "en-US,en;q=0.9"
                  },
                  {
                    "key": "authorization",
                    "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5MjMzODkzNi1mOWVkLTQ0ZWQtODhiNC1mMGY0YmY4NzMyZTciLCJ2ZXJzaW9uSGFzaCI6IiQyYiQxMCQ2VkdrZ0hWWkltdkVQOG02Z0NybkFPZnpIZVVnS0l5aEhLbWFxRER6TVFiS0ZRa2Y4THAyYSIsImlhdCI6MTY3ODIyMDI5NiwiZXhwIjoxNjc4ODI1MDk2fQ.GDNYkkBYIq1eTnACaQsB4zJpk3DJxBg57RqLIOPbVMc"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "origin",
                    "value": "https://rvo-sdk.worstage.co"
                  },
                  {
                    "key": "referer",
                    "value": "https://rvo-sdk.worstage.co/"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"110\", \"Not A(Brand\";v=\"24\", \"Google Chrome\";v=\"110\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"macOS\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "cross-site"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"Sample Link\",\n    \"message\": \"\",\n    \"hyperlink\": \"https://www.youtube.com/watch?v=D3CDmRjPdcE&list=PLRAV69dS1uWTSu9cVg8jjXW8jndOYYJPP&index=4\"\n}"
                },
                "url": {
                  "raw": "{{host}}/worlds/threads/:worldId",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "threads",
                    ":worldId"
                  ],
                  "variable": [
                    {
                      "key": "worldId",
                      "value": "{{WorldId}}",
                      "description": "ID of the World"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Worlds Native App",
          "item": [
            {
              "name": "Get Featured Worlds",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/worlds/featured",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "worlds",
                    "featured"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get world by ID",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/:worldIdOrDomain",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                ":worldIdOrDomain"
              ],
              "variable": [
                {
                  "key": "worldIdOrDomain",
                  "value": "d882ccf8-085e-4a19-9905-fa1437fdaa3a",
                  "description": "ID or domain of World you wanted to get information"
                }
              ]
            },
            "description": "`Public`\n\nGet a World information by ID."
          },
          "response": []
        },
        {
          "name": "Get artist worlds and assets",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/artist_brands/:artistBrandIdOrSlug",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "artist_brands",
                ":artistBrandIdOrSlug"
              ],
              "variable": [
                {
                  "key": "artistBrandIdOrSlug",
                  "value": "{{ArtistBrandId}}",
                  "description": "ID or slug of artist brand you wanted to get worlds and assets from"
                }
              ]
            },
            "description": "`Public`\n\nGet all worlds and assets associated with an artist."
          },
          "response": []
        },
        {
          "name": "Get artist worlds media",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/media?artistId={{ArtistBrandId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "media"
              ],
              "query": [
                {
                  "key": "artistId",
                  "value": "{{ArtistBrandId}}"
                }
              ]
            },
            "description": "`Public`\n\nGet artist's worlds media."
          },
          "response": []
        },
        {
          "name": "Gameservers debug",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/gameservers/debug",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "gameservers",
                "debug"
              ]
            },
            "description": "`Private` `Superuser`\n\nGamerservers debug"
          },
          "response": []
        },
        {
          "name": "Check if domain exists",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/check/:domain",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "check",
                ":domain"
              ],
              "variable": [
                {
                  "key": "domain",
                  "value": "s1",
                  "description": "ID or domain of World you wanted to check"
                }
              ]
            },
            "description": "`Public`\n\nGet a world by ID."
          },
          "response": []
        },
        {
          "name": "Get world instances",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/gameservers/:worldId/all",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "gameservers",
                ":worldId",
                "all"
              ],
              "variable": [
                {
                  "key": "worldId",
                  "value": "{{WorldId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "/manager/v1/fleet - Get fleets",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "https://gameserver.momenthousestage.com/manager/v1/fleet",
              "protocol": "https",
              "host": [
                "gameserver",
                "momenthousestage",
                "com"
              ],
              "path": [
                "manager",
                "v1",
                "fleet"
              ]
            },
            "description": "`Public`\n\nGets all of the fleets"
          },
          "response": []
        },
        {
          "name": "Get Worlds Metadata",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/metadata",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "metadata"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Avatar Config",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/avatar_config",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "avatar_config"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Assign user a gameserver",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/gameservers/:worldId/assign?userId={{UserIdWorlds}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "gameservers",
                ":worldId",
                "assign"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{UserIdWorlds}}"
                }
              ],
              "variable": [
                {
                  "key": "worldId",
                  "value": "{{WorldId}}",
                  "description": "ID or domain of World where the user is entering"
                }
              ]
            },
            "description": "`Public`\n\nGet the gameserver which the user should join."
          },
          "response": []
        },
        {
          "name": "Run load test service",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"parallelism\": 3,\n    \"worldid\": \"fa5a36d4-ed0b-434c-82aa-c20fcb91c115\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "https://apps-west.momenthousedev.com/lt/v1/worldtest",
              "protocol": "https",
              "host": [
                "apps-west",
                "momenthousedev",
                "com"
              ],
              "path": [
                "lt",
                "v1",
                "worldtest"
              ]
            },
            "description": "Runs load test service. This will generate bots to the `worldId`. The `parallelism` is a multiplier on how many bots should be generated, parallelism: 1 = 10 bots.\n\n`/lt/v1/worldtest` = test with matchmaking service\n`/lt/v1/loadtest` = test without matchmaking service\n\nhttps://www.notion.so/team-moment/How-to-use-Worlds-load-testing-service-950e0a1867594bedb7ca5fdcb6cbe1cc"
          },
          "response": []
        },
        {
          "name": "Duplicate world",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"artistBrandId\": \"{{ArtistBrandId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/:worldId/duplicate",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                ":worldId",
                "duplicate"
              ],
              "variable": [
                {
                  "key": "worldId",
                  "value": "{{WorldId}}",
                  "description": "ID or domain of World you wanted to duplicate"
                }
              ]
            },
            "description": "`Private` `Superuser`\n\nDuplicate a world given valid `worldId`."
          },
          "response": []
        },
        {
          "name": "Receive identify analytics data",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/analytics/identify",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "analytics",
                "identify"
              ]
            },
            "description": "`Public`\n\nThis route receives analytics data for user actions. It handles an \"analytics.js\" style \"identify\" call."
          },
          "response": []
        },
        {
          "name": "Receive track analytics data",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/analytics/track",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "analytics",
                "track"
              ]
            },
            "description": "`Public`\n\nThis route receives analytics data for user actions. It handles an \"analytics.js\" style \"track\" call."
          },
          "response": []
        },
        {
          "name": "Upload World asset",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"key\": \"\",\n    \"uploadId\": \"\",\n    \"start\": false,\n    \"end\": false,\n    \"stop\": false,\n    \"assetType\": \"texture\",\n    \"name\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/:worldId/asset/upload",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                ":worldId",
                "asset",
                "upload"
              ],
              "variable": [
                {
                  "key": "worldId",
                  "value": "",
                  "description": "ID or domain of World you wanted to upload asset into"
                }
              ]
            },
            "description": "`Private`\n\nUsed to handle upload for Worlds' assets. Maximum chunk size received from FE is 5mb.\n\nNote: Currently the access is set to `Public` but will update to `Private` when this is ready for Prod."
          },
          "response": []
        },
        {
          "name": "Create World item",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"name\": \"\", \n    \"assets\": \"\", \n    \"position\": \"\", \n    \"rotation\": \"\", \n    \"scale\": \"\", \n    \"isVisible\": \"\"  \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/:worldIdOrDomain/item",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                ":worldIdOrDomain",
                "item"
              ],
              "variable": [
                {
                  "key": "worldIdOrDomain",
                  "value": "",
                  "description": "ID or domain of World you wanted to create an item into"
                }
              ]
            },
            "description": "`Private`\n\nUsed to create a world item.\n\nNote: Currently the access is set to `Public` but will update to `Private` when this is ready for Prod."
          },
          "response": []
        },
        {
          "name": "Update world domain",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"domain\": \"{{DomainName}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/:worldId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                ":worldId"
              ],
              "variable": [
                {
                  "key": "worldId",
                  "value": "",
                  "description": "ID or domain of World you wanted to update domain"
                }
              ]
            },
            "description": "`Private`\n\nUpdate the Worlds' domain, passed from the request body > domain.\n\ne.g. in the url https://bieber.worlddev.co/, `bieber` is the domain"
          },
          "response": []
        },
        {
          "name": "Update multiple items in Builder",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/:worldId/builder/update",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                ":worldId",
                "builder",
                "update"
              ],
              "variable": [
                {
                  "key": "worldId",
                  "value": ""
                }
              ]
            },
            "description": "`Public`\n\nThis is used to update multiple items in Builder. Put payload in request body."
          },
          "response": []
        },
        {
          "name": "Update World item",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/:worldId/items/:itemId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                ":worldId",
                "items",
                ":itemId"
              ],
              "variable": [
                {
                  "key": "worldId",
                  "value": "",
                  "description": "ID or domain of World where item is stored"
                },
                {
                  "key": "itemId",
                  "value": "",
                  "description": "ID of item you wanted to update"
                }
              ]
            },
            "description": "`Public`\n\nUpdates a world item. Put payload in request body."
          },
          "response": []
        },
        {
          "name": "Create/Update Ticketmaster Store data",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \n    \"title\": \"\", \n    \"description\": \"\", \n    \"externalTicketmasterId\": \"\" \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/:worldId/ticketmaster",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                ":worldId",
                "ticketmaster"
              ],
              "variable": [
                {
                  "key": "worldId",
                  "value": "",
                  "description": "ID or domain of World you wanted to create/update Ticketmaster data into"
                }
              ]
            },
            "description": "`Public`\n\nCreates or updates (if already exists) Ticketmaster store data."
          },
          "response": []
        },
        {
          "name": "/manager/v1/gameserver/:gameserver - Delete a gameserver instance",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJSUzI1NiIsImtpZCI6IkFBLXFZdTJJUTZSVjF3ODg0dE9kZG5YSXpBaGNxVk9mbThvbFB2YkZxaFEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZXZvcHMiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiYXBpLXNlcnZpY2UtYWNjb3VudC10b2tlbi1seHF2NCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJhcGktc2VydmljZS1hY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOTE3YTQzNjktNDA2NS00MWEzLWIwOTctN2QyZmI1NWQyZmYwIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRldm9wczphcGktc2VydmljZS1hY2NvdW50In0.oXOwf0QqWbr4fj7K9Rwfbvakt7jUdp7WAVo0xYbe8hbrYIJJnYkFhLH0R0DcUz1_GUK9QmJMsDKAYMyWc9NXOfTyS9nMk4J5y9i5jcNN76QricBnYVG_LnzVhy84R7xw_ZnvKcJ99rdVroFn3v4dpOSU-lIhml6nnJmj-Yup_M0XVVUe3BmsXXvlLoea-Yf0rSHArbUNEG2cZUgAQn88DERzmOIfGBVoOU82fqLObMkuii-Fd7gEqTm2B-1dMPbIsEJzL_r2LfqtRruoghp1SnfOIcP5BaMif6ZFVZ35IOAOzYnPjukc4vuGCv3Nquf0aDoTsxRIInhMkxAJ1Wnccw",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "https://gameserver.momenthousestage.com/manager/v1/gameserver/:gameserver",
              "protocol": "https",
              "host": [
                "gameserver",
                "momenthousestage",
                "com"
              ],
              "path": [
                "manager",
                "v1",
                "gameserver",
                ":gameserver"
              ],
              "variable": [
                {
                  "key": "gameserver",
                  "value": ""
                }
              ]
            },
            "description": "`Private`\n\nDeletes a world gameserver"
          },
          "response": []
        },
        {
          "name": "/manager/v1/fleet - Delete a fleet",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJSUzI1NiIsImtpZCI6IkFBLXFZdTJJUTZSVjF3ODg0dE9kZG5YSXpBaGNxVk9mbThvbFB2YkZxaFEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZXZvcHMiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiYXBpLXNlcnZpY2UtYWNjb3VudC10b2tlbi1seHF2NCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJhcGktc2VydmljZS1hY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOTE3YTQzNjktNDA2NS00MWEzLWIwOTctN2QyZmI1NWQyZmYwIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRldm9wczphcGktc2VydmljZS1hY2NvdW50In0.oXOwf0QqWbr4fj7K9Rwfbvakt7jUdp7WAVo0xYbe8hbrYIJJnYkFhLH0R0DcUz1_GUK9QmJMsDKAYMyWc9NXOfTyS9nMk4J5y9i5jcNN76QricBnYVG_LnzVhy84R7xw_ZnvKcJ99rdVroFn3v4dpOSU-lIhml6nnJmj-Yup_M0XVVUe3BmsXXvlLoea-Yf0rSHArbUNEG2cZUgAQn88DERzmOIfGBVoOU82fqLObMkuii-Fd7gEqTm2B-1dMPbIsEJzL_r2LfqtRruoghp1SnfOIcP5BaMif6ZFVZ35IOAOzYnPjukc4vuGCv3Nquf0aDoTsxRIInhMkxAJ1Wnccw",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "https://gameserver.momenthousestage.com/manager/v1/fleet/:fleet",
              "protocol": "https",
              "host": [
                "gameserver",
                "momenthousestage",
                "com"
              ],
              "path": [
                "manager",
                "v1",
                "fleet",
                ":fleet"
              ],
              "variable": [
                {
                  "key": "fleet",
                  "value": "rhobert-world2"
                }
              ]
            },
            "description": "`Private`\n\nUsed to create a world item.\n\nNote: Currently the access is set to `Public` but will update to `Private` when this is ready for Prod."
          },
          "response": []
        },
        {
          "name": "New Request",
          "request": {
            "method": "GET",
            "header": []
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let generateRandomString = \"pm\"+ Math.random().toString(36).substring(1,9);",
              "pm.variables.set(\"DomainName\", generateRandomString);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Worlds Avatar Assets",
      "item": [
        {
          "name": "Get all public avatar base assets and wearables",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/avatarItems/public",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "avatarItems",
                "public"
              ]
            },
            "description": "`Public`\n\nGet all public avatar Base Assets and Wearables"
          },
          "response": []
        },
        {
          "name": "Get all World Avatar Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/avatarItems",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "avatarItems"
              ]
            },
            "description": "`Private`\n\nGet all Worlds Avatar Items."
          },
          "response": []
        },
        {
          "name": "Grant Avatar Item",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"itemId\":\"{{ItemId}}\",\n    \"itemType\":\"wearable\",\n    \"userId\":\"{{UserId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/avataritems/grant_user_access",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "avataritems",
                "grant_user_access"
              ]
            },
            "description": "`Private`\n\nGrants users to a Worlds avatar Item."
          },
          "response": []
        },
        {
          "name": "Revoke Avatar Item",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"itemId\":\"{{ItemId}}\",\n    \"itemType\":\"wearable\",\n    \"userId\":\"{{UserId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/avataritems/revoke_user_access",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "avataritems",
                "revoke_user_access"
              ]
            },
            "description": "`Private`\n\nRevokes world avatar item from a user."
          },
          "response": []
        },
        {
          "name": "Create Avatar Asset",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"displayName\": \"RVO Added Avatar Item (DO NOT DELETE)\",\n    \"type\": \"eyes\",\n    \"misc\": {\n        \"assetId\": \"3510a5fe-065c-4f98-b70b-79271f47d6e8\",\n        \"color\": \"#3fba12\"\n    },\n    \"allowedUsers\": []\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/avatarItems",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "avatarItems"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Avatar Asset",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/avatarItems/:assetId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "avatarItems",
                ":assetId"
              ],
              "variable": [
                {
                  "key": "assetId",
                  "value": "{{AssetId}}",
                  "description": "ID of the Asset you want to soft delete"
                }
              ]
            },
            "description": "`Private`\n\nDelete Avatar Asset."
          },
          "response": []
        },
        {
          "name": "Update Avatar Asset",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"deletedAt\": false,\n    \"displayName\":\"RVO Deletable Item\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/worlds/avatarItems/:assetId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "avatarItems",
                ":assetId"
              ],
              "variable": [
                {
                  "key": "assetId",
                  "value": "{{AssetId}}"
                }
              ]
            },
            "description": "`Private`\n\nUpdate Avatar Asset."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Worlds Wearables",
      "item": [
        {
          "name": "Get all Worlds Wearables",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/wearables",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "wearables"
              ]
            },
            "description": "`Public`\n\nGet all Worlds Wearables"
          },
          "response": []
        },
        {
          "name": "Get public Worlds Wearables",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/wearables/public",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "wearables",
                "public"
              ]
            },
            "description": "`Public`\n\nGet all public Worlds Wearables"
          },
          "response": []
        },
        {
          "name": "Update Wearable",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "authority",
                "value": "api.momenthousestage.com"
              },
              {
                "key": "accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "accept-language",
                "value": "en-US,en;q=0.9"
              },
              {
                "key": "authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhNTdmNDI4Ni0wOGE3LTQ1ODItYTQ0NS05ZmZiYmJkNzVjOTYiLCJhcnRpc3RCcmFuZElkIjoiMGQ3YzdiY2ItOGI4MS00YTI1LWJjZWQtZjJjYWU2YmM4NzBmIiwidmVyc2lvbkhhc2giOiIkMmIkMTAkZkJKMkcvbWlwMTRJSC91NXFEWWEyT21QSE5qeFQ2WDl2RFFRNVl6MXpqZHguaWZTWlZRQXEiLCJpYXQiOjE2ODEyNjI3OTAsImV4cCI6MTY4MTg2NzU5MH0.R8lkHGgAUokblTSZ0U8LL04BA8Zk4jgO0Rps4FGmIjs"
              },
              {
                "key": "origin",
                "value": "https://admin.momenthousestage.com"
              },
              {
                "key": "referer",
                "value": "https://admin.momenthousestage.com/"
              },
              {
                "key": "sec-ch-ua",
                "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
              },
              {
                "key": "sec-ch-ua-mobile",
                "value": "?0"
              },
              {
                "key": "sec-ch-ua-platform",
                "value": "\"macOS\""
              },
              {
                "key": "sec-fetch-dest",
                "value": "empty"
              },
              {
                "key": "sec-fetch-mode",
                "value": "cors"
              },
              {
                "key": "sec-fetch-site",
                "value": "same-site"
              },
              {
                "key": "user-agent",
                "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "displayName",
                  "value": "RVO TB Deleted Item (DO NOT DELETE)",
                  "type": "text"
                },
                {
                  "key": "category",
                  "value": "bottom",
                  "type": "text"
                },
                {
                  "key": "modelId",
                  "value": "91ea9a5a-7259-48b5-b2eb-07dd4b779cea",
                  "type": "text"
                },
                {
                  "key": "normalMapId",
                  "value": "",
                  "type": "text"
                },
                {
                  "key": "hiddenBodyParts",
                  "value": "",
                  "type": "text"
                },
                {
                  "key": "hiddenWearables",
                  "value": "",
                  "type": "text"
                },
                {
                  "key": "overriddenWearables",
                  "value": "",
                  "type": "text"
                },
                {
                  "key": "variants",
                  "value": "{\"d1e311a6-293c-440a-b31a-09233ac605fe\":{\"id\":\"d1e311a6-293c-440a-b31a-09233ac605fe\",\"artistBrandId\":null,\"displayName\":\"RVO TB Deleted Item\",\"category\":\"bottom\",\"color\":null,\"price\":0,\"cap\":null,\"createdAt\":\"2023-04-12T01:46:07.000Z\",\"deletedAt\":\"2023-04-12T01:50:37.889Z\",\"thumbnail\":\"https://moment-house-worlds.s3.us-west-1.amazonaws.com/assets/avatars/wearables/1681263966397_MaleAvatar_v12_shorts_black.jpg\",\"modelId\":\"91ea9a5a-7259-48b5-b2eb-07dd4b779cea\",\"textureId\":\"154692f5-d6d8-42f4-8387-e35519411539\",\"hiddenBodyParts\":null,\"hiddenWearables\":null,\"categoryOrder\":null,\"textureOrder\":0,\"parentId\":\"9fa2fe4f-130f-4c67-a7a5-5fb39368b111\",\"variantDisplayName\":\"\",\"overriddenWearables\":null,\"normalMapId\":null,\"isPublic\":false,\"artistBrand\":null,\"model\":{\"id\":\"91ea9a5a-7259-48b5-b2eb-07dd4b779cea\",\"name\":\"1681263943115_MaleAvatar_v12_shorts.glb\",\"misc\":{\"node\":\"\",\"path\":\"https://moment-house-worlds.s3.us-west-1.amazonaws.com/assets/avatars/wearables/1681263943115_MaleAvatar_v12_shorts.glb\",\"slug\":\"1681263943115_MaleAvatar_v12_shorts.glb\",\"flipY\":false,\"repeat\":false,\"encoding\":null},\"deletedAt\":null,\"createdAt\":\"2023-04-12T01:45:46.255Z\",\"updatedAt\":\"2023-04-12T01:45:46.255Z\",\"slug\":null,\"assetType\":\"model\",\"artistBrandId\":null,\"worldId\":null},\"normalMap\":null,\"parent\":{\"id\":\"9fa2fe4f-130f-4c67-a7a5-5fb39368b111\",\"artistBrandId\":null,\"deletedAt\":null,\"createdAt\":\"2023-04-12T01:46:06.992Z\",\"updatedAt\":\"2023-04-12T01:46:06.992Z\",\"gender\":null},\"texture\":{\"id\":\"154692f5-d6d8-42f4-8387-e35519411539\",\"name\":\"1681263957987_MaleAvatar_v12_shorts_black.jpg\",\"misc\":{\"node\":\"\",\"path\":\"https://moment-house-worlds.s3.us-west-1.amazonaws.com/assets/avatars/wearables/1681263957987_MaleAvatar_v12_shorts_black.jpg\",\"slug\":\"1681263957987_MaleAvatar_v12_shorts_black.jpg\",\"flipY\":false,\"repeat\":false,\"encoding\":null},\"deletedAt\":null,\"createdAt\":\"2023-04-12T01:46:01.038Z\",\"updatedAt\":\"2023-04-12T01:46:01.038Z\",\"slug\":null,\"assetType\":\"texture\",\"artistBrandId\":null,\"worldId\":null},\"allowedUsers\":[{\"id\":\"e011e6d5-4713-4a6e-ad0b-11414eb1c9c9\",\"firstName\":\"\",\"lastName\":\"\",\"slug\":\"rvotetsmhmsjscom\",\"email\":\"rvo.tets.mh@msjs.com\",\"passwordHash\":\"$2b$10$Er1KxkLUYxV3U3h3gs3OpOLArrAdfZksIqNT4ed8dryhIUkZWCVkG\",\"createdAt\":\"2022-12-01T22:55:02.031Z\",\"updatedAt\":\"2022-12-01T22:55:02.875Z\",\"isSuper\":false,\"stripeAccountId\":null,\"phone\":null,\"resetPasswordToken\":null,\"isVerified\":false,\"paypal\":null,\"stripeCustomerId\":null,\"externalBillingId\":\"cus_Mu9yyEYwoC7qbt\",\"lang\":\"en\",\"timezone\":\"Asia/Manila\",\"image\":null,\"bio\":null,\"instagram\":null,\"access\":null,\"signupSource\":\"native\",\"countryCode\":null,\"mobileDeviceId\":null,\"birthday\":null,\"username\":\"Jzjsjsjs\",\"location\":null,\"twitter\":null,\"solWalletId\":null,\"ethWalletId\":null,\"walletAuthNonce\":null,\"avatar\":{\"wearables\":{\"top\":\"dfb4a773-2d22-465b-a04e-adba837055a0\",\"hair\":\"70b11f69-b174-4080-8f30-6dd8b94029ed\",\"shoes\":\"475b6f50-cd4f-42a6-8206-ffbe2fac75fa\",\"bottom\":\"938e821f-ac8c-4122-82e2-884c1a412627\",\"eyebrows\":\"c2262a5d-220f-4310-9d6f-cffb33dd2b01\"},\"morphTargets\":{\"gender\":\"female\"},\"avatarAttributes\":{\"body\":\"924d8113-f0ed-46a9-b9bd-9f4f736fb8e4\",\"eyes\":\"d727b1e5-d9a6-4b75-99dd-7e33e39d824a\",\"hairColor\":\"#303336\",\"eyebrowColor\":\"#303336\"}},\"locked\":false,\"verifiedCreator\":false,\"worldsOnboarding\":true,\"avatarImage\":\"https://images.momenthouse.com/w/default-avatar-v3.png\",\"expoPushToken\":null,\"worldsAccess\":true,\"worldAccessAt\":\"2022-12-01T22:55:02.031Z\",\"subscription\":null,\"hasCustomAvatar\":false,\"onboarding\":{},\"verificationCode\":null,\"globalBanned\":false,\"isEmailVerified\":null,\"isPhoneVerified\":null,\"systemPreferences\":{}}]}}",
                  "type": "text"
                },
                {
                  "key": "artistBrandId",
                  "value": "",
                  "type": "text"
                },
                {
                  "key": "isPublic",
                  "value": "false",
                  "type": "text"
                },
                {
                  "key": "thumbnail",
                  "value": "https://moment-house-worlds.s3.us-west-1.amazonaws.com/assets/avatars/wearables/1681263966397_MaleAvatar_v12_shorts_black.jpg",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{host}}/worlds/wearables/parent/:parentWearableId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "wearables",
                "parent",
                ":parentWearableId"
              ],
              "variable": [
                {
                  "key": "parentWearableId",
                  "value": "{{WearableId}}",
                  "description": "ID of the wearable to be updated"
                }
              ]
            },
            "description": "`Private`\n\nUpdates the selected worlds wearable."
          },
          "response": []
        },
        {
          "name": "Delete Wearable",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/wearables/parent/:wearableId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "wearables",
                "parent",
                ":wearableId"
              ],
              "variable": [
                {
                  "key": "wearableId",
                  "value": "{{WearableId}}",
                  "description": "ID of the wearable to be deleted"
                }
              ]
            },
            "description": "`Private`\n\nDeletes a world wearable."
          },
          "response": []
        },
        {
          "name": "New Request",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{host}}/worlds/wearables/:wearableId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "worlds",
                "wearables",
                ":wearableId"
              ],
              "variable": [
                {
                  "key": "wearableId",
                  "value": "34148d7c-ff92-46fc-ad66-43c8b9d6aba2"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Worlds Threads",
      "item": []
    },
    {
      "name": "NFTs",
      "item": [
        {
          "name": "GetNFTCollections",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{FanUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/nfts/artist_brands/:ArtistBrandId/nfts",
              "host": [
                "{{host}}"
              ],
              "path": [
                "nfts",
                "artist_brands",
                ":ArtistBrandId",
                "nfts"
              ],
              "query": [
                {
                  "key": "",
                  "value": null,
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "ArtistBrandId",
                  "value": "shraybansal"
                }
              ]
            },
            "description": "`Private`\n\nGets tickets of the logged in user."
          },
          "response": []
        },
        {
          "name": "getNFTs",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{FanUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/nfts/artist_brands/:ArtistBrandId/collections",
              "host": [
                "{{host}}"
              ],
              "path": [
                "nfts",
                "artist_brands",
                ":ArtistBrandId",
                "collections"
              ],
              "query": [
                {
                  "key": "",
                  "value": null,
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "ArtistBrandId",
                  "value": "shraybansal"
                }
              ]
            },
            "description": "`Private`\n\nGets tickets of the logged in user."
          },
          "response": []
        }
      ]
    },
    {
      "name": "S3",
      "item": [
        {
          "name": "sign",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/waitlist/:eventId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "waitlist",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{EventId}}"
                }
              ]
            },
            "description": "`Private`\n\nThis is used to get the waitlist of an event. Event setting `Waitlist` should be enabled."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Info",
      "item": [
        {
          "name": "Redis Health",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "X-API-Vendor-ID",
                "value": "{{PUBLIC_API_VENDOR_ID}}",
                "type": "text"
              },
              {
                "key": "X-API-Key",
                "value": "{{PUBLIC_API_VENDOR_KEY}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:5000/info/redishc",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "5000",
              "path": [
                "info",
                "redishc"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Postgres Health",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "X-API-Vendor-ID",
                "value": "{{PUBLIC_API_VENDOR_ID}}",
                "type": "text"
              },
              {
                "key": "X-API-Key",
                "value": "{{PUBLIC_API_VENDOR_KEY}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:5000/info/health",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "5000",
              "path": [
                "info",
                "health"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tutorial",
      "item": [
        {
          "name": "error_handling",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "X-API-Vendor-ID",
                "value": "{{PUBLIC_API_VENDOR_ID}}",
                "type": "text"
              },
              {
                "key": "X-API-Key",
                "value": "{{PUBLIC_API_VENDOR_KEY}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "http://localhost:5000/info/redishc",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "5000",
              "path": [
                "info",
                "redishc"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "[REMOVED] Subscriptions",
      "item": [
        {
          "name": "Get artist subscription",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/subscriptions/artist_brands/:artistBrandId/subscriptions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "subscriptions",
                "artist_brands",
                ":artistBrandId",
                "subscriptions"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{SubscriptionArtistBrandId}}",
                  "description": "ID of the aritst brand you wanted to get subscription info"
                }
              ]
            },
            "description": "`Public`\n\nThis gets artist brand's subscription information."
          },
          "response": []
        },
        {
          "name": "Get artist subscription sales breakdown",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/subscriptions/:artistBrandId/salesBreakdown",
              "host": [
                "{{host}}"
              ],
              "path": [
                "subscriptions",
                ":artistBrandId",
                "salesBreakdown"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{SubscriptionArtistBrandId}}",
                  "description": "ID of the artist brand you wanted to get the subscription sales breakdown"
                }
              ]
            },
            "description": "`Public`\n\nThis gets artist brand's subscription sales breakdown."
          },
          "response": []
        },
        {
          "name": "Get my subscription list",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{FanUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/subscriptions/users/subscriptions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "subscriptions",
                "users",
                "subscriptions"
              ]
            },
            "description": "`Private`\n\nThis gets artist brand's list of subscriptions."
          },
          "response": []
        },
        {
          "name": "Setup artist subscription",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"artistBrandId\": \"{{AritstBrandId}}\", \n    \"price\": 500, \n    \"name\": \"Base subscription\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/subscriptions/artist_brands/:artistBrandId/subscriptions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "subscriptions",
                "artist_brands",
                ":artistBrandId",
                "subscriptions"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{SubscriptionArtistBrandId}}",
                  "description": "ID of the artist brand you wanted to create a subscription"
                }
              ]
            },
            "description": "`Private`\n\nThis creates an artist subscription pricing. Cannot create more than one subscription."
          },
          "response": []
        },
        {
          "name": "Subscribe to artist brand",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "\n{\n    \"subscriptionId\": \"{{SubscriptionId}}\",\n    \"eventId\": \"{{SubscriptionEventId}}\",\n    \"paymentMethodId\": \"{{PaymentMethodId}}\",\n    \"userInfo\": {\n        \"email\": \"{{UserEmail}}\"\n    },\n    \"timezone\": \"America/Los_Angeles\",\n    \"mailingList\": false,\n    \"selectedCurrency\": \"USD\",\n    \"returnPrice\": false,\n    \"location\": \"\",\n    \"accessToken\": \"\",\n    \"captchaToken\": \"{{CaptchaToken}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/subscriptions/artist_brands/:artistBrandId/subscriptions/:subscriptionId/checkout",
              "host": [
                "{{host}}"
              ],
              "path": [
                "subscriptions",
                "artist_brands",
                ":artistBrandId",
                "subscriptions",
                ":subscriptionId",
                "checkout"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{SubscriptionArtistBrandId}}",
                  "description": "ID of the artist brand you wanted to subscribe to"
                },
                {
                  "key": "subscriptionId",
                  "value": "{{SubscriptionId}}",
                  "description": "ID of the artist brand subscription"
                }
              ]
            },
            "description": "`Private`\n\nThis lets fan user to subscribe to artist brand"
          },
          "response": []
        },
        {
          "name": "Update artist subscription",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"artistBrandId\": \"{{AritstBrandId}}\", \n    \"price\": 500, \n    \"name\": \"Base subscription\",\n    \"subscriptionId\": \"{{SubscriptionId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/subscriptions/artist_brands/:artistBrandId/subscriptions/:subscriptionId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "subscriptions",
                "artist_brands",
                ":artistBrandId",
                "subscriptions",
                ":subscriptionId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{SubscriptionArtistBrandId}}",
                  "description": "ID of the artist brand you wanted to update subscription"
                },
                {
                  "key": "subscriptionId",
                  "value": "{{SubscriptionId}}",
                  "description": "ID of the subscription you wanted to update"
                }
              ]
            },
            "description": "`Private`\n\nThis updates artist's subscription information."
          },
          "response": []
        },
        {
          "name": "Cancel user subscription",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{FanUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{host}}/subscriptions/users/subscriptions/:subscriptionId/cancel",
              "host": [
                "{{host}}"
              ],
              "path": [
                "subscriptions",
                "users",
                "subscriptions",
                ":subscriptionId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "subscriptionId",
                  "value": "{{SubscriptionId}}",
                  "description": "ID of the subscription you wanted to cancel"
                }
              ]
            },
            "description": "`Private`\n\nThis cancels fan user's subscription to a specific artist brand."
          },
          "response": []
        },
        {
          "name": "Delete artist subscription",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/subscriptions/artist_brands/:artistBrandId/subscriptions/:subscriptionId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "subscriptions",
                "artist_brands",
                ":artistBrandId",
                "subscriptions",
                ":subscriptionId"
              ],
              "variable": [
                {
                  "key": "artistBrandId",
                  "value": "{{SubscriptionArtistBrandId}}",
                  "description": "ID of the artist brand you wanted to delete subscription"
                },
                {
                  "key": "subscriptionId",
                  "value": "{{SubscriptionId}}",
                  "description": "ID of the subscription you wanted to delete"
                }
              ]
            },
            "description": "`Private`\n\nThis deletes a subscription. Just supply `artistBrandId` and `subscriptionId`."
          },
          "response": []
        }
      ],
      "description": "Particular artist brand is provided for Subscription routes."
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Get new token for Superuser every before request",
          "",
          "const host = pm.variables.get('host')",
          "const email = pm.variables.get('UserEmail')",
          "const password = pm.variables.get('UserPassword')",
          "// console.log(host)",
          "// console.log(email)",
          "// console.log(password)",
          "",
          "",
          "const getSuperuserToken = {",
          "    url: `${pm.variables.get('host')}/auth/login`,",
          "    method: 'POST',",
          "    header: { ",
          "        'content-type': 'application/json' },",
          "    body: {",
          "        mode: 'raw',",
          "        raw: JSON.stringify({",
          "            \"email\": `${pm.variables.get('UserEmail')}`,",
          "            \"password\": `${pm.variables.get('UserPassword')}`",
          "        })",
          "    }",
          "};",
          "// console.log('getSuperuserToken', getSuperuserToken);",
          "pm.sendRequest(getSuperuserToken, function (error, result) {",
          "    console.log(error, result)",
          "    let data = result.json();",
          "    if (error) {",
          "        console.log(\"GetSuperuserToken\", error);",
          "    }",
          "    else {",
          "        pm.variables.set(\"token\", data.token);",
          "        console.log(data.token);",
          "    }",
          "});",
          "",
          "// Get new token for Superuser every before request",
          "",
          "const getFanToken = {",
          "    url: `${pm.variables.get('host')}/auth/login`,",
          "    method: 'POST',",
          "    header: { ",
          "        'content-type': 'application/json' },",
          "    body: {",
          "        mode: 'raw',",
          "        raw: JSON.stringify({",
          "            \"email\": `${pm.variables.get('FanUserEmail')}`,",
          "            \"password\": `${pm.variables.get('UserPassword')}`",
          "        })",
          "    }",
          "};",
          "",
          "pm.sendRequest(getSuperuserToken, function (error, result) {",
          "    let data = result.json();",
          "    if (error) {",
          "        console.log(\"Fan Token - getSuperuserToken\", error);",
          "    }",
          "    else {",
          "        pm.variables.set(\"FanUserToken\", data.token);",
          "        console.log(data.token);",
          "    }",
          "});",
          "",
          "",
          "",
          "",
          "let generateRandomNumber = Math.random().toString().split('.').join(\"\");",
          "let generateRandomString = Math.random().toString(36).substring(1,9);",
          "",
          "pm.variables.set(\"RandomNumber\", generateRandomNumber);",
          "pm.variables.set(\"RandomString\", generateRandomString);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "pm.test(\"Status code is 200\", function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204])",
          "});",
          "pm.test(\"Response time is less than 5 seconds\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "SongId",
      "value": ""
    },
    {
      "key": "SongTitle",
      "value": ""
    },
    {
      "key": "AccessCode",
      "value": ""
    },
    {
      "key": "randomNumber",
      "value": ""
    },
    {
      "key": "GeneratedCode",
      "value": "20279"
    },
    {
      "key": "eventAccessCodeGroupId",
      "value": "420b5b47-5497-4816-98f3-c86279717ab0"
    },
    {
      "key": "PasswordResetToken",
      "value": ""
    },
    {
      "key": "artistAccessCodeGroupId",
      "value": "af6fbdd8-f6c2-45ef-a0d6-ac91de9c7fb5"
    }
  ]
}
